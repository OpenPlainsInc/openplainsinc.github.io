[
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#grass-v8.5-preview",
    "href": "content/notebooks/us_doi/grass_jupyter.html#grass-v8.5-preview",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "GRASS v8.5 (Preview)",
    "text": "GRASS v8.5 (Preview)\n\nGRASS GIS is a Geospatial Processing Engine\nOpen Source (GPL v2)\nDeveloped by International and Multi-institutional groups and individuals (GRASS Development Team)\nMember of the Open Source Geospatial Foundatispace\nRecieved Open Source Security Foundation (OpenSSF) Best Practices Badge - 2024\n\n\nModern Tooling\n\nJupyter Notebooks\nGRASS GIS Python API\nActinia REST API\nEasy intergration with other Data Science tools in Python and R ecosystem\n\n\n\nCommunity\n\nActive community of users and developers\nMailing lists, chat, and forums\nConferences and workshops\nDocumentation and tutorials\nMentoring and outreach programs\n\n\n\nLeader in Open Science\n\nOpen Access\nCommunity Mantaince and Support\nReproducible Research\nCitations"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#setup-environment",
    "href": "content/notebooks/us_doi/grass_jupyter.html#setup-environment",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Setup Environment",
    "text": "Setup Environment\nImport python packages and set up the GRASS GIS environment.\n\n# import standard Python packages\nimport os\nimport sys\nimport subprocess\nimport json\nfrom io import StringIO\nfrom pathlib import Path\n\n%reload_ext autoreload\n%autoreload 2\n# Visulization packages\nimport pandas as pd\nimport geopandas as gpd\nimport seaborn as sns\n\n\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n\n# import GRASS GIS python packages\n%reload_ext autoreload\n%autoreload 2\nimport grass.script as gs\nimport grass.jupyter as gj\n\n\n# create a temporary folder where to place our GRASS project\nimport tempfile\ntempdir = tempfile.TemporaryDirectory()\nprint(tempdir.name)\n\n/tmp/tmpnp2dcvk3"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#area-of-interest",
    "href": "content/notebooks/us_doi/grass_jupyter.html#area-of-interest",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Area of Interest",
    "text": "Area of Interest\n\nChaco Cultural National Historical Park\n\n\n\n\n\n\n\nNPS Park Image\n\n\n\nImage Source - Chetro Ketl from overview on Pueblo Alto trail - NPS Photo\nMap Source\n\n\n\nThe full dataset is available through OpenTopography\n\n\nData Summary\n\nFunding: National Science Foundation (NSF) Earth Sciences (EAR) Instrumentation and Facilities (IF) Program\nPartner: University of New Mexico\nCollector: National Center for Airborne Laser Mapping (NCALM)\n\nData Characteristics\n\nArea 542.72 km^2\nOver 13 Billion Points\nPoint Density 25.56 pts/m^2\n\nRaster Resolution 0.5 m\nCoordinate System: Horizontal: NAD83 (2011) (EPOCH:2010) / UTM Zone 13N Meters [EPSG: 6342] Vertical: NAVD88 [EPSG: 5703]\nUnits: Meters\nComplete metadata can be found at: OpenTopography\n\nDorshow, W. (2019). 3D Landscape Reconstruction and Land Use Modeling, Chaco Canyon, NM 2016. National Center for Airborne Laser Mapping (NCALM). Distributed by OpenTopography. https://doi.org/10.5069/G9XG9P8D.. Accessed: 2024-08-19\n\n\n\nDownload Data\nThe data used in this tutorial is available through GitHub.\nLidar Data\n\n\nVisualize the point cloud\n\nfrom IPython.display import IFrame\n\n# URL of the website to be embedded\nurl = 'https://ot-process2.sdsc.edu/potree/index.html?t=%5B233574.5,3994716,2188.5%5D&p=%5B234704.19367662142,3993579.3112938125,2825.660091521463%5D&r=%22https://ot-process2.sdsc.edu/appEntwineEPTService1724096588005642548939/pc1724096516919%22&m=9&era=%5B1858,2519%5D'\n# Dimensions of the IFrame\nwidth = 800\nheight = 600\n# Display the IFrame in the notebook\nIFrame(url, width=width, height=height)"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#grass-project-setup",
    "href": "content/notebooks/us_doi/grass_jupyter.html#grass-project-setup",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "GRASS Project Setup",
    "text": "GRASS Project Setup\nCreate a new project in GRASS for Chaco Culture National Historical Park\n\ngs.create_project(path=tempdir.name, name=\"ChacoCanyon2016\", epsg=\"6342\", overwrite=True)\n\n\n# start GRASS in the recently created project\nsession = gj.init(Path(tempdir.name,\"ChacoCanyon2016\"))\n\n\nDownload Add-ons\nGRASS GIS Addons Over 400 add-ons available!\nLet’s download the add-ons for the project.\n\nwith open(\"extensions.txt\", \"r\") as f:\n    lines = f.readlines()\n    for line in lines:\n        line = line.strip()\n        print(f\"Installing: {line}\")\n        gs.run_command(\"g.extension\", extension=line, operation=\"add\")"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#prepare-data",
    "href": "content/notebooks/us_doi/grass_jupyter.html#prepare-data",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Prepare Data",
    "text": "Prepare Data\nLet’s examine point cloud data first with pdal before importing into GRASS GIS.\n\n!pdal info --summary metadata/points2.laz\n\n{\n  \"file_size\": 18912844,\n  \"filename\": \"metadata/points2.laz\",\n  \"now\": \"2024-08-22T17:20:40-0400\",\n  \"pdal_version\": \"2.3.0 (git-version: Release)\",\n  \"reader\": \"readers.las\",\n  \"summary\":\n  {\n    \"bounds\":\n    {\n      \"maxx\": 229974.27,\n      \"maxy\": 3997397.29,\n      \"maxz\": 2030.95,\n      \"minx\": 229377.17,\n      \"miny\": 3996851.14,\n      \"minz\": 1846.72\n    },\n    \"dimensions\": \"X, Y, Z, Intensity, ReturnNumber, NumberOfReturns, ScanDirectionFlag, EdgeOfFlightLine, Classification, ScanAngleRank, UserData, PointSourceId, GpsTime, ScanChannel, ClassFlags\",\n    \"num_points\": 9017333,\n    \"srs\":\n    {\n      \"compoundwkt\": \"COMPD_CS[\\\"NAD83(2011) / UTM zone 13N + NAVD88 height\\\",PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",GEOGCS[\\\"NAD83(2011)\\\",DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-105],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]],VERT_CS[\\\"NAVD88 height\\\",VERT_DATUM[\\\"North American Vertical Datum 1988\\\",2005,AUTHORITY[\\\"EPSG\\\",\\\"5103\\\"]],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Gravity-related height\\\",UP],AUTHORITY[\\\"EPSG\\\",\\\"5703\\\"]]]\",\n      \"horizontal\": \"PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",GEOGCS[\\\"NAD83(2011)\\\",DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-105],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]]\",\n      \"isgeocentric\": false,\n      \"isgeographic\": false,\n      \"prettycompoundwkt\": \"COMPD_CS[\\\"NAD83(2011) / UTM zone 13N + NAVD88 height\\\",\\n    PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",\\n        GEOGCS[\\\"NAD83(2011)\\\",\\n            DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",\\n                SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                    AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],\\n                AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],\\n            PRIMEM[\\\"Greenwich\\\",0,\\n                AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],\\n            UNIT[\\\"degree\\\",0.0174532925199433,\\n                AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],\\n            AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],\\n        PROJECTION[\\\"Transverse_Mercator\\\"],\\n        PARAMETER[\\\"latitude_of_origin\\\",0],\\n        PARAMETER[\\\"central_meridian\\\",-105],\\n        PARAMETER[\\\"scale_factor\\\",0.9996],\\n        PARAMETER[\\\"false_easting\\\",500000],\\n        PARAMETER[\\\"false_northing\\\",0],\\n        UNIT[\\\"metre\\\",1,\\n            AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\\n        AXIS[\\\"Easting\\\",EAST],\\n        AXIS[\\\"Northing\\\",NORTH],\\n        AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]],\\n    VERT_CS[\\\"NAVD88 height\\\",\\n        VERT_DATUM[\\\"North American Vertical Datum 1988\\\",2005,\\n            AUTHORITY[\\\"EPSG\\\",\\\"5103\\\"]],\\n        UNIT[\\\"metre\\\",1,\\n            AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\\n        AXIS[\\\"Gravity-related height\\\",UP],\\n        AUTHORITY[\\\"EPSG\\\",\\\"5703\\\"]]]\",\n      \"prettywkt\": \"PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",\\n    GEOGCS[\\\"NAD83(2011)\\\",\\n        DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",\\n            SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],\\n            AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],\\n        UNIT[\\\"degree\\\",0.0174532925199433,\\n            AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],\\n        AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],\\n    PROJECTION[\\\"Transverse_Mercator\\\"],\\n    PARAMETER[\\\"latitude_of_origin\\\",0],\\n    PARAMETER[\\\"central_meridian\\\",-105],\\n    PARAMETER[\\\"scale_factor\\\",0.9996],\\n    PARAMETER[\\\"false_easting\\\",500000],\\n    PARAMETER[\\\"false_northing\\\",0],\\n    UNIT[\\\"metre\\\",1,\\n        AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\\n    AXIS[\\\"Easting\\\",EAST],\\n    AXIS[\\\"Northing\\\",NORTH],\\n    AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]]\",\n      \"proj4\": \"+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +vunits=m +no_defs\",\n      \"units\":\n      {\n        \"horizontal\": \"metre\",\n        \"vertical\": \"metre\"\n      },\n      \"vertical\": \"VERT_CS[\\\"NAVD88 height\\\",VERT_DATUM[\\\"North American Vertical Datum 1988\\\",2005,AUTHORITY[\\\"EPSG\\\",\\\"5103\\\"]],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Gravity-related height\\\",UP],AUTHORITY[\\\"EPSG\\\",\\\"5703\\\"]]\",\n      \"wkt\": \"PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",GEOGCS[\\\"NAD83(2011)\\\",DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-105],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]]\"\n    }\n  }\n}\n\n\n\nRemove Outliers from Point Cloud\n\n!pdal pipeline pdal/preprocessing.json"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#import-data-into-grass-gis",
    "href": "content/notebooks/us_doi/grass_jupyter.html#import-data-into-grass-gis",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Import Data into GRASS GIS",
    "text": "Import Data into GRASS GIS\nLet’s calculate the point density of the point cloud data at 1m resolution.\n\ngs.run_command('r.in.pdal',\n            input='metadata/points2_clean.laz', \n            output='points_n',\n            method='n', # Count number of points per cell\n            resolution=1, # 1 meter\n            flags=\"ewn\",\n            overwrite=True)\n\n\nVisulalize the Raster Data\n\ngs.run_command(\"r.colors\", map=\"points_n\", color=\"bcyr\", flags=\"e\")\nm = gj.Map()\nm.d_rast(map=\"points_n\")\nm.d_legend(raster=\"points_n\", at=(5, 10, 50, 90), flags=\"b\")\nm.d_barscale(at=(5, 6), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\npoints_n_info = gs.parse_command('r.info', map='points_n', format=\"json\")\npoints_n_df = pd.DataFrame(points_n_info)\n\npoints_n_df.head(1)\n\n\n\n\n\n\n\n\nnorth\nsouth\nnsres\neast\nwest\newres\nrows\ncols\ncells\ndatatype\n...\ncreator\ntitle\ntimestamp\nunits\nvdatum\nsemantic_label\nsource1\nsource2\ndescription\ncomments\n\n\n\n\n0\n3997398\n3996851\n1\n229975\n229377\n1\n547\n598\n327106\nCELL\n...\ncoreywhite\nRaw X,Y,Z data binned into a raster grid by ce...\nNone\nNone\nNone\nNone\nmetadata/points2_clean.laz\n\ngenerated by r.in.pdal\nr.in.pdal --overwrite -w -e -n input=\"metadata...\n\n\n\n\n1 rows × 30 columns\n\n\n\n\n\nHistograms of Raster Data\n\nhist = gj.Map()\nhist.d_histogram(map=\"points_n\", flags=\"c\")\nhist.show()\n\n\n\n\n\n\n\n\n\nunivar_json = gs.parse_command('r.univar', map='points_n', format=\"json\")\nunivar_df = pd.DataFrame(univar_json)\nunivar_df.head()\n\n\n\n\n\n\n\n\nn\nnull_cells\ncells\nmin\nmax\nrange\nmean\nmean_of_abs\nstddev\nvariance\ncoeff_var\nsum\n\n\n\n\n0\n327106\n0\n327106\n0\n135\n135\n27.567006\n27.567006\n8.416197\n70.832372\n30.529964\n9017333\n\n\n\n\n\n\n\n\ngs.run_command('r.in.pdal',\n            input='metadata/points2_clean.laz', \n            output='points_median',\n            method='median', # median of the z values\n            resolution=1, # meter\n            flags=\"ewn\",\n            overwrite=True)\n\ngs.run_command(\"r.colors\", map=\"points_median\", color=\"elevation\", flags=\"\")\nm = gj.Map()\n\nm.d_rast(map=\"points_median\")\nm.d_legend(raster=\"points_median\", at=(60, 95, 85, 90), flags=\"bd\")\nm.d_barscale(at=(5, 6), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\nNow let’s look at the histograms of the median elevation.\n\nhist = gj.Map()\nhist.d_histogram(map=\"points_median\")\nhist.show()\n\n\n\n\n\n\n\n\n\nunivar_json = gs.parse_command('r.univar', map='points_median', format=\"json\", flags=\"e\")\nunivar_df = pd.DataFrame(univar_json)\nunivar_df.head()\n\n\n\n\n\n\n\n\nn\nnull_cells\ncells\nmin\nmax\nrange\nmean\nmean_of_abs\nstddev\nvariance\ncoeff_var\nsum\nfirst_quartile\nmedian\nthird_quartile\npercentiles\n\n\n\n\n0\n327090\n16\n327106\n1846.920044\n1918.099976\n71.179932\n1896.1288\n1896.1288\n17.64089\n311.200993\n0.930363\n6.202048e+08\n1889.959961\n1902.719971\n1908.689941\n[{'percentile': 90, 'value': 1911.6400146484375}]\n\n\n\n\n\n\n\n\ndef spatial_resolution_analysis():\n    output_maps = []\n    for i in [0.5, 1, 3, 5, 10]:\n        output_map = f'points_{i}m_mean'\n        gs.run_command('r.in.pdal',\n                input='metadata/points2_clean.laz', \n                output=output_map,\n                method='mean', # mean of the z values\n                resolution=i, # meter\n                flags=\"ewn\",\n                overwrite=True)\n        univar_json = gs.parse_command('r.univar', map=output_map, format=\"json\", flags=\"e\")\n        univar_json[0]['resolution'] = i\n        output_maps.append(univar_json[0])\n\n    return pd.DataFrame(output_maps)\n\nmean_univar_df = spatial_resolution_analysis()\nmean_univar_df.set_index('resolution', inplace=True)\nmean_univar_df.head(5)\n\n\n\n\n\n\n\n\nn\nnull_cells\ncells\nmin\nmax\nrange\nmean\nmean_of_abs\nstddev\nvariance\ncoeff_var\nsum\nfirst_quartile\nmedian\nthird_quartile\npercentiles\n\n\nresolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.5\n1298570\n7565\n1306135\n1846.883301\n1962.815796\n115.932495\n1896.145970\n1896.145970\n17.622542\n310.554003\n0.929387\n2.462278e+09\n1889.972046\n1902.729980\n1908.694946\n[{'percentile': 90, 'value': 1911.6434326171875}]\n\n\n1.0\n327090\n16\n327106\n1846.941772\n1926.239624\n79.297852\n1896.130754\n1896.130754\n17.641135\n311.209630\n0.930375\n6.202054e+08\n1889.958130\n1902.725830\n1908.695435\n[{'percentile': 90, 'value': 1911.6436767578125}]\n\n\n3.0\n36599\n1\n36600\n1847.095459\n1917.331787\n70.236328\n1896.056648\n1896.056648\n17.732032\n314.424974\n0.935206\n6.939378e+07\n1889.824585\n1902.695557\n1908.697388\n[{'percentile': 90, 'value': 1911.6749267578125}]\n\n\n5.0\n13200\n0\n13200\n1847.404785\n1917.161377\n69.756592\n1896.171552\n1896.171552\n17.628175\n310.752564\n0.929672\n2.502946e+07\n1890.059448\n1902.774170\n1908.708374\n[{'percentile': 90, 'value': 1911.650634765625}]\n\n\n10.0\n3355\n0\n3355\n1847.787354\n1916.982178\n69.194824\n1895.952356\n1895.952356\n17.820593\n317.573521\n0.939928\n6.360920e+06\n1889.712280\n1902.729980\n1908.641113\n[{'percentile': 90, 'value': 1911.5826416015625}]\n\n\n\n\n\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"darkgrid\")\n\n# Example plot: scatter plot of mean vs. resolution\n# Adjust the column names according to your DataFrame structure\nplt.figure(figsize=(10, 6))\nsns.scatterplot(data=mean_univar_df, x='resolution', y='mean')\n\n# Add titles and labels\nplt.title('Mean Value vs. Resolution')\nplt.xlabel('Resolution (m)')\nplt.ylabel('Mean Value')\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nNow let’s reset our computational region to run our analysis.\n\ngs.run_command(\"g.region\", raster=\"points_median\", flags=\"pa\")\n\nprojection: 1 (UTM)\nzone:       13\ndatum:      nad83_2011\nellipsoid:  grs80\nnorth:      3997398\nsouth:      3996851\nwest:       229377\neast:       229975\nnsres:      1\newres:      1\nrows:       547\ncols:       598\ncells:      327106\n\n\n\n\nCreate a Digital Terrian Model (DTM)\nImport lidar data as a vector in GRASS.\n\ngs.run_command('v.in.pdal',\n            input='metadata/points2_clean.laz', \n            output='lidar_points_be',\n            class_filter=2, # Bare earth points\n            flags=\"w\",\n            overwrite=True)\n\nHow many bare earth ppints did we just import?\n\n# Assuming gs.parse_command is already defined and imported\nlidar_be_info = gs.read_command('v.info', map='lidar_points_be', format=\"json\")\nlidar_be_dict = json.loads(lidar_be_info)\nnum_be_points = lidar_be_dict[\"points\"]\nprint(f\"We just imported {num_be_points:,} bare earth points\")\n\nWe just imported 6,631,980 bare earth points\n\n\nWe will now interpolate the lidar points into our digital terrain model (DTM).\n\ngs.run_command(\"v.surf.rst\",\n               input=\"lidar_points_be\",\n               elevation=\"lidar_be\",\n               slope=\"lidar_be_slope\",\n               aspect=\"lidar_be_aspect\",\n               pcurvature=\"lidar_be_pcurvature\",\n               tcurvature=\"lidar_be_tcurvature\",\n               smooth=0.5,\n               tension=40,\n               overwrite=True,\n               nprocs=24\n            )\n\n\n\nVisualize the DTM\n\nInteractive Map (Folium)\n\n# Create the shaded relief map\ngs.run_command(\n    \"r.relief\",\n    input=\"lidar_be\",\n    output=\"hillshade\",\n    zscale=1,\n    overwrite=True,\n)\n\nm = gj.InteractiveMap(width=\"500\", tiles=\"OpenStreetMap\", map_backend=\"folium\")\nm.add_raster(\"hillshade\", opacity=0.75)\nm.add_raster(\"lidar_be\", opacity=0.5)\nm.show()\n\n\n\n\n\n\nInteractive Map (ipyleaflet)\n\nm = gj.InteractiveMap(width=\"500\", map_backend=\"ipyleaflet\")\nm.query_mode = \"true\"\nm.add_raster(\"hillshade\", opacity=0.85)\nm.add_raster(\"points_median\", opacity=0.5)\nm.add_layer_control()\nm.show()\n\n\n\n\n\n\nDTM, Slope, and Aspect Figures\n\nDTM 1m Resolution\n\nm = gj.Map()\nm.d_shade(color=\"lidar_be\", shade=\"hillshade\")\nm.d_legend(raster=\"lidar_be\", at=(5, 9, 50, 90), flags=\"b\", unit=\"m\")\nm.d_barscale(at=(5, 6), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n\n\nAspect\n\ngs.run_command(\"r.colors\", map=\"lidar_be_aspect\", color=\"aspect\")\nm = gj.Map()\nm.d_rast(map=\"lidar_be_aspect\")\nm.d_legend(raster=\"lidar_be_aspect\", at=(5, 9, 50, 90), flags=\"b\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n\nSlope\n\ngs.run_command(\"r.colors\", map=\"lidar_be_slope\", color=\"sepia\", flags=\"e\")\nm = gj.Map()\nm.d_shade(color=\"lidar_be_slope\", shade=\"hillshade\")\nm.d_legend(raster=\"lidar_be_slope\", at=(5, 9, 50, 90), flags=\"bd\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n\n\nCalculate Geomorphons\n\ngs.run_command(\n        \"r.geomorphon\",\n        elevation=\"lidar_be\",\n        forms=\"geomorphon\",\n        search=21,\n        overwrite=True,\n    )\n\nm = gj.Map()\nm.d_shade(color=\"geomorphon\", shade=\"hillshade\")\nm.d_legend(raster=\"geomorphon\", at=(60, 95, 85, 90), flags=\"bd\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n3D Visualization\n\nelevation_3dmap = gj.Map3D()\n# Full list of options m.nviz.image\n# https://grass.osgeo.org/grass84/manuals/m.nviz.image.html\nelevation_3dmap.render(\n    elevation_map=\"lidar_be\",\n    color_map=\"geomorphon\",\n    zexag=1, \n    perspective=20, \n    height=4000, \n    resolution_fine=1,\n    fringe=['nw','ne','sw','se'],\n    fringe_elevation=1000,\n    arrow_position=[100,50],\n)\nelevation_3dmap.show()\n\n\n\n\n\n\n\n\n\n\n\nStream Extraction\n\ngs.run_command(\"r.stream.extract\", elevation=\"lidar_be\", threshold=500,\n                mexp=0.5, stream_length=500, memory=100000, stream_raster=\"stream_r\",\n                direction=\"direction_r\", stream_vector=\"stream_vect\")\n\nLet’s view the stream network on the map.\n\nm = gj.InteractiveMap(width=\"500\", map_backend=\"folium\")\nm.query_mode = \"true\"\nm.add_raster(\"hillshade\", opacity=0.85)\nm.add_raster(\"points_median\", opacity=0.5)\nm.add_vector(\"stream_vect\", color=\"blue\", weight=3, type=\"line\")\nm.add_layer_control()\nm.show()\n\n\n\n\n\n\nOverland Flow Simulation\n\ngs.run_command(\n    \"r.slope.aspect\",\n    elevation=\"lidar_be\",\n    dx=\"dx\",\n    dy=\"dy\",\n    nprocs=4,\n    overwrite=True,\n)\n\nOUTPUT_STEP = 2\n\n# Run the simulation\ngs.run_command(\n        \"r.sim.water\",\n        elevation=\"lidar_be\",\n        dx=\"dx\",\n        dy=\"dy\",\n        rain_value=50,  # mm/hr\n        infil_value=0.0,  # mm/hr\n        man_value=0.1,\n        niterations=10,  # event duration (minutes)\n        output_step=OUTPUT_STEP,  # minutes\n        depth=\"depth\",  # m\n        discharge=\"disch\",  # m3/s\n        random_seed=3,\n        nprocs=4,\n        flags=\"t\",\n        overwrite=True,\n    )\n\n# Register the output maps into a space time dataset\ngs.run_command(\n    \"t.create\",\n    output=\"depth_sum\",\n    type=\"strds\",\n    temporaltype=\"absolute\",\n    title=\"Runoff Depth\",\n    description=\"Runoff Depth in [m]\",\n    overwrite=True,\n)\n\n# Get the list of naip maps (bands)\ndepth_list = gs.read_command(\n    \"g.list\", type=\"raster\", pattern=\"depth.*\", separator=\"comma\"\n).strip()\n\n# Register the maps\ngs.run_command(\n    \"t.register\",\n    input=\"depth_sum\",\n    type=\"raster\",\n    start=\"2024-01-01\",\n    increment=f\"{OUTPUT_STEP} minutes\",\n    maps=depth_list,\n    flags=\"i\",\n    overwrite=True,\n)\n\nVisualize the results of the overland flow simulation.\n\nm = gj.Map()\nm.d_shade(color=\"depth.10\", shade=\"hillshade\")\nm.d_legend(raster=\"depth.10\", at=(5, 9, 50, 90), flags=\"bd\", unit=\"m\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\nCreate Animation from Time Series Data\n\ndepth_sum_ts_map = gj.TimeSeriesMap(height=600, width=600, use_region=True)\ndepth_sum_ts_map.add_raster_series(\"depth_sum\")\ndepth_sum_ts_map.d_legend()\ndepth_sum_ts_map.render()\ndepth_sum_ts_map.save(f\"outputs/depth.gif\")\ndepth_sum_ts_map.show()\n\n\n\n\n\n\nExport GIF\n\n\n\nAnimation\n\n\n\n\nSelect a sample point for analysis\n\nm = gj.InteractiveMap(width=500, map_backend=\"ipyleaflet\")\nm.query_mode = \"true\"\nm.add_raster(\"hillshade\", opacity=0.85)\nm.add_raster(\"depth.08\", opacity=0.5)\nm.add_raster(\"depth.10\", opacity=0.5)\nm.add_layer_control()\nm.show()\n\n\n\n\nUsing our sample point, we can extract the time series data for the point.\n\ngs.parse_command('v.what.strds', input='sample', strds='depth_sum', output=\"depth_sum_sample\")\nsample_json = gs.parse_command('v.db.select', map=\"depth_sum_sample\", format=\"json\")\n\nNow we can visualize the time series data for our sample point.\n\n# This is ugly and need to be improved\nrecords = sample_json['records'][0]\ndel records['cat']\nsample_df = pd.DataFrame([records])\ntransposed = sample_df.T\ntransposed.columns = ['depth']\nsequence = [2, 4, 6, 8, 10]\ntransposed['time'] = sequence\ntransposed.set_index('time', inplace=True)\ntransposed.head()\n\n\n\n\n\n\n\n\ndepth\n\n\ntime\n\n\n\n\n\n2\n0.023435\n\n\n4\n0.027074\n\n\n6\n0.029835\n\n\n8\n0.049045\n\n\n10\n0.317990\n\n\n\n\n\n\n\n\n\nCreate a Time Series Line Plot\n\n# Create a seaborn line plot\nimport matplotlib.pyplot as plt\ntransposed.dropna(inplace=True)\n\nplt.figure(figsize=(10, 6))\ntransposed.plot(kind='line', y='depth', color='blue', marker='o', linestyle='-', linewidth=2)\n\n# Add titles and labels\nplt.title('Sample Depth vs. Time')\nplt.xlabel('Time (minutes)')\nplt.ylabel('Depth (m)')\n\n\n# Save the plot as an image file\nplt.savefig('outputs/line_plot.png')\n\n# Show the plot\nplt.show()\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\nAdd the sample point to the map\n\ndepth_json = gs.parse_command(\"t.rast.list\", input=\"depth_sum\", format=\"json\")\n\nfor i in depth_json['data']:\n    map_name = i['name']\n    file_name = f\"outputs/depth_{map_name.split('.')[-1]}.png\"\n    print(f\"Creating {file_name}\")\n    i['thumbnail'] = file_name\n    depth_map = gj.Map(filename=file_name, use_region=True)\n    depth_map.d_shade(color=map_name, shade=\"hillshade\")\n    depth_map.d_vect(map=\"depth_sum_sample\", color=\"red\", fill_color=\"red\", type=\"point\", size=12, icon=\"basic/point\")\n    depth_map.d_legend(raster=map_name, at=(5, 9, 50, 90), flags=\"bd\", unit=\"m\")\n    depth_map.d_barscale(at=(5, 7), flags=\"n\")\n    depth_map.show()\n\nCreating outputs/depth_02.png\nCreating outputs/depth_04.png\nCreating outputs/depth_06.png\nCreating outputs/depth_08.png\nCreating outputs/depth_10.png\n\n\n\n\nFinal figure\nCreate our final figure\n\nfrom PIL import Image\n\nfig = plt.figure(figsize=(25, 30))\nax = fig.add_subplot(2, 2, 1)\nax.set_axis_off()\n\nfig.subplots_adjust(hspace=0, wspace=0.1)\n\nimg = Image.open(depth_map.filename) \nplt.imshow(img)\nax.set_title(\"Sampe Point - 10 mintues\", {\"fontsize\": 24, \"fontweight\": \"bold\"})\n\nax = fig.add_subplot(2, 2, 2)\nax.set_axis_off()\nimg = Image.open(\"outputs/line_plot.png\")\nplt.imshow(img)\n\nplt.tight_layout()\nplt.savefig(\"outputs/figure.png\", bbox_inches=\"tight\", dpi=300)\n\nplt.show()"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#stac-integration",
    "href": "content/notebooks/us_doi/grass_jupyter.html#stac-integration",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "STAC Integration",
    "text": "STAC Integration\n\nNAIP Data\n\n!t.stac.item url=\"https://planetarycomputer.microsoft.com/api/stac/v1\" collection=\"naip\" datetime=\"2022\" format=\"plain\" method=\"nearest\" extent=region nprocs=2 -d\n\nSetting bbox to current region:\nBBOX: [-108.00541249, 36.07862566, -107.9985924, 36.08371681]\n/home/coreywhite/Documents/GitHub/ncsu-geoforall-lab/tutorials/venv/lib/python3.10/site-packages/pystac_client/item_search.py:678: UserWarning: numberMatched or context.matched not in response\n  warnings.warn(\"numberMatched or context.matched not in response\")\nSearch Matched: None items\n2 Assets Ready for download...\nDownloading assets:   0%|                                 | 0/2 [00:00&lt;?, ?it/s]Downloading Asset: {'href':\n'https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36108/m_3610864_ne_12_060_20220525.tif',\n'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n'title': 'RGBIR COG tile', 'eo:bands': [{'name': 'Red', 'common_name':\n'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue',\n'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir',\n'description': 'near-infrared'}], 'roles': ['data'], 'collection_id':\n'naip', 'item_id': 'nm_m_3610864_ne_12_060_20220525', 'file_name':\n'naip.nm_m_3610864_ne_12_060_20220525.image', 'datetime':\n'2022-05-25T16:00:00Z'}\nDownloading Asset: {'href':\n'https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36107/m_3610757_nw_13_060_20220525.tif',\n'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n'title': 'RGBIR COG tile', 'eo:bands': [{'name': 'Red', 'common_name':\n'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue',\n'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir',\n'description': 'near-infrared'}], 'roles': ['data'], 'collection_id':\n'naip', 'item_id': 'nm_m_3610757_nw_13_060_20220525', 'file_name':\n'naip.nm_m_3610757_nw_13_060_20220525.image', 'datetime':\n'2022-05-25T16:00:00Z'}\nImport Url:\n/vsicurl/https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36108/m_3610864_ne_12_060_20220525.tif\nImport Url:\n/vsicurl/https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36107/m_3610757_nw_13_060_20220525.tif\nImporting: naip.nm_m_3610864_ne_12_060_20220525.image\nImporting: naip.nm_m_3610757_nw_13_060_20220525.image\nDownloading assets: 100%|█████████████████████████| 2/2 [00:25&lt;00:00, 12.90s/it]\n\n\nWe can view raw data with GRASS using the d_rgb tool.\n\nm = gj.Map()\nm.d_rgb(red=\"naip.nm_m_3610757_nw_13_060_20220525.image.1\",\n        blue=\"naip.nm_m_3610757_nw_13_060_20220525.image.3\",\n        green=\"naip.nm_m_3610757_nw_13_060_20220525.image.2\")\nm.d_rgb(red=\"naip.nm_m_3610864_ne_12_060_20220525.image.1\",\n        blue=\"naip.nm_m_3610864_ne_12_060_20220525.image.3\",\n        green=\"naip.nm_m_3610864_ne_12_060_20220525.image.2\")\nm.d_vect(map=\"stream_vect\", color=\"blue\", type=\"line\")\n\nm.show()\n\n\n\n\n\n\n\n\n\n\nMosaic and Compiste\nLet create a mosaic of the NAIP data, and give the bands some names.\n\ndef patch_and_composite_naip(year=2022):\n    gs.run_command(\"g.region\", res=1)\n    naip_bands = [(1, \"red\"), (2, \"green\"), (3, \"blue\"), (4, \"nir\")]\n    for band in naip_bands:\n        i, band_name = band\n        # Get the list of depth maps\n        image_list = gs.read_command(\n            \"g.list\", type=\"raster\", pattern=f\"*.image.{i}\", separator=\"comma\"\n        ).strip()\n\n        gs.run_command(\n            \"r.patch\",\n            input=image_list,\n            output=f\"naip_{year}.{band_name}\",\n            nprocs=4,\n            memory=2100,\n            overwrite=True,\n        )\n\n    gs.run_command(\n        \"r.composite\",\n        red=f\"naip_{year}.red\",\n        green=f\"naip_{year}.green\",\n        blue=f\"naip_{year}.blue\",\n        output=f\"naip_{year}_rgb\",\n        overwrite=True,\n    )\n\npatch_and_composite_naip()\n\nNow we can view the naip compsite.\n\nimage_map = gj.Map(filename=\"outputs/naip_2022_rgb.png\", use_region=True)\nimage_map.d_shade(color=\"naip_2022_rgb\", shade=\"hillshade\")\nimage_map.d_grid(siz=100, color=\"black\", flags=\"a\")\nimage_map.d_vect(map=\"depth_sum_sample\", color=\"red\", fill_color=\"red\", type=\"point\", size=12, icon=\"basic/point\")\nimage_map.d_barscale(at=(5, 7), flags=\"n\")\nimage_map.show()\n\n\n\n\n\n\n\n\n\n\nNDVI\nWe can use the NAIP data to calculate NDVI.\n\ngs.run_command(\"i.vi\", red=\"naip_2022.red\", nir=\"naip_2022.nir\", output=\"ndvi\", overwrite=True)\nndvi_map = gj.Map(filename=\"outputs/ndvi.png\", height=600, width=600)\nndvi_map.d_shade(color=\"ndvi\", shade=\"hillshade\")\nndvi_map.d_grid(siz=100, color=\"grey\", flags=\"a\")\nndvi_map.d_legend(raster=\"ndvi\", at=(10, 12, 50, 90), flags=\"bd\")\nndvi_map.d_barscale(at=(5, 11), flags=\"n\")\nndvi_map.show()\n\n\n\n\n\n\n\n\nLet’s create our final figure.\n\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom PIL import Image\n\n# Create a figure\nfig = plt.figure(figsize=(15, 10))\nfig.suptitle('Chaco Canyon 2016 - Overland Flow Simulation', fontsize=24, fontweight='bold')\n# Create a GridSpec with 2 rows and 6 columns, making the bottom row larger\ngrid = gridspec.GridSpec(2, 6, height_ratios=[2, 1])\n\n# Add an image to the left of the plot on the top row\nax_left = fig.add_subplot(grid[0, 1:3])\nax_left.set_title('NAIP 2022', {\"fontsize\": 18, \"fontweight\": \"bold\"})\nimg_left = Image.open(image_map.filename)\nax_left.imshow(img_left)\nax_left.axis(\"off\")\n\n# Add a larger line graph on the top row spanning the remaining columns\nax_large = fig.add_subplot(grid[0, 3:])\nimg_large = Image.open(\"outputs/line_plot.png\")\nax_large.imshow(img_large)\n# ax_large.set_title('Depth vs. Time', {\"fontsize\": 18, \"fontweight\": \"bold\"})\nax_large.axis(\"off\")\n\nax = fig.add_subplot(grid[1, 3:4])\nax.set_title(f\"Depth Maps\", {\"fontsize\": 16, \"fontweight\": \"bold\"})\nax.axis(\"off\")\n# Add 5 subplots on the bottom row\nfor idx, item in enumerate(depth_json['data']):\n    ax = fig.add_subplot(grid[1, idx+1])\n    map_name = item['name']\n    time_stamp = map_name.split('.')[-1]\n    img = Image.open(item['thumbnail'])  # Open the image file\n    ax.imshow(img)\n    ax.set_title(f\"{time_stamp} minutes\", {\"fontsize\": 16, \"fontweight\": \"bold\"})\n    ax.axis(\"off\")\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#funding",
    "href": "content/notebooks/us_doi/grass_jupyter.html#funding",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Funding",
    "text": "Funding\n\nPathways to Enable Open-Source Ecosystems (POSE) Phase II\nNSF Award # 2303651"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/process_chains.html",
    "href": "content/workshops/foss4gna_2024/process_chains.html",
    "title": "Part 3. Actinia Process Chians",
    "section": "",
    "text": "import os\nimport subprocess\nfrom pprint import pprint\nimport sys\nimport json\nimport time\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\n\n\nACTINIA_USER = 'actinia-gdi'\nACTINIA_PASSWORD = 'actinia-gdi'\nAUTH = 'actinia-gdi:actinia-gdi'\nACTINIA_VERSION = 'v3'\nACTINIA_BASEURL = 'http://localhost:8088'\n# ACTINIA_BASEURL = 'https://openplains.app/actinia'\nACTINIA_URL = ACTINIA_BASEURL + \"/api/\" + ACTINIA_VERSION\nACTINIA_AUTH = HTTPBasicAuth(ACTINIA_USER, ACTINIA_PASSWORD)\n\n\n\n\n\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n# create a temporary folder where to place our GRASS project\nimport tempfile\nfrom pathlib import Path\n\ntempdir = tempfile.TemporaryDirectory()\n\nimport grass.script as gs\nimport grass.jupyter as gj\n\ngs.create_project(path=tempdir.name, name=\"foss4g2024_p2\", epsg=\"2817\", overwrite=True)\nsession = gj.init(Path(tempdir.name,\"foss4g2024_p2\"))\n\n\ndef print_as_json(data):\n    print(json.dumps(data, indent=2))"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/process_chains.html#setup-environment",
    "href": "content/workshops/foss4gna_2024/process_chains.html#setup-environment",
    "title": "Part 3. Actinia Process Chians",
    "section": "",
    "text": "import os\nimport subprocess\nfrom pprint import pprint\nimport sys\nimport json\nimport time\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\n\n\n\nACTINIA_USER = 'actinia-gdi'\nACTINIA_PASSWORD = 'actinia-gdi'\nAUTH = 'actinia-gdi:actinia-gdi'\nACTINIA_VERSION = 'v3'\nACTINIA_BASEURL = 'http://localhost:8088'\n# ACTINIA_BASEURL = 'https://openplains.app/actinia'\nACTINIA_URL = ACTINIA_BASEURL + \"/api/\" + ACTINIA_VERSION\nACTINIA_AUTH = HTTPBasicAuth(ACTINIA_USER, ACTINIA_PASSWORD)\n\n\n\n\n\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n# create a temporary folder where to place our GRASS project\nimport tempfile\nfrom pathlib import Path\n\ntempdir = tempfile.TemporaryDirectory()\n\nimport grass.script as gs\nimport grass.jupyter as gj\n\ngs.create_project(path=tempdir.name, name=\"foss4g2024_p2\", epsg=\"2817\", overwrite=True)\nsession = gj.init(Path(tempdir.name,\"foss4g2024_p2\"))\n\n\ndef print_as_json(data):\n    print(json.dumps(data, indent=2))"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/process_chains.html#basic-user-limits",
    "href": "content/workshops/foss4gna_2024/process_chains.html#basic-user-limits",
    "title": "Part 3. Actinia Process Chians",
    "section": "Basic User Limits",
    "text": "Basic User Limits\nLIMITS - max_cell_limit = 2000000 - process_time_limt = 60 - process_num_limit = 20 - number_of_workers = 3"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/process_chains.html#output-formats",
    "href": "content/workshops/foss4gna_2024/process_chains.html#output-formats",
    "title": "Part 3. Actinia Process Chians",
    "section": "Output formats",
    "text": "Output formats\n\nkv: parses the module output and creates key/value pairs\nlist: parses the module output and creates a list of values\ntable: parses the module output and creates a list of lists with values aka 2D array aka table"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/process_chains.html#lets-generate-a-process-chain",
    "href": "content/workshops/foss4gna_2024/process_chains.html#lets-generate-a-process-chain",
    "title": "Part 3. Actinia Process Chians",
    "section": "Let’s generate a process chain",
    "text": "Let’s generate a process chain\n\npc = {\n    \"list\": [],\n    \"version\": 1\n}\n\nFrom actinia\n {\n   \"list\": [\n     {\n       \"module\": \"g.region\",\n       \"id\": \"g_region_1\",\n       \"inputs\": [\n         {\n           \"import_descr\": {\n             \"source\": \"https://storage.googleapis.com/graas-geodata/elev_ned_30m.tif\",\n             \"type\": \"raster\"\n           },\n           \"param\": \"raster\",\n           \"value\": \"elev_ned_30m_new\"\n         }\n       ],\n       \"flags\": \"p\"\n     },\n     {\n       \"module\": \"r.slope.aspect\",\n       \"id\": \"r_slope_aspect_1\",\n       \"inputs\": [\n         {\n           \"param\": \"elevation\",\n           \"value\": \"elev_ned_30m_new\"\n         }\n       ],\n       \"outputs\": [\n         {\n           \"export\": {\n             \"format\": \"GTiff\",\n             \"type\": \"raster\"\n           },\n           \"param\": \"slope\",\n           \"value\": \"elev_ned_30m_new_slope\"\n         }\n       ],\n       \"flags\": \"a\"\n     }\n   ],\n   \"version\": \"1\"\n }\n\n!g.region raster=elevation res=30 --json\n\n{\n  \"module\": \"g.region\",\n  \"id\": \"g.region_1804289383\",\n  \"inputs\":[\n     {\"param\": \"raster\", \"value\": \"elevation\"},\n     {\"param\": \"res\", \"value\": \"30\"},\n     {\"param\": \"format\", \"value\": \"plain\"}\n   ]}\n\n\n\ngs.make_command(\"general\", \"region\", raster=\"elevation\", res=30)\n\n['general', '-region', 'raster=elevation', 'res=30', 'json=True']\n\n\n\nstep_1_raw = !g.region raster=elevation res=30 --json\nstep_1 = ''.join(step_1_raw)\nstep_1_json = json.loads(step_1)\npprint(step_1_json)\n\n{'id': 'g.region_1804289383',\n 'inputs': [{'param': 'raster', 'value': 'elevation'},\n            {'param': 'res', 'value': '30'},\n            {'param': 'format', 'value': 'plain'}],\n 'module': 'g.region'}\n\n\n\nstep_2_raw = !r.univar map=elevation format=\"json\" --json\nstep_2 = ''.join(step_2_raw)\nstep_2_json = json.loads(step_2)\npprint(step_2_json)\n\n{'id': 'r.univar_1804289383',\n 'inputs': [{'param': 'map', 'value': 'elevation'},\n            {'param': 'percentile', 'value': '90'},\n            {'param': 'nprocs', 'value': '1'},\n            {'param': 'separator', 'value': 'pipe'},\n            {'param': 'format', 'value': 'json'}],\n 'module': 'r.univar'}\n\n\n\npc[\"list\"].append(step_1_json)\npc[\"list\"].append(step_2_json)\n\npprint(pc)\n\n{'list': [{'id': 'g.region_1804289383',\n           'inputs': [{'param': 'raster', 'value': 'elevation'},\n                      {'param': 'res', 'value': '30'},\n                      {'param': 'format', 'value': 'plain'}],\n           'module': 'g.region'},\n          {'id': 'r.univar_1804289383',\n           'inputs': [{'param': 'map', 'value': 'elevation'},\n                      {'param': 'percentile', 'value': '90'},\n                      {'param': 'nprocs', 'value': '1'},\n                      {'param': 'separator', 'value': 'pipe'},\n                      {'param': 'format', 'value': 'json'}],\n           'module': 'r.univar'}],\n 'version': 1}"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/process_chains.html#python-client",
    "href": "content/workshops/foss4gna_2024/process_chains.html#python-client",
    "title": "Part 3. Actinia Process Chians",
    "section": "Python Client",
    "text": "Python Client\nInstall\n\n!pip install actinia-python-client\n!pip install git+https://github.com/openplainsinc/actinia_openapi_python_client.git@v0.0.4\n\n\nimport actinia_openapi_python_client.api_client\nfrom actinia_openapi_python_client.rest import ApiException\nfrom pprint import pprint\n\n# Defining the host is optional and defaults to http://localhost\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = actinia_openapi_python_client.Configuration(\n    host = \"http://localhost:8088\"\n)\n\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure HTTP basic authorization: basicAuth\nconfiguration = actinia_openapi_python_client.Configuration(\n    username = ACTINIA_USER,\n    password = ACTINIA_PASSWORD\n)\n\n\n# Enter a context with an instance of the API client\nwith actinia_openapi_python_client.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = actinia_openapi_python_client.APILogApi(api_client)\n    user_id = ACTINIA_USER # str | The unique user name/id\n\n    try:\n        # Get a list of all API calls that have been called by the provided user.\n        api_response = api_instance.api_log_user_id_get(user_id)\n        print(\"The response of APILogApi-&gt;api_log_user_id_get:\\n\")\n        pprint(api_response)\n    except ApiException as e:\n        print(\"Exception when calling APILogApi-&gt;api_log_user_id_get: %s\\n\" % e)\n\n\nfrom actinia import Actinia\n\nactinia_dev = Actinia(\"http://localhost:8088\", \"v3\")\nactinia_dev.get_version()\nactinia_dev.set_authentication(ACTINIA_USER, ACTINIA_PASSWORD)\n\n\nmapset_id = 'foss4g'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}\"\n\n\n\nresponse = requests.post( url, auth=ACTINIA_AUTH)\nresponse.json()\n# pprint(response.json().get('process_results'))\n\n{'accept_datetime': '2024-09-09 20:12:58.748446',\n 'accept_timestamp': 1725912778.7484446,\n 'api_info': {'endpoint': 'mapsetmanagementresourceadmin',\n  'method': 'POST',\n  'path': '/api/v3/locations/nc_spm_08_grass7/mapsets/foss4g',\n  'request_url': 'http://localhost:8088/api/v3/locations/nc_spm_08_grass7/mapsets/foss4g'},\n 'datetime': '2024-09-09 20:12:59.008643',\n 'http_code': 200,\n 'message': 'Mapset &lt;foss4g&gt; successfully created.',\n 'process_chain_list': [{'1': {'flags': 'l', 'module': 'g.mapsets'}}],\n 'process_log': [{'executable': 'g.mapsets',\n   'id': '1',\n   'parameter': ['-l'],\n   'return_code': 0,\n   'run_time': 0.05109238624572754,\n   'stderr': ['Available mapsets:', ''],\n   'stdout': 'PERMANENT\\n'}],\n 'process_results': {},\n 'progress': {'num_of_steps': 1, 'step': 1},\n 'queue': 'local',\n 'resource_id': 'resource_id-08ec48d8-d82e-436c-b8d0-2cc445ef36a4',\n 'status': 'finished',\n 'time_delta': 0.26021814346313477,\n 'timestamp': 1725912779.008638,\n 'urls': {'resources': [],\n  'status': 'https://localhost:8088/api/v3/resources/actinia-gdi/resource_id-08ec48d8-d82e-436c-b8d0-2cc445ef36a4'},\n 'user_id': 'actinia-gdi'}\n\n\n\npc = {\n    \"list\": [\n        {\n             \"id\": \"computational_region\",\n             \"module\": \"g.region\",\n             \"inputs\": [\n                 {\"param\": \"raster\",\n                  \"value\": \"elevation@PERMANENT\"},\n                 {\"param\": \"res\",\n                  \"value\": \"10\"}\n             ],\n             \"stdout\": {\"id\": \"region\", \"format\": \"kv\", \"delimiter\": \"=\"},\n             \"flags\": \"g\"\n         },\n        {\n          \"id\": \"create_hillshading\",\n          \"module\": \"r.relief\",\n          \"inputs\": [\n              {\n                  \"param\": \"input\",\n                  \"value\": \"elevation\"\n              }\n          ],\n          \"outputs\": [\n              {\n                  \"param\": \"output\",\n                  \"value\": \"hillshade\"\n              }\n          ]\n      },\n      {\n          \"id\": \"exporter_1\",\n          \"module\": \"exporter\",\n          \"outputs\": [\n              {\n                  \"export\": {\"type\": \"raster\", \"format\": \"COG\"},\n                  \"param\": \"map\",\n                  \"value\": \"hillshade\"\n              }\n          ]\n      }\n    ],\n    \"version\": \"1\"\n}\n\n\nmapset_id = 'foss4g'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/processing_async_export\"\n\nresponse = requests.post(url, auth=ACTINIA_AUTH, json=pc)\nresponse\npprint(response.json())\nRESPONSE_ID = response.json()['urls']['status']\n\nprint(\"-\" * 80)\nprint(RESPONSE_ID)\n\n{'accept_datetime': '2024-09-09 20:20:05.779403',\n 'accept_timestamp': 1725913205.7794013,\n 'api_info': {'endpoint': 'asyncephemeralexportresource',\n              'method': 'POST',\n              'path': '/api/v3/locations/nc_spm_08_grass7/processing_async_export',\n              'request_url': 'http://localhost:8088/api/v3/locations/nc_spm_08_grass7/processing_async_export'},\n 'datetime': '2024-09-09 20:20:05.782840',\n 'http_code': 200,\n 'message': 'Resource accepted',\n 'process_chain_list': [],\n 'process_results': {},\n 'queue': 'local',\n 'resource_id': 'resource_id-5ceb3125-4ee8-45b5-a13d-8f3b9ba167f3',\n 'status': 'accepted',\n 'time_delta': 0.0034470558166503906,\n 'timestamp': 1725913205.7828374,\n 'urls': {'resources': [],\n          'status': 'https://localhost:8088/api/v3/resources/actinia-gdi/resource_id-5ceb3125-4ee8-45b5-a13d-8f3b9ba167f3'},\n 'user_id': 'actinia-gdi'}\n--------------------------------------------------------------------------------\nhttps://localhost:8088/api/v3/resources/actinia-gdi/resource_id-5ceb3125-4ee8-45b5-a13d-8f3b9ba167f3\n\n\n\nresponse = requests.get(RESPONSE_ID, auth=ACTINIA_AUTH)\n\npprint(response.json())"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html",
    "title": "Part 2. Introduction to Actinia",
    "section": "",
    "text": "!figlet \"actinia 101\"\n\n            _   _       _         _  ___  _ \n  __ _  ___| |_(_)_ __ (_) __ _  / |/ _ \\/ |\n / _` |/ __| __| | '_ \\| |/ _` | | | | | | |\n| (_| | (__| |_| | | | | | (_| | | | |_| | |\n \\__,_|\\___|\\__|_|_| |_|_|\\__,_| |_|\\___/|_|"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#a-rest-api-for-grass-gis",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#a-rest-api-for-grass-gis",
    "title": "Part 2. Introduction to Actinia",
    "section": "A REST API for GRASS GIS",
    "text": "A REST API for GRASS GIS\n\nGRASS GIS is a Geospatial Processing Engine\nOpen Source (GPL v2)\nDeveloped by International and Multi-institutional groups and individuals (GRASS Development Team)\nMember of the Open Source Geospatial Foundatispace\nRecieved Open Source Security Foundation (OpenSSF) Best Practices Badge - 2024\n\n\n\n\n\n\nflowchart LR\n  A[Client] --&gt;|Http Request| B[Actinia REST API]\n  B &lt;--&gt; D[GRASS GIS Processing Node]\n  B --&gt;|Http Response| A"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#import-python-libraries",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#import-python-libraries",
    "title": "Part 2. Introduction to Actinia",
    "section": "Import Python Libraries",
    "text": "Import Python Libraries\n\nimport os\nimport subprocess\nfrom pprint import pprint\nimport sys\nimport json\nimport time\n\nimport requests\nfrom requests.auth import HTTPBasicAuth"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#setup-environment",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#setup-environment",
    "title": "Part 2. Introduction to Actinia",
    "section": "Setup Environment",
    "text": "Setup Environment\nDeploy Docker container with Actinia\nFollow Instructions at : https://github.com/OpenPlainsInc/foss4gna-2024-workshop\n\nSetup Variables\n\nACTINIA_USER = 'actinia-gdi'\nACTINIA_PASSWORD = 'actinia-gdi'\nAUTH = 'actinia-gdi:actinia-gdi'\nACTINIA_URL = 'http://localhost:8088'\n# ACTINIA_URL = 'https://openplains.app/actinia'\nACTINIA_VERSION = 'v3'\nACTINIA_BASEURL = 'http://localhost:8088'\n# ACTINIA_BASEURL = 'https://openplains.app/actinia'\nACTINIA_URL = ACTINIA_BASEURL + \"/api/\" + ACTINIA_VERSION\nACTINIA_AUTH = HTTPBasicAuth(ACTINIA_USER, ACTINIA_PASSWORD)\n\n\ndef print_as_json(data):\n    print(json.dumps(data, indent=2))"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#actinia-rest-api",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#actinia-rest-api",
    "title": "Part 2. Introduction to Actinia",
    "section": "actinia REST API",
    "text": "actinia REST API\nactinia Docker Image\n\nTools\n\nactinia-python-client\nactinia_openapi_python_client"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#acinia-basics",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#acinia-basics",
    "title": "Part 2. Introduction to Actinia",
    "section": "Acinia Basics",
    "text": "Acinia Basics\n\nurl = f\"{ACTINIA_URL}/version\"\nresponse = requests.get( url)\n# pprint(response.json())\nprint_as_json(response.json().get('version'))\n\n\"4.14.1\""
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#user-roles",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#user-roles",
    "title": "Part 2. Introduction to Actinia",
    "section": "User Roles",
    "text": "User Roles\n\nSuperadmin\n\nCreate, modify and delete users\nRead/write access to all databases\nCan access all API calls\n\nAdmin\n\nAll API Calls\nCreate, modify and delete users with the maximum user-role user of the same user grou\nAccess to persistent databases that were granted by a superadmin\n\nUser\n\nCan run computational tasks in ephemeral and user specific databases\nCreate, modify and delete locations in a user specific database\nCreate, modify and delete mapsets in user specific databases\nLimited access to API calls\nHas limited access to persistent databases\n\nGuest\n\nHas very limited access to API calls\nLimited access to persistent databases\n\n\n\n\nhttps://actinia-org.github.io/actinia-core/actinia_concepts/\n\nGRASS Projects\nLet’s start by requesting a list of GRASS projects from actinia.\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations\"]\n\n\n\n\n\n\n\nurl = f\"{ACTINIA_URL}/locations\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('locations'))\n\n['foss4g2024', 'nc_spm_08_grass7', 'nc_spm_08']\n\n\nNow we will get extra information about a specific project.\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- C[\"{location_id}\"]\n  C --- D[\"/info\"]\n\n\n\n\n\n\n\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/info\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n\n{'projection': 'PROJCRS[\"NAD83(HARN) / North '\n               'Carolina\",BASEGEOGCRS[\"NAD83(HARN)\",DATUM[\"NAD83 (High '\n               'Accuracy Reference Network)\",ELLIPSOID[\"GRS '\n               '1980\",6378137,298.257222101,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4152]],CONVERSION[\"SPCS83 '\n               'North Carolina zone (meter)\",METHOD[\"Lambert Conic Conformal '\n               '(2SP)\",ID[\"EPSG\",9802]],PARAMETER[\"Latitude of false '\n               'origin\",33.75,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8821]],PARAMETER[\"Longitude '\n               'of false '\n               'origin\",-79,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8822]],PARAMETER[\"Latitude '\n               'of 1st standard '\n               'parallel\",36.1666666666667,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8823]],PARAMETER[\"Latitude '\n               'of 2nd standard '\n               'parallel\",34.3333333333333,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8824]],PARAMETER[\"Easting '\n               'at false '\n               'origin\",609601.22,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8826]],PARAMETER[\"Northing '\n               'at false '\n               'origin\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8827]]],CS[Cartesian,2],AXIS[\"easting '\n               '(X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing '\n               '(Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Engineering '\n               'survey, topographic mapping.\"],AREA[\"United States (USA) - '\n               'North Carolina - counties of Alamance; Alexander; Alleghany; '\n               'Anson; Ashe; Avery; Beaufort; Bertie; Bladen; Brunswick; '\n               'Buncombe; Burke; Cabarrus; Caldwell; Camden; Carteret; '\n               'Caswell; Catawba; Chatham; Cherokee; Chowan; Clay; Cleveland; '\n               'Columbus; Craven; Cumberland; Currituck; Dare; Davidson; '\n               'Davie; Duplin; Durham; Edgecombe; Forsyth; Franklin; Gaston; '\n               'Gates; Graham; Granville; Greene; Guilford; Halifax; Harnett; '\n               'Haywood; Henderson; Hertford; Hoke; Hyde; Iredell; Jackson; '\n               'Johnston; Jones; Lee; Lenoir; Lincoln; Macon; Madison; Martin; '\n               'McDowell; Mecklenburg; Mitchell; Montgomery; Moore; Nash; New '\n               'Hanover; Northampton; Onslow; Orange; Pamlico; Pasquotank; '\n               'Pender; Perquimans; Person; Pitt; Polk; Randolph; Richmond; '\n               'Robeson; Rockingham; Rowan; Rutherford; Sampson; Scotland; '\n               'Stanly; Stokes; Surry; Swain; Transylvania; Tyrrell; Union; '\n               'Vance; Wake; Warren; Washington; Watauga; Wayne; Wilkes; '\n               'Wilson; Yadkin; '\n               'Yancey.\"],BBOX[33.83,-84.33,36.59,-75.38]],ID[\"EPSG\",3358]]\\n',\n 'region': {'b': 0.0,\n            'cells': 29535,\n            'cells3': 29535,\n            'cols': 179,\n            'cols3': 179,\n            'depths': 1,\n            'e': 639530.0,\n            'ewres': 10.0,\n            'ewres3': 10.0,\n            'n': 221230.0,\n            'nsres': 10.0,\n            'nsres3': 10.0,\n            'projection': 99,\n            'rows': 165,\n            'rows3': 165,\n            's': 219580.0,\n            't': 1.0,\n            'tbres': 1.0,\n            'w': 637740.0,\n            'zone': 0}}\n\n\n\n\nMapsets\nWe will now get a list of mapsets for a specific project.\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets\"]\n\n\n\n\n\n\n\n# mapset = 'nc_spm_08'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n\n['PERMANENT']\n\n\nNow let’s get extra information about a specific mapset PERMANENT.\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/info\"]\n\n\n\n\n\n\n\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/info\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n\n{'projection': 'PROJCRS[\"NAD83(HARN) / North '\n               'Carolina\",BASEGEOGCRS[\"NAD83(HARN)\",DATUM[\"NAD83 (High '\n               'Accuracy Reference Network)\",ELLIPSOID[\"GRS '\n               '1980\",6378137,298.257222101,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4152]],CONVERSION[\"SPCS83 '\n               'North Carolina zone (meter)\",METHOD[\"Lambert Conic Conformal '\n               '(2SP)\",ID[\"EPSG\",9802]],PARAMETER[\"Latitude of false '\n               'origin\",33.75,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8821]],PARAMETER[\"Longitude '\n               'of false '\n               'origin\",-79,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8822]],PARAMETER[\"Latitude '\n               'of 1st standard '\n               'parallel\",36.1666666666667,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8823]],PARAMETER[\"Latitude '\n               'of 2nd standard '\n               'parallel\",34.3333333333333,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8824]],PARAMETER[\"Easting '\n               'at false '\n               'origin\",609601.22,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8826]],PARAMETER[\"Northing '\n               'at false '\n               'origin\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8827]]],CS[Cartesian,2],AXIS[\"easting '\n               '(X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing '\n               '(Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Engineering '\n               'survey, topographic mapping.\"],AREA[\"United States (USA) - '\n               'North Carolina - counties of Alamance; Alexander; Alleghany; '\n               'Anson; Ashe; Avery; Beaufort; Bertie; Bladen; Brunswick; '\n               'Buncombe; Burke; Cabarrus; Caldwell; Camden; Carteret; '\n               'Caswell; Catawba; Chatham; Cherokee; Chowan; Clay; Cleveland; '\n               'Columbus; Craven; Cumberland; Currituck; Dare; Davidson; '\n               'Davie; Duplin; Durham; Edgecombe; Forsyth; Franklin; Gaston; '\n               'Gates; Graham; Granville; Greene; Guilford; Halifax; Harnett; '\n               'Haywood; Henderson; Hertford; Hoke; Hyde; Iredell; Jackson; '\n               'Johnston; Jones; Lee; Lenoir; Lincoln; Macon; Madison; Martin; '\n               'McDowell; Mecklenburg; Mitchell; Montgomery; Moore; Nash; New '\n               'Hanover; Northampton; Onslow; Orange; Pamlico; Pasquotank; '\n               'Pender; Perquimans; Person; Pitt; Polk; Randolph; Richmond; '\n               'Robeson; Rockingham; Rowan; Rutherford; Sampson; Scotland; '\n               'Stanly; Stokes; Surry; Swain; Transylvania; Tyrrell; Union; '\n               'Vance; Wake; Warren; Washington; Watauga; Wayne; Wilkes; '\n               'Wilson; Yadkin; '\n               'Yancey.\"],BBOX[33.83,-84.33,36.59,-75.38]],ID[\"EPSG\",3358]]\\n',\n 'region': {'b': 0.0,\n            'cells': 29535,\n            'cells3': 29535,\n            'cols': 179,\n            'cols3': 179,\n            'depths': 1,\n            'e': 639530.0,\n            'ewres': 10.0,\n            'ewres3': 10.0,\n            'n': 221230.0,\n            'nsres': 10.0,\n            'nsres3': 10.0,\n            'projection': 99,\n            'rows': 165,\n            'rows3': 165,\n            's': 219580.0,\n            't': 1.0,\n            'tbres': 1.0,\n            'w': 637740.0,\n            'zone': 0}}\n\n\n\n\nLayers\n\nRaster Layers\nLet’s see all of the mapsets raster layers.\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/raster_layers\"]\n\n\n\n\n\n\n\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/raster_layers\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n\n['aspect',\n 'basin_50K',\n 'boundary_county_500m',\n 'cfactorbare_1m',\n 'cfactorgrow_1m',\n 'el_D782_6m',\n 'el_D783_6m',\n 'el_D792_6m',\n 'el_D793_6m',\n 'elev_lid792_1m',\n 'elev_ned_30m',\n 'elev_srtm_30m',\n 'elev_state_500m',\n 'elevation',\n 'elevation_shade',\n 'facility',\n 'geology_30m',\n 'lakes',\n 'landclass96',\n 'landcover_1m',\n 'landuse96_28m',\n 'lsat7_2002_10',\n 'lsat7_2002_20',\n 'lsat7_2002_30',\n 'lsat7_2002_40',\n 'lsat7_2002_50',\n 'lsat7_2002_61',\n 'lsat7_2002_62',\n 'lsat7_2002_70',\n 'lsat7_2002_80',\n 'ncmask_500m',\n 'ortho_2001_t792_1m',\n 'roadsmajor',\n 'slope',\n 'soilsID',\n 'soils_Kfactor',\n 'streams_derived',\n 'towns',\n 'urban',\n 'zipcodes',\n 'zipcodes_dbl']\n\n\n\n\nVector Layers\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/vector_layers\"]\n\n\n\n\n\n\n\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/vector_layers\"\n\npayload = {}\nheaders = {}\n\nresponse = requests.get( url, auth=ACTINIA_AUTH, headers=headers)\n\npprint(response.json().get('process_results'))\n\n['P079214',\n 'P079215',\n 'P079218',\n 'P079219',\n 'boundary_county',\n 'boundary_municp',\n 'bridges',\n 'busroute1',\n 'busroute11',\n 'busroute6',\n 'busroute_a',\n 'busroutesall',\n 'busstopsall',\n 'census_wake2000',\n 'censusblk_swwake',\n 'comm_colleges',\n 'elev_lid792_bepts',\n 'elev_lid792_cont1m',\n 'elev_lid792_randpts',\n 'elev_lidrural_mrpts',\n 'elev_lidrural_mrptsft',\n 'elev_ned10m_cont10m',\n 'firestations',\n 'geodetic_pts',\n 'geodetic_swwake_pts',\n 'geology',\n 'geonames_NC',\n 'geonames_wake',\n 'hospitals',\n 'lakes',\n 'nc_state',\n 'overpasses',\n 'poi_names_wake',\n 'precip_30ynormals',\n 'precip_30ynormals_3d',\n 'railroads',\n 'roadsmajor',\n 'schools_wake',\n 'soils_general',\n 'soils_wake',\n 'streams',\n 'streets_wake',\n 'swwake_10m',\n 'urbanarea',\n 'usgsgages',\n 'zipcodes_wake']\n\n\n\n\n\nProcessing\n\nSyncronous Processing\nEmphemeral process\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/processing\"]\n\n\n\n\n\n\n\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/processing\"\n\ndata = {}\n\nresponse = requests.post( url, auth=ACTINIA_AUTH, json=data)\n\npprint(response.json().get('process_results'))\n\nNone\n\n\n\n\nAsyncronous Processing\n\n\n\n\n\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/processing_async\"]\n\n\n\n\n\n\n\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/processing_async\"\n\ndata = {}\n\nresponse = requests.post( url, auth=ACTINIA_AUTH, json=data)\n\npprint(response.json().get('process_results'))\n\n{}"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#lets-look-at-the-complete-api-within-postman-or-insomnia.",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#lets-look-at-the-complete-api-within-postman-or-insomnia.",
    "title": "Part 2. Introduction to Actinia",
    "section": "Let’s look at the complete API within PostMan or Insomnia.",
    "text": "Let’s look at the complete API within PostMan or Insomnia.\n\nPostman\nInsomnia\n\nhttps://localhost:8080/api/v3/swagger-ui/index.html\n\nProcess Chains\nLet move on to creating process chains in Part 3."
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#part-1.-from-academia-to-startup",
    "href": "content/presentations/foss4gna_2024_openplains.html#part-1.-from-academia-to-startup",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Part 1. From Academia to Startup",
    "text": "Part 1. From Academia to Startup\n\nPh.D. in Geospatial Analytics (2023)"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#democratizing-geospatial-modeling",
    "href": "content/presentations/foss4gna_2024_openplains.html#democratizing-geospatial-modeling",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Democratizing Geospatial Modeling",
    "text": "Democratizing Geospatial Modeling"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#regional-nsf-i-corps",
    "href": "content/presentations/foss4gna_2024_openplains.html#regional-nsf-i-corps",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Regional NSF I-Corps",
    "text": "Regional NSF I-Corps\nNSF Customer Discorvery\n\n20 Customer Interviews\nIdentify Value Prop\nMarket Size"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#value-prop",
    "href": "content/presentations/foss4gna_2024_openplains.html#value-prop",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Value Prop",
    "text": "Value Prop\nDemocratize interactive geospatial modeling in flood resilience and urban growth planning through scenario-based civic engagement."
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#ip-license-coi",
    "href": "content/presentations/foss4gna_2024_openplains.html#ip-license-coi",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "IP | License | COI",
    "text": "IP | License | COI\n\nGPL v3\nUniversity does not want to pursue licensing\nConflict of Interest"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#company-formation",
    "href": "content/presentations/foss4gna_2024_openplains.html#company-formation",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Company Formation",
    "text": "Company Formation\n\n\n\nc-corp?\nnon-profit?"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#section",
    "href": "content/presentations/foss4gna_2024_openplains.html#section",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "",
    "text": "Free\n12 Week\nIn-Person\n\n\n\n\nRAP Website"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#testing-assumptions",
    "href": "content/presentations/foss4gna_2024_openplains.html#testing-assumptions",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Testing Assumptions",
    "text": "Testing Assumptions\n\n\nTrust in unfamiliar models"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#stormwater-pilot",
    "href": "content/presentations/foss4gna_2024_openplains.html#stormwater-pilot",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Stormwater Pilot",
    "text": "Stormwater Pilot"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#funding",
    "href": "content/presentations/foss4gna_2024_openplains.html#funding",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Funding",
    "text": "Funding\n\nSBIR Grant?\nState Specific Funding?\nBootstrapping?\nVenture?"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#end-of-year-1",
    "href": "content/presentations/foss4gna_2024_openplains.html#end-of-year-1",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "End of year 1",
    "text": "End of year 1\nOperating Costs\n\nTaxes\nLawyers\nCloud Services (Email, drive, etc)\nServers\nTime and energy"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#mentorship",
    "href": "content/presentations/foss4gna_2024_openplains.html#mentorship",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Mentorship",
    "text": "Mentorship\nThank you to my Mentors\n\nFind mentors\nDon’t pay for mentorship"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#part-2.-open-source-as-an-economic-driver",
    "href": "content/presentations/foss4gna_2024_openplains.html#part-2.-open-source-as-an-economic-driver",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Part 2. Open Source as an Economic Driver",
    "text": "Part 2. Open Source as an Economic Driver\n\n\n\nOpen source facilitates economic development\nDrives innovation\nNeeds to be supported to be sustainable\n\n\n\n\n\nLink to Full Image"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#community-relations",
    "href": "content/presentations/foss4gna_2024_openplains.html#community-relations",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Community Relations",
    "text": "Community Relations\n\nWhat should a company’s relationship be with the open source communities it depends on?"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#open-source-sustainability",
    "href": "content/presentations/foss4gna_2024_openplains.html#open-source-sustainability",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Open Source Sustainability",
    "text": "Open Source Sustainability"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#community",
    "href": "content/presentations/foss4gna_2024_openplains.html#community",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Community",
    "text": "Community\n\n\n\n\nOpenPlains is dependent on GRASS GIS\n\nI’m part of the GRASS community\nHow can OpenPlains support GRASS as it grows?\nDonate\n\nTime\nMoney\n\nProfit Sharing…\nOpen-Source Corp…\n\nInclude language in articles of incorporation"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#discussion-questions",
    "href": "content/presentations/foss4gna_2024_openplains.html#discussion-questions",
    "title": "OpenPlains Inc. A First-Year Retrospective",
    "section": "Discussion & Questions",
    "text": "Discussion & Questions\n\nHow can companies support thier open source community?\nHow can you growing your own open source community?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OpenPlains - Learning",
    "section": "",
    "text": "Intro to Geoprocessing with GRASS GIS\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nworkshop\n\n\nSmathHack\n\n\n\nWorkshop introduction to geoprocessing with GRASS GIS. We aim to introduce you to the basics concepts of Geographic Information Systems (GIS) and how to use GRASS GIS to perform geoprocessing tasks.\n\n\n\n\n\nFeb 8, 2025\n\n\nCorey T. White\n\n\n\n\n\n\n\n\n\n\n\n\nOpenPlains Inc. A First-Year Retrospective\n\n\nFOSS4G NA 2024, St. Louis Missouri\n\n\n\nfoss4gna\n\n\npresentation\n\n\nOpenPlains\n\n\n\n\n\n\n\n\n\nSep 10, 2024\n\n\nCorey T. White\n\n\n\n\n\n\n\n\n\n\n\n\nGRASS GIS as Geocomputational Engine\n\n\nFOSS4G NA 2024, St. Louis Missouri\n\n\n\n\n\n\n\n\nSep 10, 2024\n\n\nCorey White, Vaclav Petras, Markus Neteler\n\n\n\n\n\n\n\n\n\n\n\n\nPart 2. Introduction to Actinia\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nlidar\n\n\nSTAC\n\n\n\nLearn how to use actinia to create a cloud-based processing environment for GRASS GIS.\n\n\n\n\n\nSep 10, 2024\n\n\nCorey T. White, Vaclav Petras\n\n\n\n\n\n\n\n\n\n\n\n\nPart 1. GRASS GIS 101\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nlidar\n\n\nSTAC\n\n\n\nLearn the basics of GRASS GIS, a powerful open-source geospatial procesing engine.\n\n\n\n\n\nSep 10, 2024\n\n\nCorey T. White, Vaclav Petras\n\n\n\n\n\n\n\n\n\n\n\n\nPart 3. Actinia Process Chians\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nlidar\n\n\nSTAC\n\n\n\nLearn how to create custom actinia process chain templates for GRASS GIS application.\n\n\n\n\n\nSep 10, 2024\n\n\nCorey T. White, Vaclav Petras\n\n\n\n\n\n\n\n\n\n\n\n\nDeveloping web-application with GRASS GIS\n\n\nFOSS4G NA 2024, St. Louis Missouri\n\n\n\nworkshop\n\n\nfoss4gna\n\n\nwebdev\n\n\ngrass\n\n\n\n\n\n\n\n\n\nSep 9, 2024\n\n\nCorey T. White, Vaclav Petras\n\n\n\n\n\n\n\n\n\n\n\n\nGeoprocessing with GRASS GIS and Jupyter Notebooks\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nlidar\n\n\nSTAC\n\n\n\nThis tutorial demonstrates how to use GRASS GIS in Jupyter Notebooks.\n\n\n\n\n\nAug 22, 2024\n\n\nCorey T. White\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#corey-white",
    "href": "content/presentations/foss4gna_2024_case_studies.html#corey-white",
    "title": "",
    "section": "Corey White",
    "text": "Corey White\n\n\n\nCenter of Geospatial Analytics at NC State University - Applied Research Scientist\nOpenPlains Inc - Founder & CEO\nGRASS GIS - Contributor & Active Community Member"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass",
    "href": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass",
    "title": "",
    "section": "What is GRASS?",
    "text": "What is GRASS?\n\n\n\n\n\n\nGRASS is geospatial computational engine\nGRASS is a modeling platform\nGRASS is a development framework\nGRASS is not your Papi’s Desktop GIS"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#grass-as-a-geoprocessing-engine",
    "href": "content/presentations/foss4gna_2024_case_studies.html#grass-as-a-geoprocessing-engine",
    "title": "",
    "section": "GRASS as a Geoprocessing Engine",
    "text": "GRASS as a Geoprocessing Engine\n\n\n\nFast, trusted, science based tools\n\n+400 core tools\n+400 contributor addons\n\nModern Tooling\n\nJupyter Notebooks\nR Studio\nPython and C API\nGUI"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass-used-for",
    "href": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass-used-for",
    "title": "",
    "section": "What is GRASS used For?",
    "text": "What is GRASS used For?\n\nAdvanced geospatial modeling and analysis\nData Science\nData Engineering"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#who-is-using-grass",
    "href": "content/presentations/foss4gna_2024_case_studies.html#who-is-using-grass",
    "title": "",
    "section": "Who is using GRASS",
    "text": "Who is using GRASS\n\n\nCivil and Environmental\n\nResearchers\nModelers\nData Engineers\nClimate Scientists\nStartups"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#features",
    "href": "content/presentations/foss4gna_2024_case_studies.html#features",
    "title": "",
    "section": "Features",
    "text": "Features\n\n\n\nHydrologly\nMap Calculations\nGeomorphology\nRemote Sensing\nMachine Learning\nLidar"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#grass-in-the-wild",
    "href": "content/presentations/foss4gna_2024_case_studies.html#grass-in-the-wild",
    "title": "",
    "section": "GRASS in the Wild",
    "text": "GRASS in the Wild\nCase Studies\n\n\nDesktop\n\nCivil Engineering Firm\nLidar/Raster Processing\nPower desktops to simplify processing\n\n\nCloud\n\nEnvironmental Engineering Firm\nRemote Sensing\nMachine Learning\n\n\nHPC\n\nAcademia\nNational Scale Data Processing\nUrban Growth Forcasting"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#desktop-based-geoprocessing",
    "href": "content/presentations/foss4gna_2024_case_studies.html#desktop-based-geoprocessing",
    "title": "",
    "section": "Desktop-based Geoprocessing",
    "text": "Desktop-based Geoprocessing\n\n\nSo fast you usally don’t need scale\n\nHandles large raster base calculations with ease"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study",
    "href": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study",
    "title": "",
    "section": "Desktop Case Study",
    "text": "Desktop Case Study\nBohannan Huston\n\n\nCivil Engineeering firm based out of New Mexico\nModeling & Anaylsis\n\n1m QL1 Lidar Data\nVegitation Analysis\nFlow Lines Deliniation"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study-1",
    "href": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study-1",
    "title": "",
    "section": "Desktop Case Study",
    "text": "Desktop Case Study\nBohannan Huston: Tech Specs\nData: North Carolina Phase 4 Geiger - images: 22,519\n\n\n\nProcess\nHardware\nTime (sec)\nTime (min)\n\n\n\n\nSVF Generation\nMac M2 Max\n790.8\n13.2\n\n\n\nMac M1 Max\n889.2\n14.8\n\n\nImage Tiling\nMac M2 Max\n407.8\n6.8\n\n\n\nMac M1 Max\n519.1\n8.7\n\n\nBuilding Prediction\nMac M2 Max\n7537.5\n125.6\n\n\n\nMac M1 Max\n9641.4\n160.7"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-based-geoprocessing",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-based-geoprocessing",
    "title": "",
    "section": "Cloud-based Geoprocessing",
    "text": "Cloud-based Geoprocessing\nTools\n\nactinia - GRASS REST API\nApache AirFlow - ETL\nOpenPlains - Interative Geospatial Modeling"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study",
    "title": "",
    "section": "Cloud Case Study",
    "text": "Cloud Case Study\nMudialis: Free Data With Free Software\n\nGRASS GIS\nGRASS GIS Addons\nactinia"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-1",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-1",
    "title": "",
    "section": "Cloud Case Study",
    "text": "Cloud Case Study\nMudialis: Detecting buildings, green roofs and trees\n\n\n\nOfficial cadastral plans are lagging behind reality.\nDetection based on point clouds and 7.5 cm aerial imagery (RGB-NIR)\n\nNew GRASS GIS addons\n\nm.analyse.buildings\nr.extract.greenroofs\nm.analyse.trees\n\n\n\n\n\n\nSource code: https://github.com/mundialis/rvr_interface/"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-2",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-2",
    "title": "",
    "section": "Cloud Case Study",
    "text": "Cloud Case Study\nMudialis: Image classification workshop with actinia\n\n\n\n\n\n\n\n\n\n\nMachine learning based image classification using an aerial image and surface model. Visualization with leafmap"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-based-geoprocessing",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-based-geoprocessing",
    "title": "",
    "section": "HPC-Based Geoprocessing",
    "text": "HPC-Based Geoprocessing\nHPC - High Performance Computing"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study",
    "title": "",
    "section": "HPC Case-Study",
    "text": "HPC Case-Study\nNCSU Henry2 cluster\n\nNodes: 933\nCores: 13844\nPython, R, GRASS GIS"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-1",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-1",
    "title": "",
    "section": "HPC Case-Study",
    "text": "HPC Case-Study\nNCSU: CONUS Urban Growth Model"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-2",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-2",
    "title": "",
    "section": "HPC Case-Study",
    "text": "HPC Case-Study\nNCSU: CONUS Urban Growth Model\nExample: Scaling urban growth model\n\nr.futures addon: FUTURES urban growth model\n30-m resolution (16 billion cells) on HPC\n50 stochastic runs annually from 2020 to 2100"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#summary",
    "href": "content/presentations/foss4gna_2024_case_studies.html#summary",
    "title": "",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\nGRASS is geospatial computational engine\nGRASS is a modeling platform\nGRASS is a development framework\nGRASS is not your Papi’s Desktop GIS"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#questions",
    "href": "content/presentations/foss4gna_2024_case_studies.html#questions",
    "title": "",
    "section": "Questions",
    "text": "Questions"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html",
    "href": "content/workshops/foss4gna_2024/intro_grass.html",
    "title": "Part 1. GRASS GIS 101",
    "section": "",
    "text": "This notebook is a quick introduction to GRASS and Jupyter Notebooks.\nBy default all cells are running Python:\n\nimport sys\nv = sys.version_info\nprint(f\"We are using Python {v.major}.{v.minor}.{v.micro}\")\n\nWe are using Python 3.10.12\n\n\n\n\nIf you are running this notebook in Colab, you will need to install GRASS GIS and its Python API. You can do this by running the following cell:\n\n%%bash\n\napt-get install grass grass-dev grass-doc\n# leave the directory with source code\ncd ~\n\n# download sample data\nmkdir -p grassdata\nmkdir -p output\ncurl -SL https://grass.osgeo.org/sampledata/north_carolina/nc_basic_spm_grass7.zip &gt; nc_basic_spm_grass7.zip\nunzip -qq nc_basic_spm_grass7.zip\nmv nc_basic_spm_grass7 grassdata\nrm nc_basic_spm_grass7.zip\n\npip install figlet\n\n\nimport os\nos.chdir(os.path.expanduser(\"~\"))\n\nBut you can also run shell commands by prefixing them with ! or use %%bash to run the whole cell as a shell script.\n\n# !sudo apt-get install figlet\n\n!figlet \"GRASS GIS 101\"\n\n  ____ ____      _    ____ ____     ____ ___ ____    _  ___  _ \n / ___|  _ \\    / \\  / ___/ ___|   / ___|_ _/ ___|  / |/ _ \\/ |\n| |  _| |_) |  / _ \\ \\___ \\___ \\  | |  _ | |\\___ \\  | | | | | |\n| |_| |  _ &lt;  / ___ \\ ___) |__) | | |_| || | ___) | | | |_| | |\n \\____|_| \\_\\/_/   \\_\\____/____/   \\____|___|____/  |_|\\___/|_|\n                                                               \n\n\n\n%%bash\ngrass -v\n\nGRASS GIS 8.3.1\nGeographic Resources Analysis Support System (GRASS) is Copyright,\n1999-2023 by the GRASS Development Team, and licensed under terms of the\nGNU General Public License (GPL) version &gt;=2.\n\nThis GRASS GIS 8.3.1 release is coordinated and produced by\nthe GRASS Development Team with contributions from all over the world.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\n\n\n\n\n\n# import standard Python packages\nimport os\nimport subprocess\nimport json\nfrom io import StringIO\nfrom pathlib import Path\nfrom IPython.display import IFrame\nfrom pandas import DataFrame\n\n\n\n\n\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n\n# import GRASS GIS python packages\n%reload_ext autoreload\n%autoreload 2\nimport grass.script as gs\nimport grass.jupyter as gj\n\n\n# create a temporary folder where to place our GRASS project\nimport tempfile\ntempdir = tempfile.TemporaryDirectory()\n\n\n\n\n\ngs.create_project(path=tempdir.name, name=\"foss4g2024\", epsg=\"2817\", overwrite=True)\n\n\n# start GRASS in the recently created project\nsession = gj.init(Path(tempdir.name,\"foss4g2024\"))\n\n\n# !ogrinfo \"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\" -al\n# !ogrinfo /vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip -al\n# !ogrinfo /vsizip/vsicurl/https://static.stlouis-mo.gov/open-data/planning/neighborhoods/neighborhoods.zip/Neighborhoods -al\n!ogrinfo \"https://services1.arcgis.com/fBc8EJBxQRMcHlei/arcgis/rest/services/NPS_Land_Resources_Division_Boundary_and_Tract_Data_Service/FeatureServer/2/query?outFields=*&where=1%3D1&f=geojson\" -al\n\n\n\nLet’s import some vector data from the city of St. Louis’ open data portal.\nhttps://www.stlouis-mo.gov/data/datasets/index.cfm\n\n\n\ngs.run_command(\"v.import\",\n   input=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\",\n   output=\"stl_boundary\",\n   layer=\"stl_boundary\",\n   snap=0.0001\n)\n\n\n\n\n\nstreets_url=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip\"\n# streets_url=\"http://maps.stlouisco.com/arcgis/rest/services/OpenData/OpenData/FeatureServer/1/query?outFields=*&where=1%3D1&f=geojson\"\ngs.run_command(\"v.import\",\n   input=streets_url,\n   output=\"stl_streets\",\n   snap=0.0001,\n   layer=\"tgr_str_cl\"\n)\n\n\n\n\n\nneigh_url=\"https://services1.arcgis.com/fBc8EJBxQRMcHlei/arcgis/rest/services/NPS_Land_Resources_Division_Boundary_and_Tract_Data_Service/FeatureServer/2/query?outFields=*&where=1%3D1&f=geojson\"\ngs.run_command(\"v.import\",\n   input=neigh_url,\n   output=\"stl_park\",\n   snap=0.001,\n   layer=\"OGRGeoJSON\",\n   extent=\"region\"\n)\n\n\ngs.run_command(\"v.info\", map=\"stl_park\")\n\n\n\n\n\n\n\n\nmap = gj.InteractiveMap(map_backend=\"folium\")\n\n# help(map.add_vector)        \nmap.add_vector(\"stl_boundary\")\n# map.add_vector(\"stl_park\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\n\n\n\n\nmap = gj.Map(width=300)\nmap.d_vect(map=\"stl_streets\", color=\"grey\", fill_color=\"none\")\nmap.d_vect(map=\"stl_park\", color=\"green\", fill_color=\"none\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\ngs.run_command(\"g.region\", vector=\"stl_boundary\", res=30, flags=\"ap\")\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636\n\n\n\n\n\ngs.run_command(\"g.extension\", extension=\"t.stac\", url=\"https://github.com/cwhite911/grass-addons\", branch=\"t.stac-lazy-load\")\n\nhttps://stacindex.org/catalogs\n\ngs.run_command(\"t.stac.catalog\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               format=\"plain\",\n               flags=\"b\")\n\n---------------------------------------------------------------------------\nCatalog: Earth Search by Element 84\n---------------------------------------------------------------------------\nClient Id: earth-search-aws\nClient Description: A STAC API of public datasets on AWS\nClient STAC Extensions: []\nClient catalog_type: ABSOLUTE_PUBLISHED\n---------------------------------------------------------------------------\nCollections: 9\n---------------------------------------------------------------------------\nCollection Id | Collection Title\n---------------------------------------------------------------------------\nsentinel-2-pre-c1-l2a: Sentinel-2 Pre-Collection 1 Level-2A \ncop-dem-glo-30: Copernicus DEM GLO-30\nnaip: NAIP: National Agriculture Imagery Program\ncop-dem-glo-90: Copernicus DEM GLO-90\nlandsat-c2-l2: Landsat Collection 2 Level-2\nsentinel-2-l2a: Sentinel-2 Level-2A\nsentinel-2-l1c: Sentinel-2 Level-1C\nsentinel-2-c1-l2a: Sentinel-2 Collection 1 Level-2A\nsentinel-1-grd: Sentinel-1 Level-1C Ground Range Detected (GRD)\n---------------------------------------------------------------------------\n\n\n\ngs.run_command(\"t.stac.collection\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               flags=\"b\"\n            )\n\nCollection ID: cop-dem-glo-30\nSTAC Version: 1.0.0\nDescription: The Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-30 Public provides limited worldwide coverage at 30 meters because a small subset of tiles covering specific countries are not yet released to the public by the Copernicus Programme.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\nLicense: proprietary\nKeywords: ['Copernicus', 'DEM', 'DSM', 'Elevation']\n---------------------------------------------------------------------------\n\nSummary:\ngsd: [30]\nplatform: ['tandem-x']\nproj:epsg: [4326]\nstorage:platform: ['AWS']\nstorage:region: ['eu-central-1']\nstorage:requester_pays: [False]\n---------------------------------------------------------------------------\n\nItem Assets Keys: ['data']\n---------------------------------------------------------------------------\n\nAsset: Data\nKey: data\nRoles: ['data']\nType: image/tiff; application=geotiff; profile=cloud-optimized\nDescription: None\nRaster Bands:\nBand: {'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}\n---------------------------------------------------------------------------\n\n\n\n\n\n\n\nThe t.stac.item module will download the Copernicus DEM GLO-30 data from the STAC catalog.\n\ngs.run_command(\"t.stac.item\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               extent=\"region\",\n               method=\"bicubic\",\n               resolution=\"value\",\n               memory=\"5000\",\n               resolution_value=30,\n               flags=\"d\"\n            )\n\nDownloading Asset: {'href': 's3://copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif', 'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}], 'roles': ['data'], 'collection_id': 'cop-dem-glo-30', 'item_id': 'Copernicus_DSM_COG_10_N38_00_W091_00_DEM', 'file_name': 'cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data', 'datetime': '2021-04-22T00:00:00Z'}\nImport Url: /vsis3/copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif\nImporting: cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data\n\n\nLet’s rename our elevation raster to cop-dem-glo-30.\n\ngs.run_command(\"g.rename\", raster=\"cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data,cop-dem-glo-30\")\n\n\nmap = gj.InteractiveMap(width=500, height=500, map_backend=\"ipyleaflet\", use_region=True)\nmap.add_raster(\"cop-dem-glo-30\")\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\nmap.add_vector(\"stl_park\", fill_color=\"none\", line_color=\"green\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\ngs.run_command(\"g.region\", raster=\"cop-dem-glo-30\", res=30, flags=\"ap\")\ngs.run_command(\"r.colors\", map=\"cop-dem-glo-30\", color=\"elevation\")\ngs.run_command(\"r.relief\", input=\"cop-dem-glo-30\", output=\"relief\", overwrite=True)\n\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"cop-dem-glo-30\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.d_vect(map=\"stl_park\", color=\"purple\", fill_color=\"none\")\n# map.d_vect(map=\"stl_streets\", color=\"grey\", fill_color=\"none\", width=0.25)\nmap.d_legend(raster=\"cop-dem-glo-30\", at=\"5,50,2,5\", flags=\"b\")\nmap.show()\n\n\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636\n\n\n\n\n\n\n\nA map of the evelvation in the St. Louis area\n\n\n\n\n\nLet’s calculate the slope of the elevation raster.\n\ngs.run_command(\"r.slope.aspect\", elevation=\"cop-dem-glo-30\", slope=\"slope\", aspect=\"aspect\", overwrite=True)\ngs.run_command(\"r.colors\", map=\"slope\", color=\"sepia\", flags=\"e\")\n\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"slope\", brighten=30)\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\nA map of the slope in the St. Louis area\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\ngs.run_command(\"v.to.rast\", input=\"stl_streets\", output=\"stl_streets\", use=\"value\", type=\"line\", overwrite=True)\ngs.run_command(\"r.grow.distance\", input=\"stl_streets\", distance=\"dist_to_road\")\ngs.run_command(\"r.colors\", map=\"dist_to_road\", color=\"plasma\", flags=\"e\")\nmap1 = gj.Map(width=300)\nmap1.d_shade(shade=\"relief\", color=\"dist_to_road\")\nmap1.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap1.d_legend(raster=\"dist_to_road\", at=\"95,65,5,15\", range=\"0,100\", flags=\"ds\")\nmap1.show()\n\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.neighbors\", flags=\"\", input=\"stl_streets\", output=\"road_dens\", size=37, method=\"count\", memory=30000, nprocs=24)\ngs.run_command(\"r.colors\", map=\"road_dens\", color=\"plasma\", flags=\"\")\nmap2 = gj.Map(width=300)\nmap2.d_shade(shade=\"relief\", color=\"road_dens\")\nmap2.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap2.d_legend(raster=\"road_dens\", at=\"95,65,5,15\", flags=\"s\")\nmap2.d_barscale(at=\"55,5,5,5\", flags=\"n\")\nmap2.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.geomorphon\", elevation=\"cop-dem-glo-30\", search=15, flat=0.1, forms=\"geomorphon\", overwrite=True)\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"geomorphon\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.d_legend(raster=\"geomorphon\", at=\"95,65,2,5\", flags=\"\")\nmap.show()\n\n\n\n\n\n\n\n\nLet’s run some bash commands to calculate flow accumulation.\nWe can start by downloading the new r.flowaccumulation module from the GRASS Addons repository.\n\n%%bash\n\ng.extension extension=r.flowaccumulation\n\n# calculate positive flow accumulation and drainage directions using r.watershed\n# for comparison, use -s (SFD)\nr.watershed -sa elevation=cop-dem-glo-30 accumulation=flow_accum drainage=drain_directions\n\n# calculate flow accumulation using r.flowaccumulation\nr.flowaccumulation input=drain_directions output=flow_accum_new\n\n# copy color table\nr.colors map=flow_accum_new raster=flow_accum\n\nFetching &lt;r.flowaccumulation&gt; from &lt;https://github.com/OSGeo/grass-addons/&gt;\n(be patient)...\nAlready on 'grass8'\n\n\nYour branch is up to date with 'origin/grass8'.\n\n\nCompiling...\nInstalling...\nUpdating extensions metadata file...\nUpdating extension modules metadata file...\nInstallation of &lt;r.flowaccumulation&gt; successfully finished\nSECTION 1a (of 4): Initiating Memory.\nSECTION 1b (of 4): Determining Offmap Flow.\n   0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68  72  76  80  84  88  92  96 100\nSECTION 2: A* Search.\n   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100\nSECTION 3: Accumulating Surface Flow with SFD.\n   1   3   5   7   9  11  13  15  17  19  21  23  25  27  29  31  33  35  37  39  41  43  45  47  49  51  53  55  57  59  61  63  65  67  69  71  73  75  77  79  81  83  85  87  89  91  93  95  97  99 100\nSECTION 4: Closing Maps.\nWriting out only positive flow accumulation values.\nCells with a likely underestimate for flow accumulation can no longer be\nidentified.\nUsing 1 thread for serial computation\nReading flow direction raster &lt;drain_directions&gt;...\nFlow direction format assumed to be degrees CCW from East divided by 45\n   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100\nInput time for flow direction: 0.008398 seconds\nAccumulating flows...\nCompute time for flow accumulation: 0.006112 seconds\nWriting flow accumulation raster &lt;flow_accum_new&gt;...\n   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100\nOutput time for flow accumulation: 0.011455 seconds\nTotal elapsed time: 0.025998 seconds\nColor table for raster map &lt;flow_accum_new&gt; set to 'flow_accum'\n\n\n\nmap3d = gj.Map3D(width=500, height=500)\nmap3d.render(\n    elevation_map=\"cop-dem-glo-30\",\n    color_map=\"flow_accum_new\",\n    zexag=4, \n    perspective=12, \n    height=10000, \n    resolution_fine=1,\n    arrow_position=[100,50],\n)\nmap3d.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", flags=\"r\")\n\nLet’s zoom in on the Arch Park area.\n\ngs.run_command(\"g.region\", vector=\"stl_park\", flags=\"ap\")  \n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      282180\nsouth:      280770\nwest:       1225440\neast:       1226970\nnsres:      30\newres:      30\nrows:       47\ncols:       51\ncells:      2397\n\n\n\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\nmap = gj.Map(width=500, use_region=True)\nmap.d_shade(shade=\"relief\", color=\"flow_accum_new\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.d_vect(map=\"stl_park\", color=\"red\", fill_color=\"none\", width=3)\nmap.d_legend(raster=\"cop-dem-glo-30\", at=\"5,50,80,75\", flags=\"b\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\ngs.run_command(\"g.region\", raster=\"flow_accum_new\", res=30, flags=\"ap\")\nmap = gj.InteractiveMap(width=500, map_backend=\"folium\", use_region=True)\nmap.add_raster(\"flow_accum_new\", opacity=0.5)\nmap.add_raster(\"relief\", opacity=0.75)\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\nmap.add_vector(\"stl_park\", fill_color=\"none\", line_color=\"green\")\nmap.show()\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636\n\n\n\n\n\n\n\n\n\n\n\nSet the computational region to the cop-dem-glo-30 raster map."
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#colab-setup",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#colab-setup",
    "title": "Part 1. GRASS GIS 101",
    "section": "",
    "text": "If you are running this notebook in Colab, you will need to install GRASS GIS and its Python API. You can do this by running the following cell:\n\n%%bash\n\napt-get install grass grass-dev grass-doc\n# leave the directory with source code\ncd ~\n\n# download sample data\nmkdir -p grassdata\nmkdir -p output\ncurl -SL https://grass.osgeo.org/sampledata/north_carolina/nc_basic_spm_grass7.zip &gt; nc_basic_spm_grass7.zip\nunzip -qq nc_basic_spm_grass7.zip\nmv nc_basic_spm_grass7 grassdata\nrm nc_basic_spm_grass7.zip\n\npip install figlet\n\n\nimport os\nos.chdir(os.path.expanduser(\"~\"))\n\nBut you can also run shell commands by prefixing them with ! or use %%bash to run the whole cell as a shell script.\n\n# !sudo apt-get install figlet\n\n!figlet \"GRASS GIS 101\"\n\n  ____ ____      _    ____ ____     ____ ___ ____    _  ___  _ \n / ___|  _ \\    / \\  / ___/ ___|   / ___|_ _/ ___|  / |/ _ \\/ |\n| |  _| |_) |  / _ \\ \\___ \\___ \\  | |  _ | |\\___ \\  | | | | | |\n| |_| |  _ &lt;  / ___ \\ ___) |__) | | |_| || | ___) | | | |_| | |\n \\____|_| \\_\\/_/   \\_\\____/____/   \\____|___|____/  |_|\\___/|_|\n                                                               \n\n\n\n%%bash\ngrass -v\n\nGRASS GIS 8.3.1\nGeographic Resources Analysis Support System (GRASS) is Copyright,\n1999-2023 by the GRASS Development Team, and licensed under terms of the\nGNU General Public License (GPL) version &gt;=2.\n\nThis GRASS GIS 8.3.1 release is coordinated and produced by\nthe GRASS Development Team with contributions from all over the world.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details."
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#grass-project-setup",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#grass-project-setup",
    "title": "Part 1. GRASS GIS 101",
    "section": "",
    "text": "# import standard Python packages\nimport os\nimport subprocess\nimport json\nfrom io import StringIO\nfrom pathlib import Path\nfrom IPython.display import IFrame\nfrom pandas import DataFrame"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#setup-grass-environment",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#setup-grass-environment",
    "title": "Part 1. GRASS GIS 101",
    "section": "",
    "text": "sys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n\n# import GRASS GIS python packages\n%reload_ext autoreload\n%autoreload 2\nimport grass.script as gs\nimport grass.jupyter as gj\n\n\n# create a temporary folder where to place our GRASS project\nimport tempfile\ntempdir = tempfile.TemporaryDirectory()"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#create-a-new-grass-project",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#create-a-new-grass-project",
    "title": "Part 1. GRASS GIS 101",
    "section": "",
    "text": "gs.create_project(path=tempdir.name, name=\"foss4g2024\", epsg=\"2817\", overwrite=True)\n\n\n# start GRASS in the recently created project\nsession = gj.init(Path(tempdir.name,\"foss4g2024\"))\n\n\n# !ogrinfo \"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\" -al\n# !ogrinfo /vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip -al\n# !ogrinfo /vsizip/vsicurl/https://static.stlouis-mo.gov/open-data/planning/neighborhoods/neighborhoods.zip/Neighborhoods -al\n!ogrinfo \"https://services1.arcgis.com/fBc8EJBxQRMcHlei/arcgis/rest/services/NPS_Land_Resources_Division_Boundary_and_Tract_Data_Service/FeatureServer/2/query?outFields=*&where=1%3D1&f=geojson\" -al\n\n\n\nLet’s import some vector data from the city of St. Louis’ open data portal.\nhttps://www.stlouis-mo.gov/data/datasets/index.cfm\n\n\n\ngs.run_command(\"v.import\",\n   input=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\",\n   output=\"stl_boundary\",\n   layer=\"stl_boundary\",\n   snap=0.0001\n)\n\n\n\n\n\nstreets_url=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip\"\n# streets_url=\"http://maps.stlouisco.com/arcgis/rest/services/OpenData/OpenData/FeatureServer/1/query?outFields=*&where=1%3D1&f=geojson\"\ngs.run_command(\"v.import\",\n   input=streets_url,\n   output=\"stl_streets\",\n   snap=0.0001,\n   layer=\"tgr_str_cl\"\n)\n\n\n\n\n\nneigh_url=\"https://services1.arcgis.com/fBc8EJBxQRMcHlei/arcgis/rest/services/NPS_Land_Resources_Division_Boundary_and_Tract_Data_Service/FeatureServer/2/query?outFields=*&where=1%3D1&f=geojson\"\ngs.run_command(\"v.import\",\n   input=neigh_url,\n   output=\"stl_park\",\n   snap=0.001,\n   layer=\"OGRGeoJSON\",\n   extent=\"region\"\n)\n\n\ngs.run_command(\"v.info\", map=\"stl_park\")\n\n\n\n\n\n\n\n\nmap = gj.InteractiveMap(map_backend=\"folium\")\n\n# help(map.add_vector)        \nmap.add_vector(\"stl_boundary\")\n# map.add_vector(\"stl_park\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\n\n\n\n\nmap = gj.Map(width=300)\nmap.d_vect(map=\"stl_streets\", color=\"grey\", fill_color=\"none\")\nmap.d_vect(map=\"stl_park\", color=\"green\", fill_color=\"none\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\ngs.run_command(\"g.region\", vector=\"stl_boundary\", res=30, flags=\"ap\")\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636\n\n\n\n\n\ngs.run_command(\"g.extension\", extension=\"t.stac\", url=\"https://github.com/cwhite911/grass-addons\", branch=\"t.stac-lazy-load\")\n\nhttps://stacindex.org/catalogs\n\ngs.run_command(\"t.stac.catalog\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               format=\"plain\",\n               flags=\"b\")\n\n---------------------------------------------------------------------------\nCatalog: Earth Search by Element 84\n---------------------------------------------------------------------------\nClient Id: earth-search-aws\nClient Description: A STAC API of public datasets on AWS\nClient STAC Extensions: []\nClient catalog_type: ABSOLUTE_PUBLISHED\n---------------------------------------------------------------------------\nCollections: 9\n---------------------------------------------------------------------------\nCollection Id | Collection Title\n---------------------------------------------------------------------------\nsentinel-2-pre-c1-l2a: Sentinel-2 Pre-Collection 1 Level-2A \ncop-dem-glo-30: Copernicus DEM GLO-30\nnaip: NAIP: National Agriculture Imagery Program\ncop-dem-glo-90: Copernicus DEM GLO-90\nlandsat-c2-l2: Landsat Collection 2 Level-2\nsentinel-2-l2a: Sentinel-2 Level-2A\nsentinel-2-l1c: Sentinel-2 Level-1C\nsentinel-2-c1-l2a: Sentinel-2 Collection 1 Level-2A\nsentinel-1-grd: Sentinel-1 Level-1C Ground Range Detected (GRD)\n---------------------------------------------------------------------------\n\n\n\ngs.run_command(\"t.stac.collection\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               flags=\"b\"\n            )\n\nCollection ID: cop-dem-glo-30\nSTAC Version: 1.0.0\nDescription: The Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-30 Public provides limited worldwide coverage at 30 meters because a small subset of tiles covering specific countries are not yet released to the public by the Copernicus Programme.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\nLicense: proprietary\nKeywords: ['Copernicus', 'DEM', 'DSM', 'Elevation']\n---------------------------------------------------------------------------\n\nSummary:\ngsd: [30]\nplatform: ['tandem-x']\nproj:epsg: [4326]\nstorage:platform: ['AWS']\nstorage:region: ['eu-central-1']\nstorage:requester_pays: [False]\n---------------------------------------------------------------------------\n\nItem Assets Keys: ['data']\n---------------------------------------------------------------------------\n\nAsset: Data\nKey: data\nRoles: ['data']\nType: image/tiff; application=geotiff; profile=cloud-optimized\nDescription: None\nRaster Bands:\nBand: {'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}\n---------------------------------------------------------------------------\n\n\n\n\n\n\n\nThe t.stac.item module will download the Copernicus DEM GLO-30 data from the STAC catalog.\n\ngs.run_command(\"t.stac.item\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               extent=\"region\",\n               method=\"bicubic\",\n               resolution=\"value\",\n               memory=\"5000\",\n               resolution_value=30,\n               flags=\"d\"\n            )\n\nDownloading Asset: {'href': 's3://copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif', 'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}], 'roles': ['data'], 'collection_id': 'cop-dem-glo-30', 'item_id': 'Copernicus_DSM_COG_10_N38_00_W091_00_DEM', 'file_name': 'cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data', 'datetime': '2021-04-22T00:00:00Z'}\nImport Url: /vsis3/copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif\nImporting: cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data\n\n\nLet’s rename our elevation raster to cop-dem-glo-30.\n\ngs.run_command(\"g.rename\", raster=\"cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data,cop-dem-glo-30\")\n\n\nmap = gj.InteractiveMap(width=500, height=500, map_backend=\"ipyleaflet\", use_region=True)\nmap.add_raster(\"cop-dem-glo-30\")\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\nmap.add_vector(\"stl_park\", fill_color=\"none\", line_color=\"green\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\ngs.run_command(\"g.region\", raster=\"cop-dem-glo-30\", res=30, flags=\"ap\")\ngs.run_command(\"r.colors\", map=\"cop-dem-glo-30\", color=\"elevation\")\ngs.run_command(\"r.relief\", input=\"cop-dem-glo-30\", output=\"relief\", overwrite=True)\n\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"cop-dem-glo-30\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.d_vect(map=\"stl_park\", color=\"purple\", fill_color=\"none\")\n# map.d_vect(map=\"stl_streets\", color=\"grey\", fill_color=\"none\", width=0.25)\nmap.d_legend(raster=\"cop-dem-glo-30\", at=\"5,50,2,5\", flags=\"b\")\nmap.show()\n\n\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636\n\n\n\n\n\n\n\nA map of the evelvation in the St. Louis area\n\n\n\n\n\nLet’s calculate the slope of the elevation raster.\n\ngs.run_command(\"r.slope.aspect\", elevation=\"cop-dem-glo-30\", slope=\"slope\", aspect=\"aspect\", overwrite=True)\ngs.run_command(\"r.colors\", map=\"slope\", color=\"sepia\", flags=\"e\")\n\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"slope\", brighten=30)\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\nA map of the slope in the St. Louis area\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\ngs.run_command(\"v.to.rast\", input=\"stl_streets\", output=\"stl_streets\", use=\"value\", type=\"line\", overwrite=True)\ngs.run_command(\"r.grow.distance\", input=\"stl_streets\", distance=\"dist_to_road\")\ngs.run_command(\"r.colors\", map=\"dist_to_road\", color=\"plasma\", flags=\"e\")\nmap1 = gj.Map(width=300)\nmap1.d_shade(shade=\"relief\", color=\"dist_to_road\")\nmap1.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap1.d_legend(raster=\"dist_to_road\", at=\"95,65,5,15\", range=\"0,100\", flags=\"ds\")\nmap1.show()\n\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.neighbors\", flags=\"\", input=\"stl_streets\", output=\"road_dens\", size=37, method=\"count\", memory=30000, nprocs=24)\ngs.run_command(\"r.colors\", map=\"road_dens\", color=\"plasma\", flags=\"\")\nmap2 = gj.Map(width=300)\nmap2.d_shade(shade=\"relief\", color=\"road_dens\")\nmap2.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap2.d_legend(raster=\"road_dens\", at=\"95,65,5,15\", flags=\"s\")\nmap2.d_barscale(at=\"55,5,5,5\", flags=\"n\")\nmap2.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.geomorphon\", elevation=\"cop-dem-glo-30\", search=15, flat=0.1, forms=\"geomorphon\", overwrite=True)\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"geomorphon\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.d_legend(raster=\"geomorphon\", at=\"95,65,2,5\", flags=\"\")\nmap.show()\n\n\n\n\n\n\n\n\nLet’s run some bash commands to calculate flow accumulation.\nWe can start by downloading the new r.flowaccumulation module from the GRASS Addons repository.\n\n%%bash\n\ng.extension extension=r.flowaccumulation\n\n# calculate positive flow accumulation and drainage directions using r.watershed\n# for comparison, use -s (SFD)\nr.watershed -sa elevation=cop-dem-glo-30 accumulation=flow_accum drainage=drain_directions\n\n# calculate flow accumulation using r.flowaccumulation\nr.flowaccumulation input=drain_directions output=flow_accum_new\n\n# copy color table\nr.colors map=flow_accum_new raster=flow_accum\n\nFetching &lt;r.flowaccumulation&gt; from &lt;https://github.com/OSGeo/grass-addons/&gt;\n(be patient)...\nAlready on 'grass8'\n\n\nYour branch is up to date with 'origin/grass8'.\n\n\nCompiling...\nInstalling...\nUpdating extensions metadata file...\nUpdating extension modules metadata file...\nInstallation of &lt;r.flowaccumulation&gt; successfully finished\nSECTION 1a (of 4): Initiating Memory.\nSECTION 1b (of 4): Determining Offmap Flow.\n   0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68  72  76  80  84  88  92  96 100\nSECTION 2: A* Search.\n   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100\nSECTION 3: Accumulating Surface Flow with SFD.\n   1   3   5   7   9  11  13  15  17  19  21  23  25  27  29  31  33  35  37  39  41  43  45  47  49  51  53  55  57  59  61  63  65  67  69  71  73  75  77  79  81  83  85  87  89  91  93  95  97  99 100\nSECTION 4: Closing Maps.\nWriting out only positive flow accumulation values.\nCells with a likely underestimate for flow accumulation can no longer be\nidentified.\nUsing 1 thread for serial computation\nReading flow direction raster &lt;drain_directions&gt;...\nFlow direction format assumed to be degrees CCW from East divided by 45\n   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100\nInput time for flow direction: 0.008398 seconds\nAccumulating flows...\nCompute time for flow accumulation: 0.006112 seconds\nWriting flow accumulation raster &lt;flow_accum_new&gt;...\n   0   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76  78  80  82  84  86  88  90  92  94  96  98 100\nOutput time for flow accumulation: 0.011455 seconds\nTotal elapsed time: 0.025998 seconds\nColor table for raster map &lt;flow_accum_new&gt; set to 'flow_accum'\n\n\n\nmap3d = gj.Map3D(width=500, height=500)\nmap3d.render(\n    elevation_map=\"cop-dem-glo-30\",\n    color_map=\"flow_accum_new\",\n    zexag=4, \n    perspective=12, \n    height=10000, \n    resolution_fine=1,\n    arrow_position=[100,50],\n)\nmap3d.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", flags=\"r\")\n\nLet’s zoom in on the Arch Park area.\n\ngs.run_command(\"g.region\", vector=\"stl_park\", flags=\"ap\")  \n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      282180\nsouth:      280770\nwest:       1225440\neast:       1226970\nnsres:      30\newres:      30\nrows:       47\ncols:       51\ncells:      2397\n\n\n\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\nmap = gj.Map(width=500, use_region=True)\nmap.d_shade(shade=\"relief\", color=\"flow_accum_new\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.d_vect(map=\"stl_park\", color=\"red\", fill_color=\"none\", width=3)\nmap.d_legend(raster=\"cop-dem-glo-30\", at=\"5,50,80,75\", flags=\"b\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\ngs.run_command(\"g.region\", raster=\"flow_accum_new\", res=30, flags=\"ap\")\nmap = gj.InteractiveMap(width=500, map_backend=\"folium\", use_region=True)\nmap.add_raster(\"flow_accum_new\", opacity=0.5)\nmap.add_raster(\"relief\", opacity=0.75)\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\nmap.add_vector(\"stl_park\", fill_color=\"none\", line_color=\"green\")\nmap.show()\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#lets-practice",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#lets-practice",
    "title": "Part 1. GRASS GIS 101",
    "section": "",
    "text": "Set the computational region to the cop-dem-glo-30 raster map."
  },
  {
    "objectID": "content/workshops/foss4gna_2024/workshop.html",
    "href": "content/workshops/foss4gna_2024/workshop.html",
    "title": "Developing web-application with GRASS GIS",
    "section": "",
    "text": "Welcome to the Developing Web Applications with GRASS GIS workshop! During this workshop you will learn how to create geospatial web applications using GRASS GIS, Actinia, and OpenPlains."
  },
  {
    "objectID": "content/workshops/foss4gna_2024/workshop.html#overview",
    "href": "content/workshops/foss4gna_2024/workshop.html#overview",
    "title": "Developing web-application with GRASS GIS",
    "section": "Overview",
    "text": "Overview\n\nGRASS GIS - is a raster and vector based geospatial processing engine.\nActinia - is the GRASS GIS REST API for scalable, distributed, high performance geospatial processing.\n\nPart 1. GRASS GIS 101 Learn the basics of using GRASS GIS within a Jupyter Notebook environment.\n\nhttps://colab.research.google.com/github/OpenPlainsInc/openplainsinc.github.io/blob/main/content/workshops/foss4gna_2024/intro_grass.ipynb\n\nPart 2. Introduction to Actinia Learn how to use actinia REST API.\nPart 3. Process Chains Learn how to turn your GRASS GIS process into an actinia process chain."
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#workshop-objective",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#workshop-objective",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "Workshop Objective",
    "text": "Workshop Objective\nAt the end of this workshop, you will be able to:\n\nUnderstand the basic concepts of GIS\nUnderstand the basic concepts of geoprocessing\nUnderstand the fundamentals of GRASS GIS\nPerform basic geoprocessing tasks with GRASS GIS\nUnderstand how to use GRASS GIS in a Jupyter notebook\nDevelop a basic workflow for geoprocessing tasks\nPublish a basic web map with geoprocessing results"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#install-grass-gis-and-data-in-google-colab",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#install-grass-gis-and-data-in-google-colab",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "Install GRASS GIS and Data in Google Colab",
    "text": "Install GRASS GIS and Data in Google Colab\nGoogle Colab is a free cloud service that allows you to run Python code in a Jupyter notebook environment. We will use Google Colab to run GRASS GIS and perform geoprocessing tasks.\n\n%%bash\n\napt-get install grass grass-dev grass-doc\n# leave the directory with source code\ncd ~\n\n# download sample data\nmkdir -p grassdata\nmkdir -p output\ncurl -SL https://grass.osgeo.org/sampledata/north_carolina/nc_basic_spm_grass7.zip &gt; nc_basic_spm_grass7.zip\nunzip -qq nc_basic_spm_grass7.zip\nmv nc_basic_spm_grass7 grassdata\nrm nc_basic_spm_grass7.zip\n\ncurl -SL https://storage.googleapis.com/public_grassdata/ncssm_workshop_data/ncssm.zip &gt; ncssm.zip\nunzip -qq ncssm.zip\nmv ncssm grassdata/nc_basic_spm_grass7\nrm ncssm.zip"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#what-is-gis",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#what-is-gis",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "What is GIS?",
    "text": "What is GIS?\nGIS (Geographic Information System) is a system designed to capture, store, manipulate, analyze, manage, and present spatial or geographic data. GIS applications are tools that allow users to create interactive queries (user-created searches), analyze spatial information, edit data in maps, and present the results of all these operations.\n\nGeospatial data\nGeospatial data is data that is associated with a particular location on the surface of the Earth. This data can be represented in many forms, such as vector data (points, lines, polygons), and raster data. Geospatial data can be used to answer questions such as “Where is the nearest hospital?” or “What is the likelihood of flooding at a given location?”.\n\nRaster Data\nRaster are a way of represent continuous or discrete spatial data in a grid format. Each cell in the grid has a value that represents a particular attribute. For example, a raster could represent the temperature of the Earth’s surface, with each cell representing the temperature at a particular location.\n\n\nVector Data\nVector data is represented as points, lines, and polygons on a map. Points are used to represent specific locations, such as the location of a tree or a building. Lines are used to represent linear features, such as roads or rivers. Polygons are used to represent areas, such as the boundaries of a city or a forest.\n\n\n\nGeospatial Data Collection\nGeospatial data is collected in many ways, such as:\nEarth Observation Systems (Satellites, Aircraft, UAS)\n\n\n\n\n\n\n\n\nSystem\nSpatial Resolution\nTemporal Resolution\n\n\n\n\nUAS\n2cm to 5cm RGB, Variable\nMultiple times daily\n\n\nPlanetScope\n3m RGB-NIR\nDaily\n\n\nLandsat 8\n30m multispectral, 15m panchromatic\n16 days\n\n\nSentinel-2\n10m visible and NIR, 20m SWIR\n5 days at equator\n\n\nMODIS (Terra and Aqua)\n250m for some bands; 500m and 1km for others\n1 to 2 days\n\n\nGOES\n0.5km visible, 2km infrared\nEvery 30 seconds to 15 minutes\n\n\nCopernicus Sentinel-1\n5 to 25m\n6 to 12 days\n\n\nALOS-2\n3 to 10m\n14 days\n\n\nNOAA-20\n375m\nDaily\n\n\nHimawari-8\n0.5 to 2km\n10 minutes for full disk, 2.5 minutes for Japan\n\n\nICESat-2\n17m along-track footprint\nRevisits every 91 days\n\n\n\nSensor Networks\nIn-situ sensor networks are used to collect data in the environment. Common use cases incldue weather stations, flood gauges, and air quality sensors.\n\n\n\nUSGS Stream Gauge\n\n\nMobile Devices\nMobile devices are used to collect data in the field. Common use cases include GPS data, photos, and field observations.\n\n\nCoordinate Reference Systems (CRS)\nCoordinate reference systems (CRS) are used to specify the location of a point on the Earth’s surface.\nGeodetic (Geographic) coordinate systems are used to specify the location of a point on the Earth’s surface using latitude and longitude (units degree:minutes:seconds).\nExample:\n\n-78.0, 35.0 (Durham, NC)\n\nUse Case:\n\nGPS coordinates\nLarge regions\nData Exchange\n\nThe most common CRS is the WGS84, which is used by GPS systems.\nProjected coordinate systems are used to represent the Earth’s surface on a flat map.\nProjected coordinate systems are a type of CRS that is used to represent the Earth’s surface on a flat map. Each version uses a different mathematical model to transform the Earth’s three-dimensional surface into a two-dimensional plane. The choice of a projected coordinate system depends on the region of interest and the purpose of the map.\nExample Developable Surfaces: - Cylindrical - Conic - azimuthal\nTypes of distortion: - Conformal - Equal Area - Equidistant\n\nIn North Carolina,NAD83 North Carolina State Plane (EPSG: 3358) is a commonly used projected coordinate system. It uses the Lambert Conformal Conic projection and has units of meters. You can find other various of CRS at epsg.io that can be used for different regions of the world.\nWeb Mapping & Pseudo-Mercator\nPseudo-Mercator (EPSG: 3857) is a projected coordinate system that is used by web mapping services such as Google Maps, OpenStreetMap, and Bing Maps. It uses the Mercator projection and has units of meters.\nEven though it is widely used for web mapping, it is not recommend for professional work because it has a high level of distortion at high latitudes and considers the Earth as a perfect sphere instead of an geoid.\nYou can see for yourself the distortion of the Mercator projection by using the The true size website.\nLearn More Learn more about Map projection transitions Look up CRS at epsg.io"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#introduction-grass-gis",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#introduction-grass-gis",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "Introduction GRASS GIS",
    "text": "Introduction GRASS GIS\n\nWhat is a Geospatial Processing Engine?\nA geospatial processing engine is a tool that allows to efficiently manipulate geospatial data through the development of scriptable geoprocesing workflows. Geoprocessing engines can be used on a local machine, distributed on the cloud, or on HPC (high performance computing) clusters (i.e., super computers).\nWith GRASS you can effiently process geospatial data with over 800 tools or develop your own models or tools using its C and Python APIs.\nThe tools are prefixed to reflect the type of data they are designe to work with.\n\n\n\n\n\n\n\n\nCategory\nDescription\nExamples\n\n\n\n\nDisplay (d.*)\ndisplay commands for graphical screen output\nd.rast, d.vect\n\n\nGeneral (g.*)\ngeneral file management commands\ng.list, g.copy\n\n\nRaster (r.*)\nraster processing commands\nr.slope.aspect, r.mapcalc\n\n\nVector (v.*)\nvector processing commands\nv.digit, v.to.rast\n\n\nImagery (i.*)\nimage processing commands\ni.atcorr, i.pansharpen\n\n\nDatabase (db.*)\ndatabase commands (SQLite, Postgresql, etc..)\ndb.select, db.in.ogr\n\n\nRaster 3D (r3.*)\n3D raster (voxel) processing commands\nr3.mapcalc, r3.gwflow\n\n\nTemporal (t.*)\nspatio-temporal data processing commands\nt.rast.aggregate, t.rast.series\n\n\nMiscellaneous (m.*)\nmiscellaneous commands\nm.proj, m.nviz.image\n\n\n\nGRASS GIS Reference Manual\n\n\nGRASS GIS Projects and Mapsets\nIn GRASS a project resprests a group of data that is all in the same CRS. Each project can have a collection of subprojects called mapsets. A mapset contains map layers in raster or vector format. Each project has a PERMANENT mapset that is used to store the original data.\nLearn More.\n\nCoordinate Reference Systems in GRASS GIS\nEvery project in GRASS GIS has a CRS. You can view the CRS of a project using the g.proj tool.\nWe are currently in the nc_basic_spm_grass7 project, which uses the NAD83 / North Carolina (meters) coordinate reference system (EPSG:3358).\n\n\n\nCreate a new GRASS GIS Mapset\nHere we will use the GRASS GIS shell command to create a new GRASS GIS mapset. The ! is used to run shell commands in a Jupyter notebook. The grass command is used to start GRASS GIS and the -c flag is used to create a new GRASS GIS mapset and -e tells the command to exit after it finishes.\n\n# ! means that we are running a command in the shell\n!grass -e -c ./grassdata/nc_basic_spm_grass7/tutorial\n\n# You can also create a new project using the Python API\n# gs.create_project('nc_basic_spm_grass7', 'grassdata/nc_basic_spm_grass7/tutorial', epsg=3358)"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#grass-gis-with-python",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#grass-gis-with-python",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "GRASS GIS with Python",
    "text": "GRASS GIS with Python\nGRASS GIS has two core libraries for working with geospatial data in Python:\n\ngrass.script - Python library for working with GRASS GIS modules\ngrass.pygrass - Python library for working with GRASS GIS data structures\n\nWe will use the grass.script as gs library to perform geoprocessing tasks in this workshop.\nFor interaction with Jupiter notebooks, we will use grass.jupyter as gj to display maps and other outputs.\n\nGRASS Python Environment Setup\nTo use GRASS GIS in Python, we need to set the GISBASE environment variable to the location of the GRASS GIS installation. We also need to add the GRASS GIS Python library to the Python path.\n\nimport os\nimport subprocess\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pprint import pprint\nfrom PIL import Image \nimport pandas as pd\nimport sqlite3\nfrom IPython.display import IFrame\nfrom IPython.display import display\n# Switch to the home directory\n# os.chdir(os.path.expanduser(\"~\")) # Colab only\n\n# Ask GRASS GIS where its Python packages are.\ngisbase = subprocess.check_output([\"grass\", \"--config\", \"path\"], text=True).strip()\nos.environ[\"GISBASE\"] = gisbase\n\n# Ask GRASS GIS where its Python packages are.\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n# Import the GRASS GIS packages we need.\nimport grass.script as gs\n\n# Import GRASS Jupyter\nimport grass.jupyter as gj\n\n\n\nGRASS GIS Session\nWith our Python environment setup we can start a GRASS GIS session using the gj.init function. Here we pass the the path to our project/mapset (nc_basic_spm_grass7/tutorial). This will allow us to exectute GRASS GIS commands in Python in the tutorial mapset.\n\n# Start a GRASS session\nsession = gj.init(\"./grassdata\", \"nc_basic_spm_grass7\", \"tutorial\")\n\nLet’s look at the details of the project CRS using the g.proj command.\n\ngs.run_command(\"g.proj\", flags=\"g\")\n\nname=Lambert Conformal Conic\nproj=lcc\ndatum=nad83\na=6378137.0\nes=0.006694380022900787\nlat_1=36.16666666666666\nlat_2=34.33333333333334\nlat_0=33.75\nlon_0=-79\nx_0=609601.22\ny_0=0\nno_defs=defined\nsrid=EPSG:3358\nunit=Meter\nunits=Meters\nmeters=1\n\n\n\n\nGRASS GIS Layers\nThe g.list command or the Python helper function gs.list_grouped let us list what data we have able in our project. We can search by data type and filter the data by mapset.\nHere we will list all the raster and vector data in the PERMANENT mapset.\n\ngs.list_grouped(type=\"raster\")['PERMANENT']\n\n['basins',\n 'elevation',\n 'elevation_shade',\n 'geology',\n 'lakes',\n 'landuse',\n 'soils']\n\n\n\ngs.list_grouped(type=\"vector\")['PERMANENT']\n\n['boundary_region',\n 'boundary_state',\n 'census',\n 'elev_points',\n 'firestations',\n 'geology',\n 'geonames',\n 'hospitals',\n 'points_of_interest',\n 'railroads',\n 'roadsmajor',\n 'schools',\n 'streams',\n 'streets',\n 'zipcodes']\n\n\nOur project has 7 raster and 15 layers for us to examine. However, we must first define computational region before we can work with the data.\n\n\nComputational Region\nIn GRASS GIS the region or computational region defines the spatial scale used during computation. Spatial scale reprents the resolution (i.e., grain) of each pixel and the total extent (i.e., area) of the raster.\nThe computational region impacts your analytical results and the amount of time it takes to process data. You can change the spatial scale by defining regions extent and upscaling (finer data, increased resolution) or downscale (coarser data, decrease resolution) the data.\nWe can view and set the computational region using the g.region command or the pygrass function gs.region. The raster flag is used to set the region to the extent of a raster layer. The res flag is used to set the resolution of the region.\nFirst, let’s view the current computational region.\n\n# Prints the current computational region\ngs.region()\n\n{'projection': 99,\n 'zone': 0,\n 'n': 228500.0,\n 's': 215000.0,\n 'w': 630000.0,\n 'e': 645000.0,\n 'nsres': 10.0,\n 'ewres': 10.0,\n 'rows': 1350,\n 'cols': 1500,\n 'cells': 2025000}\n\n\nNow set the computational region to the spatial scale of the elevation raster layer. The elevation raster data is a Digital Elevation Model (DEM) of the area around Wake County, North Carolina.\n\ngs.region(\"elevation\")\n\n{'projection': 99,\n 'zone': 0,\n 'n': 228500.0,\n 's': 215000.0,\n 'w': 630000.0,\n 'e': 645000.0,\n 't': 1.0,\n 'b': 0.0,\n 'nsres': 10.0,\n 'nsres3': 10.0,\n 'ewres': 10.0,\n 'ewres3': 10.0,\n 'tbres': 1.0,\n 'rows': 1350,\n 'rows3': 1350,\n 'cols': 1500,\n 'cols3': 1500,\n 'depths': 1,\n 'cells': 2025000,\n 'cells3': 2025000}\n\n\n\nAdjusting the Computational Region\nWith raster data we can use spatial interpolation to resample our data.\n\nNote: We use different methods for continuous and discrete spatial data.\n\n\nHere the elevation raster layer is resampled using bliniear interpolation so that each cell has a resolution of 250m, 500m, and 1000m using r.resample.interp.\n# Set the computational region to the extent of the elevation raster layer with a resolution of 250m making sure to align the region with the rasters grid\ngs.run_command('g.region', raster='elevation', res=250, flags='a')\n\n# Resample the elevation raster layer to 250m resolution using bilinear interpolation\ngs.run_command('r.resamp.interp', input='elevation', output='elevation_250m', method='bilinear')\nWhat impact does resampling have on our evelation data?\n\n\n\nelevation_sc\n\n\nLet’s look at what happends when we resample discete raster data like landuse.\n# Set the computational region to the extent of the landuse raster layer with a resolution of 250m making sure to align the region with the rasters grid\ngs.run_command('g.region', raster='landuse', res=250, flags='a')\n\n# Resample the landuse raster layer to 250m resolution using nearest neighbor interpolation\ngs.run_command('r.resamp.interp', input='landuse', output='landuse_250m', method='nearest')\n\n\n\ndiscete\n\n\n\n\n\nProcessing Data\nNow that we have set the computational region, we can perform geoprocessing tasks on the data. Here we will use the r.slope.aspect tool to calculate the slope and aspect of the elevation raster layer by running the tool with gs.run_command. The run_command should be used when you do not need a return value from the tool.\n\ngs.run_command(\"r.slope.aspect\", elevation=\"elevation\", slope=\"slope\", aspect=\"aspect\")\n\nThe slope represents the steepest slope (maximum gradient) angle in degrees from the horizontal plane. The aspect represents the direction that the slope faces.\nWe can create a DataFrame of the univariate statistics from the slope layer using the r.univar tool by running the tool with gs.parse_command and setting the format to json.\n\nimport json\n\nslope_stats_json = gs.read_command(\"r.univar\", map=\"slope\", format=\"json\", flags=\"e\")\nslope_stats_dict = json.loads(slope_stats_json)\ndf_slope = pd.DataFrame(slope_stats_dict)\ndf_slope = df_slope.T.reset_index()\ndf_slope.columns = [\"statistic\", \"value\"]\ndf_slope.head(15)\n\n\n\n\n\n\n\n\nstatistic\nvalue\n\n\n\n\n0\nn\n2019304\n\n\n1\nnull_cells\n5696\n\n\n2\ncells\n2025000\n\n\n3\nmin\n0\n\n\n4\nmax\n38.689392\n\n\n5\nrange\n38.689392\n\n\n6\nmean\n3.864522\n\n\n7\nmean_of_abs\n3.864522\n\n\n8\nstddev\n3.007914\n\n\n9\nvariance\n9.047547\n\n\n10\ncoeff_var\n77.834045\n\n\n11\nsum\n7803645.553885\n\n\n12\nfirst_quartile\n1.854639\n\n\n13\nmedian\n3.215121\n\n\n14\nthird_quartile\n5.024211\n\n\n\n\n\n\n\n\n\nDate Visualization\n\nMaps\nMap layers can be displayed using the GRASS Jupyter function gj.Map to create a map object. Map objects can use GRASS display tools like d.rast and d.vect to visualize vector and raster map layers.\n\ndem_map = gj.Map() # Create a map object\ndem_map.d_rast(map=\"elevation\") # Add the raster map to the map object\ndem_map.d_vect(map=\"roadsmajor\", color=\"black\") # Add the vector map to the map object\n\n# Add a raster legend\ndem_map.d_legend(\n    raster=\"elevation\",\n    at=(5,40,5,9),\n    title=\"Elevation (m)\",\n    font=\"sans\",\n    flags=\"b\"\n) \ndem_map.d_barscale(at=(50,7), flags=\"n\") # Add a scale bar to the map\ndem_map.show() # Display the map\n\n\n\n\n\n\n\n\nLet’s overlay the elevation data over the aspect to see how the terrain looks with shaded relief.\n\ndem_map = gj.Map() # Create a map object\ndem_map.d_shade(color=\"elevation\", shade=\"aspect\") # Add a shaded relief map\ndem_map.d_vect(map=\"roadsmajor\", color=\"black\") # Add the vector map to the map object\n\n# Add a raster legend\ndem_map.d_legend(\n    raster=\"elevation\",\n    at=(5,40,5,9),\n    title=\"Elevation (m)\",\n    font=\"sans\",\n    flags=\"b\"\n) \ndem_map.d_barscale(at=(50,7), flags=\"n\") # Add a scale bar to the map\ndem_map.show() # Display the map\n\n\n\n\n\n\n\n\nWe can also change the color scheme of our map layers using the r.colors tool. Here we will change the color scheme of the aspect layer to aspectcolr.\n\ngs.run_command(\"r.colors\", map=\"aspect\", color=\"aspectcolr\")\n\n\ndem_shade_map = gj.Map() # Create a map object\ndem_shade_map.d_shade(color=\"aspect\", shade=\"aspect\") # Add a shaded relief map\ndem_shade_map.d_legend(raster=\"aspect\", at=(5,50,5,9), flags=\"b\") # Add a raster legend\ndem_shade_map.d_barscale(at=(50,7,1,1), flags=\"n\") # Add a scale bar to the map\ndem_shade_map.show() # Display the map\n\n\n\n\n\n\n\n\n\n\n3D Maps\nGRASS GIS can also create 3D maps using the nviz tool. The nviz tool allows you to visualize raster and vector data in 3D space. Here we will create a 3D map of the elevation data overlayed with the landuse data.\n\nelevation_3dmap = gj.Map3D(use_region=False, width=800, height=600)\n# Full list of options m.nviz.image\n# https://grass.osgeo.org/grass-stable/manuals/m.nviz.image.html\nelevation_3dmap.render(\n    elevation_map=\"elevation\",\n    color_map=\"landuse\",\n    perspective=35,\n    height=5000,\n    resolution_fine=1,\n    zexag=5,\n    fringe=['ne','nw','sw','se'],\n    fringe_elevation=10,\n    arrow_position=[100,50],\n)\nelevation_3dmap.overlay.d_barscale(at=(60,10), flags=\"\")\nelevation_3dmap.overlay.d_legend(raster=\"landuse\", at=(5,35,5,9), flags=\"b\")\nelevation_3dmap.show()\n\n\n\n\n\n\n\n\n\n\nWeb Maps\n\nelevation_map = gj.InteractiveMap(width=800, height=600)\nelevation_map.add_raster(\"aspect\", opacity=0.5)\nelevation_map.add_raster(\"elevation\", opacity=0.7)\nelevation_map.add_vector(\"roadsmajor\")\ndisplay(elevation_map.show())"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#ncssm-ndvi-watershed-analysis",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#ncssm-ndvi-watershed-analysis",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "NCSSM NDVI & Watershed Analysis",
    "text": "NCSSM NDVI & Watershed Analysis\n\ngj.init(\"./grassdata/nc_basic_spm_grass7/ncssm\")\n\n&lt;grass.jupyter.setup._JupyterGlobalSession at 0x76f9ea3dfc40&gt;\n\n\n\ngs.run_command(\"g.region\", raster=\"ncssm_be_1m\", res=1, flags=\"ap\")\n\nprojection: 99 (Lambert Conformal Conic)\nzone:       0\ndatum:      nad83\nellipsoid:  a=6378137 es=0.006694380022900787\nnorth:      252984\nsouth:      251460\nwest:       615696\neast:       617223\nnsres:      1\newres:      1\nrows:       1524\ncols:       1527\ncells:      2327148\n\n\n\nmap = gj.Map()\nmap.d_rast(map=\"naip_2022_rgb\")\nmap.d_vect(map=\"ncssm\", fill_color=\"none\", color=\"white\", width=2)\nmap.d_vect(map=\"open_channels\", color=\"#7fcdbb\", width=2)\nmap.d_vect(map=\"roads\")\nmap.d_vect(map=\"greenways\", color=\"green\")\nmap.d_vect(map=\"sidewalks\", color=\"grey\")\nmap.d_barscale(at=(10,7), flags=\"n\")\nmap.show()\n\n\n\n\n\n\n\n\n\nSlope & Aspect\n\ngs.run_command(\n    \"r.slope.aspect\",\n    elevation=\"ncssm_be_1m\",\n    slope=\"slope\",\n    aspect=\"aspect\",\n    dx=\"dx\",\n    dy=\"dy\",\n    overwrite=True\n)\n\n\nncssm_map = gj.Map()\nncssm_map.d_shade(color=\"ncssm_be_1m\", shade=\"aspect\")\nncssm_map.d_vect(map=\"ncssm\", fill_color=\"none\", color=\"white\", width=2)\nncssm_map.d_vect(map=\"roads\")\nncssm_map.d_legend(raster=\"ncssm_be_1m\", at=(5,50,5,9), flags=\"b\")\nncssm_map.d_barscale(at=(20,8), flags=\"n\", length=250)\nncssm_map.show()\n\n\n\n\n\n\n\n\n\n\nNDVI (Normalized Difference Vegetation Index)\nNDVI is a simple calculation that measure chlorophyll absorbtion in plants. It utilizes the Red and Near-Infrared (NIR) light to produce an index between -1 and 1 where 1 represents healthy vegetation and values less than or equal to 0 represent bare earth or other forms of imperious surface.\n\\[ NDVI = \\frac{(NIR - Red)}{(NIR + Red)} \\]\n\ngs.run_command(\n    \"i.vi\",\n    viname=\"ndvi\",\n    red=\"naip2022.red\",\n    nir=\"naip2022.nir\",\n    output=\"naip2022_ndvi\"\n)\n\nLet’s viusalize the NDVI for the area around NCSSM.\n\nndvi_map = gj.Map()\nndvi_map.d_shade(color=\"naip2022_ndvi\", shade=\"aspect\", brighten=30)\nndvi_map.d_vect(map=\"ncssm\", fill_color=\"none\", color=\"#FFE599\", width=2)\nndvi_map.d_vect(map=\"roads\")\nndvi_map.d_barscale(at=(20,8), flags=\"n\", length=250)\nndvi_map.d_legend(raster=\"naip2022_ndvi\", at=(5,50,5,9), flags=\"b\")\nndvi_map.show()\n\n\n\n\n\n\n\n\n\n3D Map\n\nDoes not work in Google Colab\n\n\nelevation_3dmap = gj.Map3D(use_region=False)\n# Full list of options m.nviz.image\n# https://grass.osgeo.org/grass83/manuals/m.nviz.image.html\nelevation_3dmap.render(\n    elevation_map=\"ncssm_1m\",\n    color_map=\"naip2022_ndvi\",\n    perspective=20,\n    height=3000,\n    resolution_fine=1,\n    zexag=1,\n    # fringe=['ne','nw','sw','se'],\n    fringe_elevation=0,\n    arrow_position=[100,50],\n)\nelevation_3dmap.show()\n\n\n\n\n\n\n\n\n\n\n\nWatershed\n\ngs.run_command(\n    \"r.watershed\", \n    elevation=\"ncssm_be_1m\", \n    threshold=10000,\n    accumulation=\"accum10k\",\n    drainage=\"direction10k\",\n    basin=\"basins10k\", \n    stream=\"streams10k\", \n    memory=300\n)\n\n\nBasins\n\nbasins10k_map = gj.Map()\nbasins10k_map.d_shade(color=\"basins10k\", shade=\"aspect\")\nbasins10k_map.d_vect(map=\"ncssm\", fill_color=\"none\", color=\"white\", width=2)\nbasins10k_map.d_vect(map=\"roads\")\nbasins10k_map.d_barscale(at=(50,7,1,1), flags=\"n\")\nbasins10k_map.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\n    \"r.stats.zonal\",\n    base=\"basins10k\",\n    cover=\"naip2022_ndvi\",\n    method=\"average\",\n    output=\"basins10k_ndvi_avg\", \n    flags=\"c\"\n)\n\n\ngs.run_command(\"r.to.vect\", input=\"basins10k\", output=\"basins10k\", type=\"area\", flags=\"v\")\n\n\n# Change the map color\ngs.run_command(\"r.colors\", map=\"basins10k_ndvi_avg\", color=\"ndvi\", flags=\"\")\n\nbasins10k_map = gj.Map()\nbasins10k_map.d_shade(color=\"basins10k_ndvi_avg\", shade=\"aspect\")\nbasins10k_map.d_vect(map=\"ncssm\", fill_color=\"none\", color=\"white\", width=2)\nbasins10k_map.d_vect(map=\"roads\")\nbasins10k_map.d_vect(map=\"basins10k\", color=\"black\", fill_color=\"none\", width=1.5)\nbasins10k_map.d_barscale(at=(20,8), flags=\"n\", length=250)\nbasins10k_map.d_legend(raster=\"naip2022_ndvi\", at=(5,50,5,9), flags=\"b\")\nbasins10k_map.show()\n\n\n\n\n\n\n\n\n\n\nStreams\n\ngs.run_command(\"r.thin\", input=\"streams10k\", output=\"streams10k_thin\")\ngs.run_command(\"r.to.vect\", flags=\"s\", input=\"streams10k_thin\", output=\"streams\", type=\"line\")\n\n\nmap = gj.Map()\nmap.d_rast(map=\"naip_2022_rgb\")\nmap.d_vect(map=\"ncssm\", fill_color=\"none\", color=\"white\", width=2)\nmap.d_vect(map=\"open_channels\", color=\"#7fcdbb\", width=1)\n\nmap.d_vect(map=\"roads\")\nmap.d_vect(map=\"greenways\", color=\"green\")\nmap.d_vect(map=\"sidewalks\", color=\"grey\")\nmap.d_vect(map=\"streams\", color=\"blue\", width=2)\nmap.d_barscale(at=(10,7), flags=\"n\")\nmap.show()\n\n\n\n\n\n\n\n\n\n\n\nEstimate Flood Innundation\nLet’s estimate the flood inundation for the area around NCSSM using the Height Above Nearest Drainage methodology (A.D. Nobre, 2011). First need to install two GRASS addons r.stream.distance and r.lake.series to calculate the distance to the nearest stream and create a flood inundation map.\n\ngs.run_command(\"g.extension\", extension=\"r.stream.distance\")\ngs.run_command(\"g.extension\", extension=\"r.lake.series\")\n\nYour branch is up to date with 'origin/grass8'.\n\n\nHere we will simulate the flood inundation extent starting from \\(0 m\\) to \\(5 m\\) above the nearest stream.\n\ngs.run_command(\"r.stream.distance\", stream_rast=\"streams10k\", direction=\"direction10k\", elevation=\"ncssm_be_1m\", method=\"downstream\", difference=\"above_stream\")\ngs.run_command(\"r.lake.series\", elevation=\"above_stream\", start_water_level=0, end_water_level=5, water_level_step=0.5, output=\"flooding\", seed=\"streams10k\")\n\nWe can visulize the flood event from using the time series of the flood stages using gj.TimeSeries.\n\nflood_map = gj.TimeSeriesMap()\nflood_map.d_rast(map=\"naip_2022_rgb\")\nflood_map.d_vect(map=\"ncssm\", fill_color=\"none\", color=\"white\", width=2)\nflood_map.d_vect(map=\"roads\")\nflood_map.add_raster_series(\"flooding\")\nflood_map.d_legend()\nflood_map.save(\"output/flooding.gif\")\nflood_map.show()\n\n\n\n\n\n\n\nEst. Flood Inundation\n\n\nWe can further analysze our results by looking at the r.univar statistics of the flood inundation layers.\n\nimport io\n\nflood_output = gs.read_command(\"t.rast.univar\", input=\"flooding\", separator=\"comma\")\nprint(flood_output)\ndf_flood = pd.read_csv(io.StringIO(flood_output), sep=\",\")\ndf_flood.head()\n\nid,semantic_label,start,end,mean,min,max,mean_of_abs,stddev,variance,coeff_var,sum,null_cells,cells,non_null_cells\nflooding_0.0@ncssm,,1,None,0.293114999222854,3.0517578125e-05,6.39630126953125,0.293114999222854,0.530534688513158,0.281467055715753,180.998819548567,3598.57284545898,2314871,12277,12277\nflooding_0.5@ncssm,,31,None,0.3905529433589,3.0517578125e-05,6.89630126953125,0.3905529433589,0.403808791069356,0.163061539744895,103.3941231108,59409.3515319824,2175032,152116,152116\nflooding_1.0@ncssm,,61,None,0.655780018643008,3.0517578125e-05,7.39630126953125,0.655780018643008,0.451270096181418,0.203644699707586,68.8142491921639,160044.425109863,2083096,244052,244052\nflooding_1.5@ncssm,,91,None,0.944751617646385,3.0517578125e-05,7.89630126953125,0.944751617646385,0.552086194782351,0.304799166469256,58.4371790923986,302084.329742432,2007398,319750,319750\nflooding_2.0@ncssm,,121,None,1.24039884684191,3.0517578125e-05,8.39630126953125,1.24039884684191,0.676488838166942,0.457637148164459,54.5380092773629,480802.160614014,1939529,387619,387619\nflooding_2.5@ncssm,,151,None,1.53000738919042,3.0517578125e-05,8.89630126953125,1.53000738919042,0.813864130666759,0.662374823185959,53.1934771306826,691632.190246582,1875103,452045,452045\nflooding_3.0@ncssm,,181,None,1.82265329658102,3.0517578125e-05,9.39630126953125,1.82265329658102,0.954796133406397,0.911635656367807,52.3849563269892,933338.83215332,1815071,512077,512077\nflooding_3.5@ncssm,,211,None,2.11564680335754,3.0517578125e-05,9.89630126953125,2.11564680335754,1.09842635059298,1.20654044767702,51.9191742614966,1204911.6300354,1757624,569524,569524\nflooding_4.0@ncssm,,241,None,2.40876133883238,3.0517578125e-05,10.3963012695312,2.40876133883238,1.24426257488545,1.54818935526058,51.6557018259267,1503647.58691406,1702907,624241,624241\nflooding_4.5@ncssm,,271,None,2.69678338183056,3.0517578125e-05,10.8963012695312,2.69678338183056,1.39404248607332,1.94335445297749,51.6927868758616,1829737.85995483,1648659,678489,678489\nflooding_5.0@ncssm,,301,None,2.9949480126371,3.0517578125e-05,11.3963012695312,2.9949480126371,1.53763176419292,2.36431144225502,51.3408499147538,2182355.72290039,1598469,728679,728679\n\n\n\n\n\n\n\n\n\n\nid\nsemantic_label\nstart\nend\nmean\nmin\nmax\nmean_of_abs\nstddev\nvariance\ncoeff_var\nsum\nnull_cells\ncells\nnon_null_cells\n\n\n\n\n0\nflooding_0.0@ncssm\nNaN\n1\nNaN\n0.293115\n0.000031\n6.396301\n0.293115\n0.530535\n0.281467\n180.998820\n3598.572845\n2314871\n12277\n12277\n\n\n1\nflooding_0.5@ncssm\nNaN\n31\nNaN\n0.390553\n0.000031\n6.896301\n0.390553\n0.403809\n0.163062\n103.394123\n59409.351532\n2175032\n152116\n152116\n\n\n2\nflooding_1.0@ncssm\nNaN\n61\nNaN\n0.655780\n0.000031\n7.396301\n0.655780\n0.451270\n0.203645\n68.814249\n160044.425110\n2083096\n244052\n244052\n\n\n3\nflooding_1.5@ncssm\nNaN\n91\nNaN\n0.944752\n0.000031\n7.896301\n0.944752\n0.552086\n0.304799\n58.437179\n302084.329742\n2007398\n319750\n319750\n\n\n4\nflooding_2.0@ncssm\nNaN\n121\nNaN\n1.240399\n0.000031\n8.396301\n1.240399\n0.676489\n0.457637\n54.538009\n480802.160614\n1939529\n387619\n387619\n\n\n\n\n\n\n\n\nax = df_flood.plot(x=\"start\", y=\"mean\", title=\"Mean flooding depth over time\", label=\"Mean\")\ndf_flood.plot(x=\"start\", y=\"min\", ax=ax, style='--', label=\"Min\", color='gray')\ndf_flood.plot(x=\"start\", y=\"max\", ax=ax, style='--', label=\"Max\", color='gray')\nax.fill_between(df_flood[\"start\"], df_flood[\"min\"], df_flood[\"max\"], color='gray', alpha=0.3)\nplt.ylabel(\"Flooding depth (m)\")\nplt.xlabel(\"Time (minutes)\")\nplt.show()\n\n\n\n\n\n\n\n\n\ndf_flood['extent_km2'] = df_flood['cells'] * 0.000001\nax = df_flood.plot(x=\"start\", y=\"extent_km2\", title=\"Inundation Extent\", label=\"Extent\")\nax.axhline(y=2327148 * 0.000001, color='gray', linestyle='--', label='Study Area Extent')\nplt.legend()\nplt.ylabel(\"Inundation Extent (km2)\")\nplt.xlabel(\"Time (minutes)\")\nplt.show()\n\n\n\n\n\n\n\n\n\nInteractive Estimated Flood Inundation Map\n\nflood_map = gj.InteractiveMap(height=800,width=800)\nflood_map.add_raster(\"naip_2022_rgb\")\nflood_map.add_raster(\"flooding_5.0\")\nflood_map.add_vector(\"streams@ncssm\")\nflood_map.add_layer_control()\ndisplay(flood_map.show())\n\n\n\n\n\n\nExport Map as HTML\n\nflood_map.save(filename=\"./output/index.html\")"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#create-a-new-project-location-and-mapset",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#create-a-new-project-location-and-mapset",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "Create a new Project (Location and Mapset)",
    "text": "Create a new Project (Location and Mapset)\nCreate a new subproject (i.e. Mapset)\nThis example uses a temprary directory to create a new project call myfirstproject with the EPSG:3358 CRS.\nfrom pathlib import Path\nimport tempfile\n\ntempdir = tempfile.TemporaryDirectory()\n\ngs.create_project(path=tempdir, name=\"myfirstproject\", epsg=\"3358\")\nStart a new GRASS GIS session in the new subproject\ngj.init(Path(tempdir.name), \"myfirstproject\")\n\nLocal Data Resources\n\nWhere can I get my own geospatial data?\nNorth Carolina Online Data Portals\n\nNC OneMap\nDurham OpenData Portal\n\n\n# Point Data\nhospitals = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Community/MapServer/0/query?outFields=*&where=1%3D1f=geojson\"\nschools = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Education/MapServer/0/query?outFields=*&where=1%3D1&f=geojson\"\n\n# Line Data\nroads = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Transportation/MapServer/6/query?outFields=*&where=1%3D1f=geojson\"\ngreenways = \"https://webgis2.durhamnc.gov/server/rest/services/ProjectServices/Trans_ExistingFutureBikePedFacilities/MapServer/1/query?outFields=*&where=1%3D1f=geojson\"\nsidewalks = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Community/MapServer/5/query?outFields=*&where=1%3D1f=geojson\"\n\n# Polygon Datahttps://earth.nullschool.net\nzipcodes = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Administrative/MapServer/0/query?outFields=*&where=1%3D1f=geojson\"\ncounty_boundary = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Administrative/MapServer/2/query?outFields=*&where=1%3D1f=geojson\"\ndurham_city_boundary = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Administrative/MapServer/1/query?outFields=*&where=1%3D1f=geojson\"\nschool_districts = \"https://webgis2.durhamnc.gov/server/rest/services/PublicServices/Education/MapServer/1/query?outFields=*&where=1%3D1f=geojson\"\n\n\n!v.import --help\n\nImports vector data into a GRASS vector map using OGR library and reprojects on the fly.\n\nUsage:\n v.import [-flo] input=string [layer=string[,string,...]] [output=name]\n   [extent=string] [encoding=string] [snap=value] [epsg=value]\n   [datum_trans=value] [--overwrite] [--help] [--verbose] [--quiet]\n   [--ui]\n\nFlags:\n  -f   List supported OGR formats and exit\n  -l   List available OGR layers in data source and exit\n  -o   Override projection check (use current location's projection)\n\nParameters:\n        input   Name of OGR datasource to be imported\n        layer   OGR layer name. If not given, all available layers are imported\n       output   Name for output vector map (default: input)\n       extent   Output vector map extent\n                options: input,region\n                default: input\n     encoding   Encoding value for attribute data\n         snap   Snapping threshold for boundaries (map units)\n                default: -1\n         epsg   EPSG projection code\n                options: 1-1000000\n  datum_trans   Index number of datum transform parameters\n                options: -1-100\n\n\n\n!r.import --help\n\nImports raster data into a GRASS raster map using GDAL library and reprojects on the fly.\n\nUsage:\n r.import [-enlo] input=name [band=value[,value,...]]\n   [memory=memory in MB] [output=name] [resample=string] [extent=string]\n   [resolution=string] [resolution_value=value] [title=phrase]\n   [--overwrite] [--help] [--verbose] [--quiet] [--ui]\n\nFlags:\n  -e   Estimate resolution only\n  -n   Do not perform region cropping optimization\n  -l   Force Lat/Lon maps to fit into geographic coordinates (90N,S; 180E,W)\n  -o   Override projection check (use current location's projection)\n\nParameters:\n             input   Name of GDAL dataset to be imported\n              band   Input band(s) to select (default is all bands)\n            memory   Maximum memory to be used (in MB)\n                     default: 300\n            output   Name for output raster map\n          resample   Resampling method to use for reprojection\n                     options: nearest,bilinear,bicubic,lanczos,bilinear_f,\n                              bicubic_f,lanczos_f\n                     default: nearest\n            extent   Output raster map extent\n                     options: input,region\n                     default: input\n        resolution   Resolution of output raster map (default: estimated)\n                     options: estimated,value,region\n                     default: estimated\n  resolution_value   Resolution of output raster map (use with option resolution=value)\n             title   Title for resultant raster map"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#install-add-ons",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#install-add-ons",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "Install Add-Ons",
    "text": "Install Add-Ons\nAdd-On Index\n\n!g.extension --help\n\nMaintains GRASS Addons extensions in local GRASS installation.\n\nUsage:\n g.extension [-lcgasdifto] extension=name operation=string [url=url]\n   [prefix=path] [proxy=proxy[,proxy,...]] [branch=branch] [--help]\n   [--verbose] [--quiet] [--ui]\n\nFlags:\n  -l   List available extensions in the official GRASS GIS Addons repository\n  -c   List available extensions in the official GRASS GIS Addons repository including module description\n  -g   List available extensions in the official GRASS GIS Addons repository (shell script style)\n  -a   List locally installed extensions\n  -s   Install system-wide (may need system administrator rights)\n  -d   Download source code and exit\n  -i   Do not install new extension, just compile it\n  -f   Force removal when uninstalling extension (operation=remove)\n  -t   Operate on toolboxes instead of single modules (experimental)\n  -o   url refers to a fork of the official extension repository\n\nParameters:\n  extension   Name of extension to install or remove\n  operation   Operation to be performed\n              options: add,remove\n              default: add\n        url   URL or directory to get the extension from (supported only on Linux and Mac)\n     prefix   Prefix where to install extension (ignored when flag -s is given)\n              default: $GRASS_ADDON_BASE\n      proxy   Set the proxy with: \"http=&lt;value&gt;,ftp=&lt;value&gt;\"\n     branch   Specific branch to fetch addon from (only used when fetching from git)"
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#teacher",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#teacher",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "Teacher",
    "text": "Teacher\nDr. Corey T. White is a geospatial scientist and educator with over 20 years of experience in the field of geospatial science. He is the founder of OpenPlains, an interactive geospatial modeling platform for climate-resilience. Dr. White has a Ph.D. in Geospatial Analytics from North Carolina State University and teaches geospatial modeling and UAS mapping at the Center for Geospatial Analytics at NC State University."
  },
  {
    "objectID": "content/workshops/smackhack25/ncssm_workshop.html#instructor",
    "href": "content/workshops/smackhack25/ncssm_workshop.html#instructor",
    "title": "Intro to Geoprocessing with GRASS GIS",
    "section": "Instructor",
    "text": "Instructor\nDr. Corey T. White is a geospatial scientist and educator with over 20 years of experience in the field of geospatial science. He is the founder of OpenPlains, an interactive geospatial modeling platform for climate-resilience. Dr. White has a Ph.D. in Geospatial Analytics from North Carolina State University and teaches geospatial modeling and UAS mapping at the Center for Geospatial Analytics at NC State University."
  }
]