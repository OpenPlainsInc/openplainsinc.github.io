[
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html",
    "title": "Introduction to Actinia",
    "section": "",
    "text": "GRASS GIS is a Geospatial Processing Engine\nOpen Source (GPL v2)\nDeveloped by International and Multi-institutional groups and individuals (GRASS Development Team)\nMember of the Open Source Geospatial Foundatispace\nRecieved Open Source Security Foundation (OpenSSF) Best Practices Badge - 2024\n\n\n\n\n\n\nflowchart LR\n  A[Client] --&gt;|Http Request| B{Actinia REST API}\n  B &lt;--&gt; D[GRASS GIS Processing Node]\n  B --&gt;|Http Response| A\n\n\n\n\n\n\n\nprint(\"hello world\")\n\nhello world"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_actinia.html#rest-api-for-grass-gis",
    "href": "content/workshops/foss4gna_2024/intro_actinia.html#rest-api-for-grass-gis",
    "title": "Introduction to Actinia",
    "section": "",
    "text": "GRASS GIS is a Geospatial Processing Engine\nOpen Source (GPL v2)\nDeveloped by International and Multi-institutional groups and individuals (GRASS Development Team)\nMember of the Open Source Geospatial Foundatispace\nRecieved Open Source Security Foundation (OpenSSF) Best Practices Badge - 2024\n\n\n\n\n\n\nflowchart LR\n  A[Client] --&gt;|Http Request| B{Actinia REST API}\n  B &lt;--&gt; D[GRASS GIS Processing Node]\n  B --&gt;|Http Response| A\n\n\n\n\n\n\n\nprint(\"hello world\")\n\nhello world"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#from-academia-to-startup",
    "href": "content/presentations/foss4gna_2024_openplains.html#from-academia-to-startup",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "From Academia to Startup",
    "text": "From Academia to Startup\n\nGRASS is a geoprocessing engine\nNot your papi’s GIS"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#nsf-i-corps",
    "href": "content/presentations/foss4gna_2024_openplains.html#nsf-i-corps",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "NSF I-Corps",
    "text": "NSF I-Corps\n\nDesktop\nHPC\nCloud"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#riot-accelerator-program",
    "href": "content/presentations/foss4gna_2024_openplains.html#riot-accelerator-program",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "Riot Accelerator Program",
    "text": "Riot Accelerator Program"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#funding",
    "href": "content/presentations/foss4gna_2024_openplains.html#funding",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "Funding",
    "text": "Funding"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#failures",
    "href": "content/presentations/foss4gna_2024_openplains.html#failures",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "Failures",
    "text": "Failures"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#success",
    "href": "content/presentations/foss4gna_2024_openplains.html#success",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "Success",
    "text": "Success"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#community",
    "href": "content/presentations/foss4gna_2024_openplains.html#community",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "Community",
    "text": "Community"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_openplains.html#conflict",
    "href": "content/presentations/foss4gna_2024_openplains.html#conflict",
    "title": "OpenPlains Inc.: A First-Year Retrospective",
    "section": "Conflict",
    "text": "Conflict"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OpenPlains - Learning",
    "section": "",
    "text": "OpenPlains Inc.: A First-Year Retrospective\n\n\nFOSS4G NA 2024, St. Louis Missouri\n\n\n\ngeoprocessing\n\n\nfoss4gna\n\n\npresentation\n\n\nuse Case and applications\n\n\n\n\n\n\n\n\n\nSep 10, 2024\n\n\nCorey T. White\n\n\n\n\n\n\n\n\n\n\n\n\nGRASS GIS as Geocomputational Engine\n\n\nFOSS4G NA 2024, St. Louis Missouri\n\n\n\n\n\n\n\n\nSep 10, 2024\n\n\nCorey White, Vaclav Petras, Markus Neteler\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Actinia\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nlidar\n\n\nSTAC\n\n\n\n…\n\n\n\n\n\nSep 10, 2024\n\n\nCorey T. White\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to GRASS GIS\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nlidar\n\n\nSTAC\n\n\n\nLearn the basics of GRASS GIS, a powerful open-source geospatial procesing engine.\n\n\n\n\n\nSep 10, 2024\n\n\nCorey T. White\n\n\n\n\n\n\n\n\n\n\n\n\nDeveloping web-application with GRASS GIS\n\n\nFOSS4G NA 2024, St. Louis Missouri\n\n\n\nworkshop\n\n\nfoss4gna\n\n\nwebdev\n\n\ngrass\n\n\n\n\n\n\n\n\n\nSep 9, 2024\n\n\nCorey T. White, Vaclav Petras\n\n\n\n\n\n\n\n\n\n\n\n\nSTAC Tutorial\n\n\n\n\n\n\nstac\n\n\ngrass-addon\n\n\ntutorial\n\n\n\n\n\n\n\n\n\nAug 26, 2024\n\n\nCorey T. White\n\n\n\n\n\n\n\n\n\n\n\n\nGeoprocessing with GRASS GIS and Jupyter Notebooks\n\n\n\n\n\n\ngeospatial\n\n\nGRASS v8.5\n\n\njupyter\n\n\nlidar\n\n\nSTAC\n\n\n\nThis tutorial demonstrates how to use GRASS GIS in Jupyter Notebooks.\n\n\n\n\n\nAug 22, 2024\n\n\nCorey T. White\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#grass-v8.5-preview",
    "href": "content/notebooks/us_doi/grass_jupyter.html#grass-v8.5-preview",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "GRASS v8.5 (Preview)",
    "text": "GRASS v8.5 (Preview)\n\nGRASS GIS is a Geospatial Processing Engine\nOpen Source (GPL v2)\nDeveloped by International and Multi-institutional groups and individuals (GRASS Development Team)\nMember of the Open Source Geospatial Foundatispace\nRecieved Open Source Security Foundation (OpenSSF) Best Practices Badge - 2024\n\n\nModern Tooling\n\nJupyter Notebooks\nGRASS GIS Python API\nActinia REST API\nEasy intergration with other Data Science tools in Python and R ecosystem\n\n\n\nCommunity\n\nActive community of users and developers\nMailing lists, chat, and forums\nConferences and workshops\nDocumentation and tutorials\nMentoring and outreach programs\n\n\n\nLeader in Open Science\n\nOpen Access\nCommunity Mantaince and Support\nReproducible Research\nCitations"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#setup-environment",
    "href": "content/notebooks/us_doi/grass_jupyter.html#setup-environment",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Setup Environment",
    "text": "Setup Environment\nImport python packages and set up the GRASS GIS environment.\n\n# import standard Python packages\nimport os\nimport sys\nimport subprocess\nimport json\nfrom io import StringIO\nfrom pathlib import Path\n\n%reload_ext autoreload\n%autoreload 2\n# Visulization packages\nimport pandas as pd\nimport geopandas as gpd\nimport seaborn as sns\n\n\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n\n# import GRASS GIS python packages\n%reload_ext autoreload\n%autoreload 2\nimport grass.script as gs\nimport grass.jupyter as gj\n\n\n# create a temporary folder where to place our GRASS project\nimport tempfile\ntempdir = tempfile.TemporaryDirectory()\nprint(tempdir.name)\n\n/tmp/tmpnp2dcvk3"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#area-of-interest",
    "href": "content/notebooks/us_doi/grass_jupyter.html#area-of-interest",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Area of Interest",
    "text": "Area of Interest\n\nChaco Cultural National Historical Park\n\n\n\n\n\n\n\nNPS Park Image\n\n\n\nImage Source - Chetro Ketl from overview on Pueblo Alto trail - NPS Photo\nMap Source\n\n\n\nThe full dataset is available through OpenTopography\n\n\nData Summary\n\nFunding: National Science Foundation (NSF) Earth Sciences (EAR) Instrumentation and Facilities (IF) Program\nPartner: University of New Mexico\nCollector: National Center for Airborne Laser Mapping (NCALM)\n\nData Characteristics\n\nArea 542.72 km^2\nOver 13 Billion Points\nPoint Density 25.56 pts/m^2\n\nRaster Resolution 0.5 m\nCoordinate System: Horizontal: NAD83 (2011) (EPOCH:2010) / UTM Zone 13N Meters [EPSG: 6342] Vertical: NAVD88 [EPSG: 5703]\nUnits: Meters\nComplete metadata can be found at: OpenTopography\n\nDorshow, W. (2019). 3D Landscape Reconstruction and Land Use Modeling, Chaco Canyon, NM 2016. National Center for Airborne Laser Mapping (NCALM). Distributed by OpenTopography. https://doi.org/10.5069/G9XG9P8D.. Accessed: 2024-08-19\n\n\n\nDownload Data\nThe data used in this tutorial is available through GitHub.\nLidar Data\n\n\nVisualize the point cloud\n\nfrom IPython.display import IFrame\n\n# URL of the website to be embedded\nurl = 'https://ot-process2.sdsc.edu/potree/index.html?t=%5B233574.5,3994716,2188.5%5D&p=%5B234704.19367662142,3993579.3112938125,2825.660091521463%5D&r=%22https://ot-process2.sdsc.edu/appEntwineEPTService1724096588005642548939/pc1724096516919%22&m=9&era=%5B1858,2519%5D'\n# Dimensions of the IFrame\nwidth = 800\nheight = 600\n# Display the IFrame in the notebook\nIFrame(url, width=width, height=height)"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#grass-project-setup",
    "href": "content/notebooks/us_doi/grass_jupyter.html#grass-project-setup",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "GRASS Project Setup",
    "text": "GRASS Project Setup\nCreate a new project in GRASS for Chaco Culture National Historical Park\n\ngs.create_project(path=tempdir.name, name=\"ChacoCanyon2016\", epsg=\"6342\", overwrite=True)\n\n\n# start GRASS in the recently created project\nsession = gj.init(Path(tempdir.name,\"ChacoCanyon2016\"))\n\n\nDownload Add-ons\nGRASS GIS Addons Over 400 add-ons available!\nLet’s download the add-ons for the project.\n\nwith open(\"extensions.txt\", \"r\") as f:\n    lines = f.readlines()\n    for line in lines:\n        line = line.strip()\n        print(f\"Installing: {line}\")\n        gs.run_command(\"g.extension\", extension=line, operation=\"add\")"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#prepare-data",
    "href": "content/notebooks/us_doi/grass_jupyter.html#prepare-data",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Prepare Data",
    "text": "Prepare Data\nLet’s examine point cloud data first with pdal before importing into GRASS GIS.\n\n!pdal info --summary metadata/points2.laz\n\n{\n  \"file_size\": 18912844,\n  \"filename\": \"metadata/points2.laz\",\n  \"now\": \"2024-08-22T17:20:40-0400\",\n  \"pdal_version\": \"2.3.0 (git-version: Release)\",\n  \"reader\": \"readers.las\",\n  \"summary\":\n  {\n    \"bounds\":\n    {\n      \"maxx\": 229974.27,\n      \"maxy\": 3997397.29,\n      \"maxz\": 2030.95,\n      \"minx\": 229377.17,\n      \"miny\": 3996851.14,\n      \"minz\": 1846.72\n    },\n    \"dimensions\": \"X, Y, Z, Intensity, ReturnNumber, NumberOfReturns, ScanDirectionFlag, EdgeOfFlightLine, Classification, ScanAngleRank, UserData, PointSourceId, GpsTime, ScanChannel, ClassFlags\",\n    \"num_points\": 9017333,\n    \"srs\":\n    {\n      \"compoundwkt\": \"COMPD_CS[\\\"NAD83(2011) / UTM zone 13N + NAVD88 height\\\",PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",GEOGCS[\\\"NAD83(2011)\\\",DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-105],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]],VERT_CS[\\\"NAVD88 height\\\",VERT_DATUM[\\\"North American Vertical Datum 1988\\\",2005,AUTHORITY[\\\"EPSG\\\",\\\"5103\\\"]],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Gravity-related height\\\",UP],AUTHORITY[\\\"EPSG\\\",\\\"5703\\\"]]]\",\n      \"horizontal\": \"PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",GEOGCS[\\\"NAD83(2011)\\\",DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-105],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]]\",\n      \"isgeocentric\": false,\n      \"isgeographic\": false,\n      \"prettycompoundwkt\": \"COMPD_CS[\\\"NAD83(2011) / UTM zone 13N + NAVD88 height\\\",\\n    PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",\\n        GEOGCS[\\\"NAD83(2011)\\\",\\n            DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",\\n                SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                    AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],\\n                AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],\\n            PRIMEM[\\\"Greenwich\\\",0,\\n                AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],\\n            UNIT[\\\"degree\\\",0.0174532925199433,\\n                AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],\\n            AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],\\n        PROJECTION[\\\"Transverse_Mercator\\\"],\\n        PARAMETER[\\\"latitude_of_origin\\\",0],\\n        PARAMETER[\\\"central_meridian\\\",-105],\\n        PARAMETER[\\\"scale_factor\\\",0.9996],\\n        PARAMETER[\\\"false_easting\\\",500000],\\n        PARAMETER[\\\"false_northing\\\",0],\\n        UNIT[\\\"metre\\\",1,\\n            AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\\n        AXIS[\\\"Easting\\\",EAST],\\n        AXIS[\\\"Northing\\\",NORTH],\\n        AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]],\\n    VERT_CS[\\\"NAVD88 height\\\",\\n        VERT_DATUM[\\\"North American Vertical Datum 1988\\\",2005,\\n            AUTHORITY[\\\"EPSG\\\",\\\"5103\\\"]],\\n        UNIT[\\\"metre\\\",1,\\n            AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\\n        AXIS[\\\"Gravity-related height\\\",UP],\\n        AUTHORITY[\\\"EPSG\\\",\\\"5703\\\"]]]\",\n      \"prettywkt\": \"PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",\\n    GEOGCS[\\\"NAD83(2011)\\\",\\n        DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",\\n            SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],\\n            AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],\\n        UNIT[\\\"degree\\\",0.0174532925199433,\\n            AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],\\n        AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],\\n    PROJECTION[\\\"Transverse_Mercator\\\"],\\n    PARAMETER[\\\"latitude_of_origin\\\",0],\\n    PARAMETER[\\\"central_meridian\\\",-105],\\n    PARAMETER[\\\"scale_factor\\\",0.9996],\\n    PARAMETER[\\\"false_easting\\\",500000],\\n    PARAMETER[\\\"false_northing\\\",0],\\n    UNIT[\\\"metre\\\",1,\\n        AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],\\n    AXIS[\\\"Easting\\\",EAST],\\n    AXIS[\\\"Northing\\\",NORTH],\\n    AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]]\",\n      \"proj4\": \"+proj=utm +zone=13 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +vunits=m +no_defs\",\n      \"units\":\n      {\n        \"horizontal\": \"metre\",\n        \"vertical\": \"metre\"\n      },\n      \"vertical\": \"VERT_CS[\\\"NAVD88 height\\\",VERT_DATUM[\\\"North American Vertical Datum 1988\\\",2005,AUTHORITY[\\\"EPSG\\\",\\\"5103\\\"]],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Gravity-related height\\\",UP],AUTHORITY[\\\"EPSG\\\",\\\"5703\\\"]]\",\n      \"wkt\": \"PROJCS[\\\"NAD83(2011) / UTM zone 13N\\\",GEOGCS[\\\"NAD83(2011)\\\",DATUM[\\\"NAD83_National_Spatial_Reference_System_2011\\\",SPHEROID[\\\"GRS 1980\\\",6378137,298.257222101,AUTHORITY[\\\"EPSG\\\",\\\"7019\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"1116\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6318\\\"]],PROJECTION[\\\"Transverse_Mercator\\\"],PARAMETER[\\\"latitude_of_origin\\\",0],PARAMETER[\\\"central_meridian\\\",-105],PARAMETER[\\\"scale_factor\\\",0.9996],PARAMETER[\\\"false_easting\\\",500000],PARAMETER[\\\"false_northing\\\",0],UNIT[\\\"metre\\\",1,AUTHORITY[\\\"EPSG\\\",\\\"9001\\\"]],AXIS[\\\"Easting\\\",EAST],AXIS[\\\"Northing\\\",NORTH],AUTHORITY[\\\"EPSG\\\",\\\"6342\\\"]]\"\n    }\n  }\n}\n\n\n\nRemove Outliers from Point Cloud\n\n!pdal pipeline pdal/preprocessing.json"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#import-data-into-grass-gis",
    "href": "content/notebooks/us_doi/grass_jupyter.html#import-data-into-grass-gis",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Import Data into GRASS GIS",
    "text": "Import Data into GRASS GIS\nLet’s calculate the point density of the point cloud data at 1m resolution.\n\ngs.run_command('r.in.pdal',\n            input='metadata/points2_clean.laz', \n            output='points_n',\n            method='n', # Count number of points per cell\n            resolution=1, # 1 meter\n            flags=\"ewn\",\n            overwrite=True)\n\n\nVisulalize the Raster Data\n\ngs.run_command(\"r.colors\", map=\"points_n\", color=\"bcyr\", flags=\"e\")\nm = gj.Map()\nm.d_rast(map=\"points_n\")\nm.d_legend(raster=\"points_n\", at=(5, 10, 50, 90), flags=\"b\")\nm.d_barscale(at=(5, 6), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\npoints_n_info = gs.parse_command('r.info', map='points_n', format=\"json\")\npoints_n_df = pd.DataFrame(points_n_info)\n\npoints_n_df.head(1)\n\n\n\n\n\n\n\n\n\nnorth\nsouth\nnsres\neast\nwest\newres\nrows\ncols\ncells\ndatatype\n...\ncreator\ntitle\ntimestamp\nunits\nvdatum\nsemantic_label\nsource1\nsource2\ndescription\ncomments\n\n\n\n\n0\n3997398\n3996851\n1\n229975\n229377\n1\n547\n598\n327106\nCELL\n...\ncoreywhite\nRaw X,Y,Z data binned into a raster grid by ce...\nNone\nNone\nNone\nNone\nmetadata/points2_clean.laz\n\ngenerated by r.in.pdal\nr.in.pdal --overwrite -w -e -n input=\"metadata...\n\n\n\n\n1 rows × 30 columns\n\n\n\n\n\n\nHistograms of Raster Data\n\nhist = gj.Map()\nhist.d_histogram(map=\"points_n\", flags=\"c\")\nhist.show()\n\n\n\n\n\n\n\n\n\nunivar_json = gs.parse_command('r.univar', map='points_n', format=\"json\")\nunivar_df = pd.DataFrame(univar_json)\nunivar_df.head()\n\n\n\n\n\n\n\n\n\nn\nnull_cells\ncells\nmin\nmax\nrange\nmean\nmean_of_abs\nstddev\nvariance\ncoeff_var\nsum\n\n\n\n\n0\n327106\n0\n327106\n0\n135\n135\n27.567006\n27.567006\n8.416197\n70.832372\n30.529964\n9017333\n\n\n\n\n\n\n\n\n\ngs.run_command('r.in.pdal',\n            input='metadata/points2_clean.laz', \n            output='points_median',\n            method='median', # median of the z values\n            resolution=1, # meter\n            flags=\"ewn\",\n            overwrite=True)\n\ngs.run_command(\"r.colors\", map=\"points_median\", color=\"elevation\", flags=\"\")\nm = gj.Map()\n\nm.d_rast(map=\"points_median\")\nm.d_legend(raster=\"points_median\", at=(60, 95, 85, 90), flags=\"bd\")\nm.d_barscale(at=(5, 6), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\nNow let’s look at the histograms of the median elevation.\n\nhist = gj.Map()\nhist.d_histogram(map=\"points_median\")\nhist.show()\n\n\n\n\n\n\n\n\n\nunivar_json = gs.parse_command('r.univar', map='points_median', format=\"json\", flags=\"e\")\nunivar_df = pd.DataFrame(univar_json)\nunivar_df.head()\n\n\n\n\n\n\n\n\n\nn\nnull_cells\ncells\nmin\nmax\nrange\nmean\nmean_of_abs\nstddev\nvariance\ncoeff_var\nsum\nfirst_quartile\nmedian\nthird_quartile\npercentiles\n\n\n\n\n0\n327090\n16\n327106\n1846.920044\n1918.099976\n71.179932\n1896.1288\n1896.1288\n17.64089\n311.200993\n0.930363\n6.202048e+08\n1889.959961\n1902.719971\n1908.689941\n[{'percentile': 90, 'value': 1911.6400146484375}]\n\n\n\n\n\n\n\n\n\ndef spatial_resolution_analysis():\n    output_maps = []\n    for i in [0.5, 1, 3, 5, 10]:\n        output_map = f'points_{i}m_mean'\n        gs.run_command('r.in.pdal',\n                input='metadata/points2_clean.laz', \n                output=output_map,\n                method='mean', # mean of the z values\n                resolution=i, # meter\n                flags=\"ewn\",\n                overwrite=True)\n        univar_json = gs.parse_command('r.univar', map=output_map, format=\"json\", flags=\"e\")\n        univar_json[0]['resolution'] = i\n        output_maps.append(univar_json[0])\n\n    return pd.DataFrame(output_maps)\n\nmean_univar_df = spatial_resolution_analysis()\nmean_univar_df.set_index('resolution', inplace=True)\nmean_univar_df.head(5)\n\n\n\n\n\n\n\n\n\nn\nnull_cells\ncells\nmin\nmax\nrange\nmean\nmean_of_abs\nstddev\nvariance\ncoeff_var\nsum\nfirst_quartile\nmedian\nthird_quartile\npercentiles\n\n\nresolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.5\n1298570\n7565\n1306135\n1846.883301\n1962.815796\n115.932495\n1896.145970\n1896.145970\n17.622542\n310.554003\n0.929387\n2.462278e+09\n1889.972046\n1902.729980\n1908.694946\n[{'percentile': 90, 'value': 1911.6434326171875}]\n\n\n1.0\n327090\n16\n327106\n1846.941772\n1926.239624\n79.297852\n1896.130754\n1896.130754\n17.641135\n311.209630\n0.930375\n6.202054e+08\n1889.958130\n1902.725830\n1908.695435\n[{'percentile': 90, 'value': 1911.6436767578125}]\n\n\n3.0\n36599\n1\n36600\n1847.095459\n1917.331787\n70.236328\n1896.056648\n1896.056648\n17.732032\n314.424974\n0.935206\n6.939378e+07\n1889.824585\n1902.695557\n1908.697388\n[{'percentile': 90, 'value': 1911.6749267578125}]\n\n\n5.0\n13200\n0\n13200\n1847.404785\n1917.161377\n69.756592\n1896.171552\n1896.171552\n17.628175\n310.752564\n0.929672\n2.502946e+07\n1890.059448\n1902.774170\n1908.708374\n[{'percentile': 90, 'value': 1911.650634765625}]\n\n\n10.0\n3355\n0\n3355\n1847.787354\n1916.982178\n69.194824\n1895.952356\n1895.952356\n17.820593\n317.573521\n0.939928\n6.360920e+06\n1889.712280\n1902.729980\n1908.641113\n[{'percentile': 90, 'value': 1911.5826416015625}]\n\n\n\n\n\n\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"darkgrid\")\n\n# Example plot: scatter plot of mean vs. resolution\n# Adjust the column names according to your DataFrame structure\nplt.figure(figsize=(10, 6))\nsns.scatterplot(data=mean_univar_df, x='resolution', y='mean')\n\n# Add titles and labels\nplt.title('Mean Value vs. Resolution')\nplt.xlabel('Resolution (m)')\nplt.ylabel('Mean Value')\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nNow let’s reset our computational region to run our analysis.\n\ngs.run_command(\"g.region\", raster=\"points_median\", flags=\"pa\")\n\nprojection: 1 (UTM)\nzone:       13\ndatum:      nad83_2011\nellipsoid:  grs80\nnorth:      3997398\nsouth:      3996851\nwest:       229377\neast:       229975\nnsres:      1\newres:      1\nrows:       547\ncols:       598\ncells:      327106\n\n\n\n\nCreate a Digital Terrian Model (DTM)\nImport lidar data as a vector in GRASS.\n\ngs.run_command('v.in.pdal',\n            input='metadata/points2_clean.laz', \n            output='lidar_points_be',\n            class_filter=2, # Bare earth points\n            flags=\"w\",\n            overwrite=True)\n\nHow many bare earth ppints did we just import?\n\n# Assuming gs.parse_command is already defined and imported\nlidar_be_info = gs.read_command('v.info', map='lidar_points_be', format=\"json\")\nlidar_be_dict = json.loads(lidar_be_info)\nnum_be_points = lidar_be_dict[\"points\"]\nprint(f\"We just imported {num_be_points:,} bare earth points\")\n\nWe just imported 6,631,980 bare earth points\n\n\nWe will now interpolate the lidar points into our digital terrain model (DTM).\n\ngs.run_command(\"v.surf.rst\",\n               input=\"lidar_points_be\",\n               elevation=\"lidar_be\",\n               slope=\"lidar_be_slope\",\n               aspect=\"lidar_be_aspect\",\n               pcurvature=\"lidar_be_pcurvature\",\n               tcurvature=\"lidar_be_tcurvature\",\n               smooth=0.5,\n               tension=40,\n               overwrite=True,\n               nprocs=24\n            )\n\n\n\nVisualize the DTM\n\nInteractive Map (Folium)\n\n# Create the shaded relief map\ngs.run_command(\n    \"r.relief\",\n    input=\"lidar_be\",\n    output=\"hillshade\",\n    zscale=1,\n    overwrite=True,\n)\n\nm = gj.InteractiveMap(width=\"500\", tiles=\"OpenStreetMap\", map_backend=\"folium\")\nm.add_raster(\"hillshade\", opacity=0.75)\nm.add_raster(\"lidar_be\", opacity=0.5)\nm.show()\n\n\n\n\n\n\nInteractive Map (ipyleaflet)\n\nm = gj.InteractiveMap(width=\"500\", map_backend=\"ipyleaflet\")\nm.query_mode = \"true\"\nm.add_raster(\"hillshade\", opacity=0.85)\nm.add_raster(\"points_median\", opacity=0.5)\nm.add_layer_control()\nm.show()\n\n\n\n\n\n\nDTM, Slope, and Aspect Figures\n\nDTM 1m Resolution\n\nm = gj.Map()\nm.d_shade(color=\"lidar_be\", shade=\"hillshade\")\nm.d_legend(raster=\"lidar_be\", at=(5, 9, 50, 90), flags=\"b\", unit=\"m\")\nm.d_barscale(at=(5, 6), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n\n\nAspect\n\ngs.run_command(\"r.colors\", map=\"lidar_be_aspect\", color=\"aspect\")\nm = gj.Map()\nm.d_rast(map=\"lidar_be_aspect\")\nm.d_legend(raster=\"lidar_be_aspect\", at=(5, 9, 50, 90), flags=\"b\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n\nSlope\n\ngs.run_command(\"r.colors\", map=\"lidar_be_slope\", color=\"sepia\", flags=\"e\")\nm = gj.Map()\nm.d_shade(color=\"lidar_be_slope\", shade=\"hillshade\")\nm.d_legend(raster=\"lidar_be_slope\", at=(5, 9, 50, 90), flags=\"bd\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n\n\nCalculate Geomorphons\n\ngs.run_command(\n        \"r.geomorphon\",\n        elevation=\"lidar_be\",\n        forms=\"geomorphon\",\n        search=21,\n        overwrite=True,\n    )\n\nm = gj.Map()\nm.d_shade(color=\"geomorphon\", shade=\"hillshade\")\nm.d_legend(raster=\"geomorphon\", at=(60, 95, 85, 90), flags=\"bd\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\n3D Visualization\n\nelevation_3dmap = gj.Map3D()\n# Full list of options m.nviz.image\n# https://grass.osgeo.org/grass84/manuals/m.nviz.image.html\nelevation_3dmap.render(\n    elevation_map=\"lidar_be\",\n    color_map=\"geomorphon\",\n    zexag=1, \n    perspective=20, \n    height=4000, \n    resolution_fine=1,\n    fringe=['nw','ne','sw','se'],\n    fringe_elevation=1000,\n    arrow_position=[100,50],\n)\nelevation_3dmap.show()\n\n\n\n\n\n\n\n\n\n\n\nStream Extraction\n\ngs.run_command(\"r.stream.extract\", elevation=\"lidar_be\", threshold=500,\n                mexp=0.5, stream_length=500, memory=100000, stream_raster=\"stream_r\",\n                direction=\"direction_r\", stream_vector=\"stream_vect\")\n\nLet’s view the stream network on the map.\n\nm = gj.InteractiveMap(width=\"500\", map_backend=\"folium\")\nm.query_mode = \"true\"\nm.add_raster(\"hillshade\", opacity=0.85)\nm.add_raster(\"points_median\", opacity=0.5)\nm.add_vector(\"stream_vect\", color=\"blue\", weight=3, type=\"line\")\nm.add_layer_control()\nm.show()\n\n\n\n\n\n\nOverland Flow Simulation\n\ngs.run_command(\n    \"r.slope.aspect\",\n    elevation=\"lidar_be\",\n    dx=\"dx\",\n    dy=\"dy\",\n    nprocs=4,\n    overwrite=True,\n)\n\nOUTPUT_STEP = 2\n\n# Run the simulation\ngs.run_command(\n        \"r.sim.water\",\n        elevation=\"lidar_be\",\n        dx=\"dx\",\n        dy=\"dy\",\n        rain_value=50,  # mm/hr\n        infil_value=0.0,  # mm/hr\n        man_value=0.1,\n        niterations=10,  # event duration (minutes)\n        output_step=OUTPUT_STEP,  # minutes\n        depth=\"depth\",  # m\n        discharge=\"disch\",  # m3/s\n        random_seed=3,\n        nprocs=4,\n        flags=\"t\",\n        overwrite=True,\n    )\n\n# Register the output maps into a space time dataset\ngs.run_command(\n    \"t.create\",\n    output=\"depth_sum\",\n    type=\"strds\",\n    temporaltype=\"absolute\",\n    title=\"Runoff Depth\",\n    description=\"Runoff Depth in [m]\",\n    overwrite=True,\n)\n\n# Get the list of naip maps (bands)\ndepth_list = gs.read_command(\n    \"g.list\", type=\"raster\", pattern=\"depth.*\", separator=\"comma\"\n).strip()\n\n# Register the maps\ngs.run_command(\n    \"t.register\",\n    input=\"depth_sum\",\n    type=\"raster\",\n    start=\"2024-01-01\",\n    increment=f\"{OUTPUT_STEP} minutes\",\n    maps=depth_list,\n    flags=\"i\",\n    overwrite=True,\n)\n\nVisualize the results of the overland flow simulation.\n\nm = gj.Map()\nm.d_shade(color=\"depth.10\", shade=\"hillshade\")\nm.d_legend(raster=\"depth.10\", at=(5, 9, 50, 90), flags=\"bd\", unit=\"m\")\nm.d_barscale(at=(5, 7), flags=\"n\")\nm.show()\n\n\n\n\n\n\n\n\n\nCreate Animation from Time Series Data\n\ndepth_sum_ts_map = gj.TimeSeriesMap(height=600, width=600, use_region=True)\ndepth_sum_ts_map.add_raster_series(\"depth_sum\")\ndepth_sum_ts_map.d_legend()\ndepth_sum_ts_map.render()\ndepth_sum_ts_map.save(f\"outputs/depth.gif\")\ndepth_sum_ts_map.show()\n\n\n\n\n\n\nExport GIF\n\n\n\nAnimation\n\n\n\n\nSelect a sample point for analysis\n\nm = gj.InteractiveMap(width=500, map_backend=\"ipyleaflet\")\nm.query_mode = \"true\"\nm.add_raster(\"hillshade\", opacity=0.85)\nm.add_raster(\"depth.08\", opacity=0.5)\nm.add_raster(\"depth.10\", opacity=0.5)\nm.add_layer_control()\nm.show()\n\n\n\n\nUsing our sample point, we can extract the time series data for the point.\n\ngs.parse_command('v.what.strds', input='sample', strds='depth_sum', output=\"depth_sum_sample\")\nsample_json = gs.parse_command('v.db.select', map=\"depth_sum_sample\", format=\"json\")\n\nNow we can visualize the time series data for our sample point.\n\n# This is ugly and need to be improved\nrecords = sample_json['records'][0]\ndel records['cat']\nsample_df = pd.DataFrame([records])\ntransposed = sample_df.T\ntransposed.columns = ['depth']\nsequence = [2, 4, 6, 8, 10]\ntransposed['time'] = sequence\ntransposed.set_index('time', inplace=True)\ntransposed.head()\n\n\n\n\n\n\n\n\n\ndepth\n\n\ntime\n\n\n\n\n\n2\n0.023435\n\n\n4\n0.027074\n\n\n6\n0.029835\n\n\n8\n0.049045\n\n\n10\n0.317990\n\n\n\n\n\n\n\n\n\n\nCreate a Time Series Line Plot\n\n# Create a seaborn line plot\nimport matplotlib.pyplot as plt\ntransposed.dropna(inplace=True)\n\nplt.figure(figsize=(10, 6))\ntransposed.plot(kind='line', y='depth', color='blue', marker='o', linestyle='-', linewidth=2)\n\n# Add titles and labels\nplt.title('Sample Depth vs. Time')\nplt.xlabel('Time (minutes)')\nplt.ylabel('Depth (m)')\n\n\n# Save the plot as an image file\nplt.savefig('outputs/line_plot.png')\n\n# Show the plot\nplt.show()\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\nAdd the sample point to the map\n\ndepth_json = gs.parse_command(\"t.rast.list\", input=\"depth_sum\", format=\"json\")\n\nfor i in depth_json['data']:\n    map_name = i['name']\n    file_name = f\"outputs/depth_{map_name.split('.')[-1]}.png\"\n    print(f\"Creating {file_name}\")\n    i['thumbnail'] = file_name\n    depth_map = gj.Map(filename=file_name, use_region=True)\n    depth_map.d_shade(color=map_name, shade=\"hillshade\")\n    depth_map.d_vect(map=\"depth_sum_sample\", color=\"red\", fill_color=\"red\", type=\"point\", size=12, icon=\"basic/point\")\n    depth_map.d_legend(raster=map_name, at=(5, 9, 50, 90), flags=\"bd\", unit=\"m\")\n    depth_map.d_barscale(at=(5, 7), flags=\"n\")\n    depth_map.show()\n\nCreating outputs/depth_02.png\nCreating outputs/depth_04.png\nCreating outputs/depth_06.png\nCreating outputs/depth_08.png\nCreating outputs/depth_10.png\n\n\n\n\nFinal figure\nCreate our final figure\n\nfrom PIL import Image\n\nfig = plt.figure(figsize=(25, 30))\nax = fig.add_subplot(2, 2, 1)\nax.set_axis_off()\n\nfig.subplots_adjust(hspace=0, wspace=0.1)\n\nimg = Image.open(depth_map.filename) \nplt.imshow(img)\nax.set_title(\"Sampe Point - 10 mintues\", {\"fontsize\": 24, \"fontweight\": \"bold\"})\n\nax = fig.add_subplot(2, 2, 2)\nax.set_axis_off()\nimg = Image.open(\"outputs/line_plot.png\")\nplt.imshow(img)\n\nplt.tight_layout()\nplt.savefig(\"outputs/figure.png\", bbox_inches=\"tight\", dpi=300)\n\nplt.show()"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#stac-integration",
    "href": "content/notebooks/us_doi/grass_jupyter.html#stac-integration",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "STAC Integration",
    "text": "STAC Integration\n\nNAIP Data\n\n!t.stac.item url=\"https://planetarycomputer.microsoft.com/api/stac/v1\" collection=\"naip\" datetime=\"2022\" format=\"plain\" method=\"nearest\" extent=region nprocs=2 -d\n\nSetting bbox to current region:\nBBOX: [-108.00541249, 36.07862566, -107.9985924, 36.08371681]\n/home/coreywhite/Documents/GitHub/ncsu-geoforall-lab/tutorials/venv/lib/python3.10/site-packages/pystac_client/item_search.py:678: UserWarning: numberMatched or context.matched not in response\n  warnings.warn(\"numberMatched or context.matched not in response\")\nSearch Matched: None items\n2 Assets Ready for download...\nDownloading assets:   0%|                                 | 0/2 [00:00&lt;?, ?it/s]Downloading Asset: {'href':\n'https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36108/m_3610864_ne_12_060_20220525.tif',\n'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n'title': 'RGBIR COG tile', 'eo:bands': [{'name': 'Red', 'common_name':\n'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue',\n'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir',\n'description': 'near-infrared'}], 'roles': ['data'], 'collection_id':\n'naip', 'item_id': 'nm_m_3610864_ne_12_060_20220525', 'file_name':\n'naip.nm_m_3610864_ne_12_060_20220525.image', 'datetime':\n'2022-05-25T16:00:00Z'}\nDownloading Asset: {'href':\n'https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36107/m_3610757_nw_13_060_20220525.tif',\n'type': 'image/tiff; application=geotiff; profile=cloud-optimized',\n'title': 'RGBIR COG tile', 'eo:bands': [{'name': 'Red', 'common_name':\n'red'}, {'name': 'Green', 'common_name': 'green'}, {'name': 'Blue',\n'common_name': 'blue'}, {'name': 'NIR', 'common_name': 'nir',\n'description': 'near-infrared'}], 'roles': ['data'], 'collection_id':\n'naip', 'item_id': 'nm_m_3610757_nw_13_060_20220525', 'file_name':\n'naip.nm_m_3610757_nw_13_060_20220525.image', 'datetime':\n'2022-05-25T16:00:00Z'}\nImport Url:\n/vsicurl/https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36108/m_3610864_ne_12_060_20220525.tif\nImport Url:\n/vsicurl/https://naipeuwest.blob.core.windows.net/naip/v002/nm/2022/nm_060cm_2022/36107/m_3610757_nw_13_060_20220525.tif\nImporting: naip.nm_m_3610864_ne_12_060_20220525.image\nImporting: naip.nm_m_3610757_nw_13_060_20220525.image\nDownloading assets: 100%|█████████████████████████| 2/2 [00:25&lt;00:00, 12.90s/it]\n\n\nWe can view raw data with GRASS using the d_rgb tool.\n\nm = gj.Map()\nm.d_rgb(red=\"naip.nm_m_3610757_nw_13_060_20220525.image.1\",\n        blue=\"naip.nm_m_3610757_nw_13_060_20220525.image.3\",\n        green=\"naip.nm_m_3610757_nw_13_060_20220525.image.2\")\nm.d_rgb(red=\"naip.nm_m_3610864_ne_12_060_20220525.image.1\",\n        blue=\"naip.nm_m_3610864_ne_12_060_20220525.image.3\",\n        green=\"naip.nm_m_3610864_ne_12_060_20220525.image.2\")\nm.d_vect(map=\"stream_vect\", color=\"blue\", type=\"line\")\n\nm.show()\n\n\n\n\n\n\n\n\n\n\nMosaic and Compiste\nLet create a mosaic of the NAIP data, and give the bands some names.\n\ndef patch_and_composite_naip(year=2022):\n    gs.run_command(\"g.region\", res=1)\n    naip_bands = [(1, \"red\"), (2, \"green\"), (3, \"blue\"), (4, \"nir\")]\n    for band in naip_bands:\n        i, band_name = band\n        # Get the list of depth maps\n        image_list = gs.read_command(\n            \"g.list\", type=\"raster\", pattern=f\"*.image.{i}\", separator=\"comma\"\n        ).strip()\n\n        gs.run_command(\n            \"r.patch\",\n            input=image_list,\n            output=f\"naip_{year}.{band_name}\",\n            nprocs=4,\n            memory=2100,\n            overwrite=True,\n        )\n\n    gs.run_command(\n        \"r.composite\",\n        red=f\"naip_{year}.red\",\n        green=f\"naip_{year}.green\",\n        blue=f\"naip_{year}.blue\",\n        output=f\"naip_{year}_rgb\",\n        overwrite=True,\n    )\n\npatch_and_composite_naip()\n\nNow we can view the naip compsite.\n\nimage_map = gj.Map(filename=\"outputs/naip_2022_rgb.png\", use_region=True)\nimage_map.d_shade(color=\"naip_2022_rgb\", shade=\"hillshade\")\nimage_map.d_grid(siz=100, color=\"black\", flags=\"a\")\nimage_map.d_vect(map=\"depth_sum_sample\", color=\"red\", fill_color=\"red\", type=\"point\", size=12, icon=\"basic/point\")\nimage_map.d_barscale(at=(5, 7), flags=\"n\")\nimage_map.show()\n\n\n\n\n\n\n\n\n\n\nNDVI\nWe can use the NAIP data to calculate NDVI.\n\ngs.run_command(\"i.vi\", red=\"naip_2022.red\", nir=\"naip_2022.nir\", output=\"ndvi\", overwrite=True)\nndvi_map = gj.Map(filename=\"outputs/ndvi.png\", height=600, width=600)\nndvi_map.d_shade(color=\"ndvi\", shade=\"hillshade\")\nndvi_map.d_grid(siz=100, color=\"grey\", flags=\"a\")\nndvi_map.d_legend(raster=\"ndvi\", at=(10, 12, 50, 90), flags=\"bd\")\nndvi_map.d_barscale(at=(5, 11), flags=\"n\")\nndvi_map.show()\n\n\n\n\n\n\n\n\nLet’s create our final figure.\n\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom PIL import Image\n\n# Create a figure\nfig = plt.figure(figsize=(15, 10))\nfig.suptitle('Chaco Canyon 2016 - Overland Flow Simulation', fontsize=24, fontweight='bold')\n# Create a GridSpec with 2 rows and 6 columns, making the bottom row larger\ngrid = gridspec.GridSpec(2, 6, height_ratios=[2, 1])\n\n# Add an image to the left of the plot on the top row\nax_left = fig.add_subplot(grid[0, 1:3])\nax_left.set_title('NAIP 2022', {\"fontsize\": 18, \"fontweight\": \"bold\"})\nimg_left = Image.open(image_map.filename)\nax_left.imshow(img_left)\nax_left.axis(\"off\")\n\n# Add a larger line graph on the top row spanning the remaining columns\nax_large = fig.add_subplot(grid[0, 3:])\nimg_large = Image.open(\"outputs/line_plot.png\")\nax_large.imshow(img_large)\n# ax_large.set_title('Depth vs. Time', {\"fontsize\": 18, \"fontweight\": \"bold\"})\nax_large.axis(\"off\")\n\nax = fig.add_subplot(grid[1, 3:4])\nax.set_title(f\"Depth Maps\", {\"fontsize\": 16, \"fontweight\": \"bold\"})\nax.axis(\"off\")\n# Add 5 subplots on the bottom row\nfor idx, item in enumerate(depth_json['data']):\n    ax = fig.add_subplot(grid[1, idx+1])\n    map_name = item['name']\n    time_stamp = map_name.split('.')[-1]\n    img = Image.open(item['thumbnail'])  # Open the image file\n    ax.imshow(img)\n    ax.set_title(f\"{time_stamp} minutes\", {\"fontsize\": 16, \"fontweight\": \"bold\"})\n    ax.axis(\"off\")\n\n# Adjust layout\nplt.tight_layout()\n\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "content/notebooks/us_doi/grass_jupyter.html#funding",
    "href": "content/notebooks/us_doi/grass_jupyter.html#funding",
    "title": "Geoprocessing with GRASS GIS and Jupyter Notebooks",
    "section": "Funding",
    "text": "Funding\n\nPathways to Enable Open-Source Ecosystems (POSE) Phase II\nNSF Award # 2303651"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/workshop.html",
    "href": "content/workshops/foss4gna_2024/workshop.html",
    "title": "Developing web-application with GRASS GIS",
    "section": "",
    "text": "Welcome to the Developing Web Applications with GRASS GIS workshop! During this workshop you will learn how to create geospatial web applications using GRASS GIS, Actinia, and OpenPlains."
  },
  {
    "objectID": "content/workshops/foss4gna_2024/workshop.html#setup",
    "href": "content/workshops/foss4gna_2024/workshop.html#setup",
    "title": "Developing web-application with GRASS GIS",
    "section": "Setup",
    "text": "Setup\n\nDocker\nPostman / Insomnia\nJupyterHub"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/workshop.html#overview",
    "href": "content/workshops/foss4gna_2024/workshop.html#overview",
    "title": "Developing web-application with GRASS GIS",
    "section": "Overview",
    "text": "Overview\n\nGRASS GIS - is a raster and vector based geospatial processing engine.\nActinia - is the GRASS GIS REST API for scalable, distributed, high performance geospatial processing.\nOpenPlains: Grasslands - is an interactive geospatial modeling framework.\n\n\nWhat is Geoprocessing\n\n\nWhat is a REST API\n\n\nWhat is an interactive geosptial modeling framework?"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#corey-white",
    "href": "content/presentations/foss4gna_2024_case_studies.html#corey-white",
    "title": "",
    "section": "Corey White",
    "text": "Corey White\n\n\n\nCenter of Geospatial Analytics at NC State University - Applied Research Scientist\nOpenPlains Inc - Founder & CEO\nGRASS GIS - Contributor & Active Community Member"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass",
    "href": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass",
    "title": "",
    "section": "What is GRASS?",
    "text": "What is GRASS?\n\n\n\n\n\nGRASS is geospatial computational engine\nGRASS is a modeling platform\nGRASS is a development framework\n\n\n\n\n\npsst GRASS is not your Papi’s Desktop GIS"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass-used-for",
    "href": "content/presentations/foss4gna_2024_case_studies.html#what-is-grass-used-for",
    "title": "",
    "section": "What is GRASS used For?",
    "text": "What is GRASS used For?\n\nAdvanced geospatial modeling and analysis\nData Science\nData Engineering"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#who-is-using-grass",
    "href": "content/presentations/foss4gna_2024_case_studies.html#who-is-using-grass",
    "title": "",
    "section": "Who is using GRASS",
    "text": "Who is using GRASS\nCivil and Environmental\n\nResearchers\nModelers\nData Engineers\nClimate Scientists\nStartups"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#features",
    "href": "content/presentations/foss4gna_2024_case_studies.html#features",
    "title": "",
    "section": "Features",
    "text": "Features\n\n\n\nHydrologly\nMap Calculations\nGeomorphology\nRemote Sensing\nMachine Learning\nLidar"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#grass-as-a-geoprocessing-engine",
    "href": "content/presentations/foss4gna_2024_case_studies.html#grass-as-a-geoprocessing-engine",
    "title": "",
    "section": "GRASS as a Geoprocessing Engine",
    "text": "GRASS as a Geoprocessing Engine\n\n\n\nFast, trusted, science based tools\n\n+400 core tools\n+400 contributor addons\n\nModern Tooling\n\nJupyter Notebooks\nR Studio\nPython and C API\nGUI"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#grass-in-the-wild",
    "href": "content/presentations/foss4gna_2024_case_studies.html#grass-in-the-wild",
    "title": "",
    "section": "GRASS in the Wild",
    "text": "GRASS in the Wild\n\n\nDesktop\n\nCivil Engineering Firms\nLidar/Raster Processing\nPower desktops to simplify processing\n\n\nCloud\n\nEnvironmental Engineering Companies\nGovernment\n\n\nHPC\n\nEnvironmental Researchers\n\nAcademia\nGovernmental\n\nNational Scale Data Processing"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#desktop-based-geoprocessing",
    "href": "content/presentations/foss4gna_2024_case_studies.html#desktop-based-geoprocessing",
    "title": "",
    "section": "Desktop-based Geoprocessing",
    "text": "Desktop-based Geoprocessing\n\n\nSo fast you usally don’t need scale\n\nHandles large raster base calcuations with ease"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study",
    "href": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study",
    "title": "",
    "section": "Desktop Case Study",
    "text": "Desktop Case Study\nBohannan Huston\n\n\nCivil Engineeering firm based out of New Mexico\nModeling & Anaylsis\n\n1m QL1 Lidar Data\nVegitation Analysis\nFlow Lines Deliniation"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study-1",
    "href": "content/presentations/foss4gna_2024_case_studies.html#desktop-case-study-1",
    "title": "",
    "section": "Desktop Case Study",
    "text": "Desktop Case Study\nBohannan Huston: Tech Specs\n\n\nSetup\n\nMacOS\n\n\nTechnique\n\nbash scripts\nGrided\nParrell"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-based-geoprocessing",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-based-geoprocessing",
    "title": "",
    "section": "Cloud-based Geoprocessing",
    "text": "Cloud-based Geoprocessing\nTools\n\nActinia REST API\nApache AirFlow\nOpenPlains"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study",
    "title": "",
    "section": "Cloud Case Study",
    "text": "Cloud Case Study\nMudialis: Free Data With Free Software\n\nGRASS GIS\nGRASS GIS Addons\nActinia"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-1",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-1",
    "title": "",
    "section": "Cloud Case Study",
    "text": "Cloud Case Study\nMudialis: Detecting buildings, green roofs and trees\n\n\n\nOfficial cadastral plans are lagging behind reality.\nDetection based on point clouds and 7.5 cm aerial imagery (RGB-NIR)\n\nNew GRASS GIS addons\n\nm.analyse.buildings\nr.extract.greenroofs\nm.analyse.trees\n\n\n\n\n\n\n\nSource code: https://github.com/mundialis/rvr_interface/"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-2",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-2",
    "title": "",
    "section": "Cloud Case Study",
    "text": "Cloud Case Study\nMudialis: Image classification workshop with actinia\n\n\n\n\n\n\n\n\n\n\n\nMachine learning based image classification using an aerial image and surface model. Visualization with leafmap"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-based-geoprocessing",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-based-geoprocessing",
    "title": "",
    "section": "HPC-Based Geoprocessing",
    "text": "HPC-Based Geoprocessing\nHPC - High Performance Computing"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study",
    "title": "",
    "section": "HPC Case-Study",
    "text": "HPC Case-Study\nNCSU Henry2 cluster\n\nNodes: 933\nCores: 13844\nPython, R, GRASS GIS"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-3",
    "href": "content/presentations/foss4gna_2024_case_studies.html#cloud-case-study-3",
    "title": "",
    "section": "Cloud Case Study",
    "text": "Cloud Case Study\nMudialis: Image classification workshop with actinia\n\n\n\n\n\n\n\n\n\n\n\nMachine learning based image classification using an aerial image and surface model. Visualization with leafmap"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#placeholder",
    "href": "content/presentations/foss4gna_2024_case_studies.html#placeholder",
    "title": "",
    "section": "Placeholder",
    "text": "Placeholder\n\nJupyter notebook with screenshots, see: https://github.com/mundialis/fossgis2024/blob/main/notebooks/actinia_Klassifikation.ipynb\nactinia and leafmap in Jupyter notebook\n\nSee: https://mundialis.github.io/fossgis2024/actinia-wachsen-blaetter-mit-leafmap/#/step-1\n\nTransformation potential of large-scale parking lots for sustainable urban redevelopment\n\nSee: https://pretalx.com/media/fossgis2024/submissions/SJRPCR/resources/fossgis_2024_Transformationspotenziale_grossfla_77A3ogf.pdf"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-1",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-1",
    "title": "",
    "section": "HPC Case-Study",
    "text": "HPC Case-Study\nNCSU: CONUS Urban Growth Model"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-2",
    "href": "content/presentations/foss4gna_2024_case_studies.html#hpc-case-study-2",
    "title": "",
    "section": "HPC Case-Study",
    "text": "HPC Case-Study\nNCSU: CONUS Urban Growth Model\nExample: Scaling urban growth model\n\nr.futures addon: FUTURES urban growth model\n30-m resolution (16 billion cells) on HPC\n50 stochastic runs annually from 2020 to 2100"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#summary",
    "href": "content/presentations/foss4gna_2024_case_studies.html#summary",
    "title": "",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\nGRASS is geospatial computational engine\nGRASS is a modeling platform\nGRASS is a development framework\n\nGRASS is not your Papi’s Desktop GIS"
  },
  {
    "objectID": "content/presentations/foss4gna_2024_case_studies.html#questions",
    "href": "content/presentations/foss4gna_2024_case_studies.html#questions",
    "title": "",
    "section": "Questions",
    "text": "Questions\n\n\n\nReturn Home"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html",
    "href": "content/workshops/foss4gna_2024/intro_grass.html",
    "title": "Introduction to GRASS GIS",
    "section": "",
    "text": "This notebook is a quick introduction to GRASS and Jupyter Notebooks.\n\nimport sys\nv = sys.version_info\nprint(f\"We are using Python {v.major}.{v.minor}.{v.micro}\")\n\nWe are using Python 3.10.12\n\n\n\n\n\n# import standard Python packages\nimport os\nimport subprocess\nimport json\nfrom io import StringIO\nfrom pathlib import Path\nfrom IPython.display import IFrame\n\n\n\n\n\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n\n# import GRASS GIS python packages\n%reload_ext autoreload\n%autoreload 2\nimport grass.script as gs\nimport grass.jupyter as gj\n\n\n# create a temporary folder where to place our GRASS project\nimport tempfile\ntempdir = tempfile.TemporaryDirectory()\n\n\n\n\n\ngs.create_project(path=tempdir.name, name=\"foss4g2024\", epsg=\"2817\", overwrite=True)\n\n\n# start GRASS in the recently created project\nsession = gj.init(Path(tempdir.name,\"foss4g2024\"))\n\n\n# !ogrinfo \"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\" -al\n# !ogrinfo /vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip -al\n\n\n\n\n\n\ngs.run_command(\"v.import\",\n   input=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\",\n   output=\"stl_boundary\",\n   layer=\"stl_boundary\",\n   snap=0.0001,\n   # epsg=8801\n)\n\n\n\n\n\nstreets_url=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip\"\n\ngs.run_command(\"v.import\",\n   input=streets_url,\n   output=\"stl_streets\",\n   layer=\"TgrGeoCd\",\n   snap=0.0001,\n   # epsg=8801\n)\n\n\nmap = gj.InteractiveMap(map_backend=\"folium\")\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\n# map.add_vector(\"stl_streets\", line_color=\"grey\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\n\ngs.run_command(\"g.region\", vector=\"stl_boundary\", res=10, flags=\"ap\")\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271030\nwest:       1214160\neast:       1226670\nnsres:      10\newres:      10\nrows:       2723\ncols:       1251\ncells:      3406473\n\n\nhttps://stacindex.org/catalogs\n\ngs.run_command(\"t.stac.catalog\", url=\"https://earth-search.aws.element84.com/v1/\", format=\"plain\", flags=\"\")\n\n---------------------------------------------------------------------------\nCatalog: Earth Search by Element 84\n---------------------------------------------------------------------------\nClient Id: earth-search-aws\nClient Description: A STAC API of public datasets on AWS\nClient STAC Extensions: []\nClient catalog_type: ABSOLUTE_PUBLISHED\n---------------------------------------------------------------------------\nCollections: 9\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Pre-Collection 1 Level-2A \n---------------------------------------------------------------------------\nCollection Id: sentinel-2-pre-c1-l2a\nSentinel-2 Pre-Collection 1 Level-2A (baseline &lt; 05.00), with data and metadata matching collection sentinel-2-c1-l2a\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Copernicus DEM GLO-30\n---------------------------------------------------------------------------\nCollection Id: cop-dem-glo-30\nThe Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-30 Public provides limited worldwide coverage at 30 meters because a small subset of tiles covering specific countries are not yet released to the public by the Copernicus Programme.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: NAIP: National Agriculture Imagery Program\n---------------------------------------------------------------------------\nCollection Id: naip\nThe [National Agriculture Imagery Program](https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/) (NAIP) provides U.S.-wide, high-resolution aerial imagery, with four spectral bands (R, G, B, IR).  NAIP is administered by the [Aerial Field Photography Office](https://www.fsa.usda.gov/programs-and-services/aerial-photography/) (AFPO) within the [US Department of Agriculture](https://www.usda.gov/) (USDA).  Data are captured at least once every three years for each state.  This dataset represents NAIP data from 2010-present, in [cloud-optimized GeoTIFF](https://www.cogeo.org/) format.\n\nExtent: {'spatial': {'bbox': [[-160, 17, -67, 50]]}, 'temporal': {'interval': [['2010-01-01T00:00:00Z', '2022-12-31T00:00:00Z']]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Copernicus DEM GLO-90\n---------------------------------------------------------------------------\nCollection Id: cop-dem-glo-90\nThe Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-90 provides worldwide coverage at 90 meters.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Landsat Collection 2 Level-2\n---------------------------------------------------------------------------\nCollection Id: landsat-c2-l2\nAtmospherically corrected global Landsat Collection 2 Level-2 data from the Thematic Mapper (TM) onboard Landsat 4 and 5, the Enhanced Thematic Mapper Plus (ETM+) onboard Landsat 7, and the Operational Land Imager (OLI) and Thermal Infrared Sensor (TIRS) onboard Landsat 8 and 9.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['1982-08-22T00:00:00Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Level-2A\n---------------------------------------------------------------------------\nCollection Id: sentinel-2-l2a\nGlobal Sentinel-2 data from the Multispectral Instrument (MSI) onboard Sentinel-2\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Level-1C\n---------------------------------------------------------------------------\nCollection Id: sentinel-2-l1c\nGlobal Sentinel-2 data from the Multispectral Instrument (MSI) onboard Sentinel-2\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Collection 1 Level-2A\n---------------------------------------------------------------------------\nCollection Id: sentinel-2-c1-l2a\nSentinel-2 Collection 1 Level-2A, data from the Multispectral Instrument (MSI) onboard Sentinel-2\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-1 Level-1C Ground Range Detected (GRD)\n---------------------------------------------------------------------------\nCollection Id: sentinel-1-grd\nSentinel-1 is a pair of Synthetic Aperture Radar (SAR) imaging satellites launched in 2014 and 2016 by the European Space Agency (ESA). Their 6 day revisit cycle and ability to observe through clouds makes this dataset perfect for sea and land monitoring, emergency response due to environmental disasters, and economic applications. This dataset represents the global Sentinel-1 GRD archive, from beginning to the present, converted to cloud-optimized GeoTIFF format.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2014-10-10T00:28:21Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\n\n\n\n\ngs.run_command(\"t.stac.collection\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               flags=\"\"\n            )\n\n#     type: Collection\n#     id: cop-dem-glo-30\n#     stac_version: 1.0.0\n#     description: The Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-30 Public provides limited worldwide coverage at 30 meters because a small subset of tiles covering specific countries are not yet released to the public by the Copernicus Programme.\n---------------------------------------------------------------------------\n    links:\n#         rel: self\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30\n#         type: application/json\n#         rel: license\n#         href: https://spacedata.copernicus.eu/documents/20126/0/CSCDA_ESA_Mission-specific+Annex.pdf\n#         title: Copernicus DEM License\n#         rel: parent\n#         href: https://earth-search.aws.element84.com/v1\n#         type: application/json\n#         rel: root\n#         href: https://earth-search.aws.element84.com/v1/\n#         type: application/json\n#         title: Earth Search by Element 84\n#         rel: items\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/items\n#         type: application/geo+json\n#         rel: http://www.opengis.net/def/rel/ogc/1.0/queryables\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/queryables\n#         type: application/schema+json\n#         rel: aggregate\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/aggregate\n#         type: application/json\n#         method: GET\n#         rel: aggregations\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/aggregations\n#         type: application/json\n---------------------------------------------------------------------------\n    stac_extensions:\n---------------------------------------------------------------------------\n\n     item_assets:\n---------------------------------------------------------------------------\n\n         data:\n#             type: image/tiff; application=geotiff; profile=cloud-optimized\n---------------------------------------------------------------------------\n            roles:\n#             title: Data\n---------------------------------------------------------------------------\n            raster:bands:\n#                 sampling: point\n#                 data_type: float32\n#                 spatial_resolution: 30\n#                 unit: meter\n#         data: {'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'roles': ['data'], 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}]}\n#     item_assets: {'data': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'roles': ['data'], 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}]}}\n#     title: Copernicus DEM GLO-30\n---------------------------------------------------------------------------\n\n     extent:\n---------------------------------------------------------------------------\n\n         spatial:\n---------------------------------------------------------------------------\n            bbox:\n#         spatial: {'bbox': [[-180, -90, 180, 90]]}\n---------------------------------------------------------------------------\n\n         temporal:\n---------------------------------------------------------------------------\n            interval:\n#         temporal: {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}\n#     extent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\n#     license: proprietary\n---------------------------------------------------------------------------\n    keywords:\n---------------------------------------------------------------------------\n    providers:\n#         name: European Space Agency\n---------------------------------------------------------------------------\n        roles:\n#         url: https://spacedata.copernicus.eu/documents/20123/121286/CSCDA_ESA_Mission-specific+Annex_31_Oct_22.pdf\n#         name: Sinergise\n---------------------------------------------------------------------------\n        roles:\n#         url: https://registry.opendata.aws/copernicus-dem/\n#         name: OpenTopography\n---------------------------------------------------------------------------\n        roles:\n#         url: https://doi.org/10.5069/G9028PQB\n#         name: AWS\n---------------------------------------------------------------------------\n        roles:\n#         url: https://registry.opendata.aws/sentinel-1\n#         name: Element 84\n---------------------------------------------------------------------------\n        roles:\n#         url: https://element84.com\n---------------------------------------------------------------------------\n\n     summaries:\n---------------------------------------------------------------------------\n        gsd:\n---------------------------------------------------------------------------\n        platform:\n---------------------------------------------------------------------------\n        proj:epsg:\n---------------------------------------------------------------------------\n        storage:platform:\n---------------------------------------------------------------------------\n        storage:region:\n---------------------------------------------------------------------------\n        storage:requester_pays:\n#     summaries: {'gsd': [30], 'platform': ['tandem-x'], 'proj:epsg': [4326], 'storage:platform': ['AWS'], 'storage:region': ['eu-central-1'], 'storage:requester_pays': [False]}\n\n\n\ngs.run_command(\"t.stac.item\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               extent=\"region\",\n               method=\"bicubic\",\n               resolution=\"value\",\n               memory=\"5000\",\n               resolution_value=30,\n               flags=\"d\"\n            )\n\nDownloading Asset: {'href': 's3://copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif', 'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}], 'roles': ['data'], 'collection_id': 'cop-dem-glo-30', 'item_id': 'Copernicus_DSM_COG_10_N38_00_W091_00_DEM', 'file_name': 'cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data', 'datetime': '2021-04-22T00:00:00Z'}\nImport Url: /vsis3/copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif\nImporting: cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data\n\n\n\ngs.run_command(\"g.rename\", raster=\"cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data,cop-dem-glo-30\")\n\n\nmap = gj.InteractiveMap(width=500, height=500, map_backend=\"ipyleaflet\", use_region=True)\nmap.add_raster(\"cop-dem-glo-30\")\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\n\nmap = gj.Map(width=300)\nmap.d_rast(map=\"cop-dem-glo-30\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"g.region\", raster=\"cop-dem-glo-30\", res=30, flags=\"ap\")\ngs.run_command(\"r.colors\", map=\"cop-dem-glo-30\", color=\"elevation\")\ngs.run_command(\"r.slope.aspect\", elevation=\"cop-dem-glo-30\", slope=\"slope\", aspect=\"aspect\", overwrite=True)\ngs.run_command(\"r.colors\", map=\"slope\", color=\"slope\")\ngs.run_command(\"r.relief\", input=\"cop-dem-glo-30\", output=\"relief\", overwrite=True)\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636\n\n\n\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"cop-dem-glo-30\")\nmap.d_vect(map=\"stl_streets\", color=\"grey\", fill_color=\"none\", type=\"line\", width=0.5)\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.geomorphon\", elevation=\"cop-dem-glo-30\", search=15, flat=0.1, forms=\"geomorphon\", overwrite=True)\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"geomorphon\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", flags=\"r\")\n\n\ngs.run_command(\"v.to.rast\", input=\"stl_streets\", output=\"stl_streets\", use=\"dir\", type=\"line\", overwrite=True) \ngs.run_command(\"r.slope.direction\", elevation=\"cop-dem-glo-30\", direction=\"stl_streets\", aspect=\"aspect\", overwrite=True)\n\n\nimport ipywidgets as widgets\nwidgets.IntSlider()\n\n\n\n\n\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#grass-project-setup",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#grass-project-setup",
    "title": "Introduction to GRASS GIS",
    "section": "",
    "text": "# import standard Python packages\nimport os\nimport subprocess\nimport json\nfrom io import StringIO\nfrom pathlib import Path\nfrom IPython.display import IFrame"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#setup-grass-environment",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#setup-grass-environment",
    "title": "Introduction to GRASS GIS",
    "section": "",
    "text": "sys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n\n# import GRASS GIS python packages\n%reload_ext autoreload\n%autoreload 2\nimport grass.script as gs\nimport grass.jupyter as gj\n\n\n# create a temporary folder where to place our GRASS project\nimport tempfile\ntempdir = tempfile.TemporaryDirectory()"
  },
  {
    "objectID": "content/workshops/foss4gna_2024/intro_grass.html#create-a-new-grass-project",
    "href": "content/workshops/foss4gna_2024/intro_grass.html#create-a-new-grass-project",
    "title": "Introduction to GRASS GIS",
    "section": "",
    "text": "gs.create_project(path=tempdir.name, name=\"foss4g2024\", epsg=\"2817\", overwrite=True)\n\n\n# start GRASS in the recently created project\nsession = gj.init(Path(tempdir.name,\"foss4g2024\"))\n\n\n# !ogrinfo \"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\" -al\n# !ogrinfo /vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip -al\n\n\n\n\n\n\ngs.run_command(\"v.import\",\n   input=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/stl_boundary.zip\",\n   output=\"stl_boundary\",\n   layer=\"stl_boundary\",\n   snap=0.0001,\n   # epsg=8801\n)\n\n\n\n\n\nstreets_url=\"/vsizip//vsicurl/https://www.stlouis-mo.gov/data/upload/data-files/streets.zip\"\n\ngs.run_command(\"v.import\",\n   input=streets_url,\n   output=\"stl_streets\",\n   layer=\"TgrGeoCd\",\n   snap=0.0001,\n   # epsg=8801\n)\n\n\nmap = gj.InteractiveMap(map_backend=\"folium\")\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\n# map.add_vector(\"stl_streets\", line_color=\"grey\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\n\ngs.run_command(\"g.region\", vector=\"stl_boundary\", res=10, flags=\"ap\")\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271030\nwest:       1214160\neast:       1226670\nnsres:      10\newres:      10\nrows:       2723\ncols:       1251\ncells:      3406473\n\n\nhttps://stacindex.org/catalogs\n\ngs.run_command(\"t.stac.catalog\", url=\"https://earth-search.aws.element84.com/v1/\", format=\"plain\", flags=\"\")\n\n---------------------------------------------------------------------------\nCatalog: Earth Search by Element 84\n---------------------------------------------------------------------------\nClient Id: earth-search-aws\nClient Description: A STAC API of public datasets on AWS\nClient STAC Extensions: []\nClient catalog_type: ABSOLUTE_PUBLISHED\n---------------------------------------------------------------------------\nCollections: 9\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Pre-Collection 1 Level-2A \n---------------------------------------------------------------------------\nCollection Id: sentinel-2-pre-c1-l2a\nSentinel-2 Pre-Collection 1 Level-2A (baseline &lt; 05.00), with data and metadata matching collection sentinel-2-c1-l2a\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Copernicus DEM GLO-30\n---------------------------------------------------------------------------\nCollection Id: cop-dem-glo-30\nThe Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-30 Public provides limited worldwide coverage at 30 meters because a small subset of tiles covering specific countries are not yet released to the public by the Copernicus Programme.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: NAIP: National Agriculture Imagery Program\n---------------------------------------------------------------------------\nCollection Id: naip\nThe [National Agriculture Imagery Program](https://www.fsa.usda.gov/programs-and-services/aerial-photography/imagery-programs/naip-imagery/) (NAIP) provides U.S.-wide, high-resolution aerial imagery, with four spectral bands (R, G, B, IR).  NAIP is administered by the [Aerial Field Photography Office](https://www.fsa.usda.gov/programs-and-services/aerial-photography/) (AFPO) within the [US Department of Agriculture](https://www.usda.gov/) (USDA).  Data are captured at least once every three years for each state.  This dataset represents NAIP data from 2010-present, in [cloud-optimized GeoTIFF](https://www.cogeo.org/) format.\n\nExtent: {'spatial': {'bbox': [[-160, 17, -67, 50]]}, 'temporal': {'interval': [['2010-01-01T00:00:00Z', '2022-12-31T00:00:00Z']]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Copernicus DEM GLO-90\n---------------------------------------------------------------------------\nCollection Id: cop-dem-glo-90\nThe Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-90 provides worldwide coverage at 90 meters.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Landsat Collection 2 Level-2\n---------------------------------------------------------------------------\nCollection Id: landsat-c2-l2\nAtmospherically corrected global Landsat Collection 2 Level-2 data from the Thematic Mapper (TM) onboard Landsat 4 and 5, the Enhanced Thematic Mapper Plus (ETM+) onboard Landsat 7, and the Operational Land Imager (OLI) and Thermal Infrared Sensor (TIRS) onboard Landsat 8 and 9.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['1982-08-22T00:00:00Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Level-2A\n---------------------------------------------------------------------------\nCollection Id: sentinel-2-l2a\nGlobal Sentinel-2 data from the Multispectral Instrument (MSI) onboard Sentinel-2\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Level-1C\n---------------------------------------------------------------------------\nCollection Id: sentinel-2-l1c\nGlobal Sentinel-2 data from the Multispectral Instrument (MSI) onboard Sentinel-2\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-2 Collection 1 Level-2A\n---------------------------------------------------------------------------\nCollection Id: sentinel-2-c1-l2a\nSentinel-2 Collection 1 Level-2A, data from the Multispectral Instrument (MSI) onboard Sentinel-2\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2015-06-27T10:25:31.456000Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nCollection: Sentinel-1 Level-1C Ground Range Detected (GRD)\n---------------------------------------------------------------------------\nCollection Id: sentinel-1-grd\nSentinel-1 is a pair of Synthetic Aperture Radar (SAR) imaging satellites launched in 2014 and 2016 by the European Space Agency (ESA). Their 6 day revisit cycle and ability to observe through clouds makes this dataset perfect for sea and land monitoring, emergency response due to environmental disasters, and economic applications. This dataset represents the global Sentinel-1 GRD archive, from beginning to the present, converted to cloud-optimized GeoTIFF format.\nExtent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2014-10-10T00:28:21Z', None]]}}\nLicense: proprietary\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\nConforms To:\n---------------------------------------------------------------------------\n    https://api.stacspec.org/v1.0.0/core\n    https://api.stacspec.org/v1.0.0/collections\n    https://api.stacspec.org/v1.0.0/ogcapi-features\n    https://api.stacspec.org/v1.0.0/item-search\n    https://api.stacspec.org/v1.0.0/ogcapi-features#fields\n    https://api.stacspec.org/v1.0.0/ogcapi-features#sort\n    https://api.stacspec.org/v1.0.0/ogcapi-features#query\n    https://api.stacspec.org/v1.0.0/item-search#fields\n    https://api.stacspec.org/v1.0.0/item-search#sort\n    https://api.stacspec.org/v1.0.0/item-search#query\n    https://api.stacspec.org/v0.3.0/aggregation\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\n    http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\n---------------------------------------------------------------------------\n---------------------------------------------------------------------------\n\n\n\n\ngs.run_command(\"t.stac.collection\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               flags=\"\"\n            )\n\n#     type: Collection\n#     id: cop-dem-glo-30\n#     stac_version: 1.0.0\n#     description: The Copernicus DEM is a Digital Surface Model (DSM) which represents the surface of the Earth including buildings, infrastructure and vegetation. GLO-30 Public provides limited worldwide coverage at 30 meters because a small subset of tiles covering specific countries are not yet released to the public by the Copernicus Programme.\n---------------------------------------------------------------------------\n    links:\n#         rel: self\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30\n#         type: application/json\n#         rel: license\n#         href: https://spacedata.copernicus.eu/documents/20126/0/CSCDA_ESA_Mission-specific+Annex.pdf\n#         title: Copernicus DEM License\n#         rel: parent\n#         href: https://earth-search.aws.element84.com/v1\n#         type: application/json\n#         rel: root\n#         href: https://earth-search.aws.element84.com/v1/\n#         type: application/json\n#         title: Earth Search by Element 84\n#         rel: items\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/items\n#         type: application/geo+json\n#         rel: http://www.opengis.net/def/rel/ogc/1.0/queryables\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/queryables\n#         type: application/schema+json\n#         rel: aggregate\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/aggregate\n#         type: application/json\n#         method: GET\n#         rel: aggregations\n#         href: https://earth-search.aws.element84.com/v1/collections/cop-dem-glo-30/aggregations\n#         type: application/json\n---------------------------------------------------------------------------\n    stac_extensions:\n---------------------------------------------------------------------------\n\n     item_assets:\n---------------------------------------------------------------------------\n\n         data:\n#             type: image/tiff; application=geotiff; profile=cloud-optimized\n---------------------------------------------------------------------------\n            roles:\n#             title: Data\n---------------------------------------------------------------------------\n            raster:bands:\n#                 sampling: point\n#                 data_type: float32\n#                 spatial_resolution: 30\n#                 unit: meter\n#         data: {'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'roles': ['data'], 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}]}\n#     item_assets: {'data': {'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'roles': ['data'], 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}]}}\n#     title: Copernicus DEM GLO-30\n---------------------------------------------------------------------------\n\n     extent:\n---------------------------------------------------------------------------\n\n         spatial:\n---------------------------------------------------------------------------\n            bbox:\n#         spatial: {'bbox': [[-180, -90, 180, 90]]}\n---------------------------------------------------------------------------\n\n         temporal:\n---------------------------------------------------------------------------\n            interval:\n#         temporal: {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}\n#     extent: {'spatial': {'bbox': [[-180, -90, 180, 90]]}, 'temporal': {'interval': [['2021-04-22T00:00:00Z', '2021-04-22T00:00:00Z']]}}\n#     license: proprietary\n---------------------------------------------------------------------------\n    keywords:\n---------------------------------------------------------------------------\n    providers:\n#         name: European Space Agency\n---------------------------------------------------------------------------\n        roles:\n#         url: https://spacedata.copernicus.eu/documents/20123/121286/CSCDA_ESA_Mission-specific+Annex_31_Oct_22.pdf\n#         name: Sinergise\n---------------------------------------------------------------------------\n        roles:\n#         url: https://registry.opendata.aws/copernicus-dem/\n#         name: OpenTopography\n---------------------------------------------------------------------------\n        roles:\n#         url: https://doi.org/10.5069/G9028PQB\n#         name: AWS\n---------------------------------------------------------------------------\n        roles:\n#         url: https://registry.opendata.aws/sentinel-1\n#         name: Element 84\n---------------------------------------------------------------------------\n        roles:\n#         url: https://element84.com\n---------------------------------------------------------------------------\n\n     summaries:\n---------------------------------------------------------------------------\n        gsd:\n---------------------------------------------------------------------------\n        platform:\n---------------------------------------------------------------------------\n        proj:epsg:\n---------------------------------------------------------------------------\n        storage:platform:\n---------------------------------------------------------------------------\n        storage:region:\n---------------------------------------------------------------------------\n        storage:requester_pays:\n#     summaries: {'gsd': [30], 'platform': ['tandem-x'], 'proj:epsg': [4326], 'storage:platform': ['AWS'], 'storage:region': ['eu-central-1'], 'storage:requester_pays': [False]}\n\n\n\ngs.run_command(\"t.stac.item\",\n               url=\"https://earth-search.aws.element84.com/v1/\",\n               collection=\"cop-dem-glo-30\",\n               format=\"plain\",\n               extent=\"region\",\n               method=\"bicubic\",\n               resolution=\"value\",\n               memory=\"5000\",\n               resolution_value=30,\n               flags=\"d\"\n            )\n\nDownloading Asset: {'href': 's3://copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif', 'type': 'image/tiff; application=geotiff; profile=cloud-optimized', 'title': 'Data', 'raster:bands': [{'sampling': 'point', 'data_type': 'float32', 'spatial_resolution': 30, 'unit': 'meter'}], 'roles': ['data'], 'collection_id': 'cop-dem-glo-30', 'item_id': 'Copernicus_DSM_COG_10_N38_00_W091_00_DEM', 'file_name': 'cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data', 'datetime': '2021-04-22T00:00:00Z'}\nImport Url: /vsis3/copernicus-dem-30m/Copernicus_DSM_COG_10_N38_00_W091_00_DEM/Copernicus_DSM_COG_10_N38_00_W091_00_DEM.tif\nImporting: cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data\n\n\n\ngs.run_command(\"g.rename\", raster=\"cop-dem-glo-30.Copernicus_DSM_COG_10_N38_00_W091_00_DEM.data,cop-dem-glo-30\")\n\n\nmap = gj.InteractiveMap(width=500, height=500, map_backend=\"ipyleaflet\", use_region=True)\nmap.add_raster(\"cop-dem-glo-30\")\nmap.add_vector(\"stl_boundary\", fill_color=\"none\", line_color=\"red\")\nmap.add_layer_control()\nmap.show()\n\n\n\n\n\nmap = gj.Map(width=300)\nmap.d_rast(map=\"cop-dem-glo-30\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"g.region\", raster=\"cop-dem-glo-30\", res=30, flags=\"ap\")\ngs.run_command(\"r.colors\", map=\"cop-dem-glo-30\", color=\"elevation\")\ngs.run_command(\"r.slope.aspect\", elevation=\"cop-dem-glo-30\", slope=\"slope\", aspect=\"aspect\", overwrite=True)\ngs.run_command(\"r.colors\", map=\"slope\", color=\"slope\")\ngs.run_command(\"r.relief\", input=\"cop-dem-glo-30\", output=\"relief\", overwrite=True)\n\nprojection: 99 (NAD83(HARN) / Missouri West)\nzone:       0\ndatum:      nad83harn\nellipsoid:  grs80\nnorth:      298260\nsouth:      271020\nwest:       1214160\neast:       1226670\nnsres:      30\newres:      30\nrows:       908\ncols:       417\ncells:      378636\n\n\n\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"cop-dem-glo-30\")\nmap.d_vect(map=\"stl_streets\", color=\"grey\", fill_color=\"none\", type=\"line\", width=0.5)\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.geomorphon\", elevation=\"cop-dem-glo-30\", search=15, flat=0.1, forms=\"geomorphon\", overwrite=True)\ngs.run_command(\"r.mask\", vector=\"stl_boundary\")\nmap = gj.Map(width=300)\nmap.d_shade(shade=\"relief\", color=\"geomorphon\")\nmap.d_vect(map=\"stl_boundary\", color=\"red\", fill_color=\"none\")\nmap.show()\n\n\n\n\n\n\n\n\n\ngs.run_command(\"r.mask\", flags=\"r\")\n\n\ngs.run_command(\"v.to.rast\", input=\"stl_streets\", output=\"stl_streets\", use=\"dir\", type=\"line\", overwrite=True) \ngs.run_command(\"r.slope.direction\", elevation=\"cop-dem-glo-30\", direction=\"stl_streets\", aspect=\"aspect\", overwrite=True)\n\n\nimport ipywidgets as widgets\nwidgets.IntSlider()\n\n\n\n\n\nfrom ipyleaflet import Map, Marker, basemaps, basemap_to_tiles\nm = Map(\n  basemap=basemap_to_tiles(\n    basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"\n  ),\n  center=(52.204793, 360.121558),\n  zoom=4\n)\nm.add_layer(Marker(location=(52.204793, 360.121558)))\nm"
  }
]