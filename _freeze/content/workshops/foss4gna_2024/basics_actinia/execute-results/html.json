{
  "hash": "4b1f7ddfc105d41dfce2663036ac6c86",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to Actinia\ndescription: Learn how to use actinia to create a cloud-based processing environment for GRASS.\nformat:\n  html:\n    toc: true\n    code-tools: true\n    code-copy: true\n    code-fold: false\n    other-links:\n      - text: actinia\n        href: https://github.com/actinia-org\n      - text: grass\n        href: https://grass.osgeo.org\n    code-links:\n      - text: Docker Container\n        icon: file-code\n        href: https://github.com/OpenPlainsInc/foss4gna-2024-workshop\n      - text: OpenPlainsInc/actinia_openapi_python_client\n        icon: file-code\n        href: https://github.com/OpenPlainsInc/actinia_openapi_python_client\nauthor:\n  - Corey T. White\ndate: May 6, 2025\nkeep-ipynb: true\ntoc: true\ntoc-depth: 4\nimage: images/webinar_title.webp\ncategories:\n  - geospatial\n  - actinia\n  - GRASS v8.5\n  - jupyter\n  - lidar\n  - STAC\npage-layout: full\ntitle-block-banner: true\njupyter: python3\nfilters:\n  - include-code-files\n---\n\n::: {#b9e9039b .cell execution_count=1}\n\n::: {.cell-output .cell-output-stdout}\n```\n            _   _       _         _  ___  _ \r\n  __ _  ___| |_(_)_ __ (_) __ _  / |/ _ \\/ |\r\n / _` |/ __| __| | '_ \\| |/ _` | | | | | | |\r\n| (_| | (__| |_| | | | | | (_| | | | |_| | |\r\n \\__,_|\\___|\\__|_|_| |_|_|\\__,_| |_|\\___/|_|\r\n                                            \r\n```\n:::\n:::\n\n\n## A REST API for GRASS GIS\n\n<div>\n  <i class=\"fa-sharp-duotone fa-thin fa-glass\"></i> <a href=\"https://grass.osgeo.org/\">GRASS</a> is a Geospatial Processing Engine<br>\n  <i class=\"fa-sharp-duotone fa-light fa-code\"></i> Open Source (GPL v2)<br>\n  <i class=\"fa-sharp-duotone fa-light fa-earth-americas\"></i> Developed by International and Multi-institutional groups and individuals (GRASS Development Team)<br>\n  <i class=\"fa-sharp-duotone fa-light fa-scale-balanced\"></i> Member of the Open Source Geospatial Foundation<br>\n  <i class=\"fa-sharp-duotone fa-light fa-shield-halved\"></i> Received Open Source Security Foundation (OpenSSF) Best Practices Badge - 2024\n</div>\n\n```{mermaid}\nflowchart LR\n  A[Client] -->|Http Request| B[Actinia REST API]\n  B <--> D[GRASS Processing Node]\n  B -->|Http Response| A\n```\n\n## Import Python Libraries\n\n::: {#ed390b69 .cell execution_count=2}\n``` {.python .cell-code}\nimport os\nimport subprocess\nfrom pprint import pprint\nimport sys\nimport json\nimport time\nfrom IPython.display import JSON, display\n\nimport requests\nfrom requests.auth import HTTPBasicAuth\n```\n:::\n\n\n## Setup Environment\n\nDeploy Docker container with Actinia\n\nFollow Instructions at : [https://github.com/OpenPlainsInc/foss4gna-2024-workshop](https://github.com/OpenPlainsInc/foss4gna-2024-workshop)\n\n### Setup Variables\n\n::: {#0e72d998 .cell execution_count=3}\n``` {.python .cell-code}\nACTINIA_USER = 'actinia-gdi'\nACTINIA_PASSWORD = 'actinia-gdi'\nACTINIA_VERSION = 'v3'\nACTINIA_BASEURL = 'http://localhost:8088'\nACTINIA_URL = ACTINIA_BASEURL + \"/api/\" + ACTINIA_VERSION\nACTINIA_AUTH = HTTPBasicAuth(ACTINIA_USER, ACTINIA_PASSWORD)\n```\n:::\n\n\n\n\n## actinia REST API\n\n[actinia](https://github.com/actinia-org)\n[Docker Image](https://github.com/actinia-org/actinia-docker/tree/main)\n\n### Tools\n\n- [actinia OpenApi Python Client](https://github.com/OpenPlainsInc/actinia_openapi_python_client)\n- [actinia-python-client](https://github.com/actinia-org/actinia-python-client)\n\n\n## Acinia Basics\n\n\n\n## User Roles\n\n1. **Superadmin**\n    - Create, modify and delete users\n    - Read/write access to all databases\n    - Can access all API calls\n\n2. **Admin**\n    - All API Calls\n    - Create, modify and delete users with the maximum user-role user of the same user grou\n    - Access to persistent databases that were granted by a **superadmin**\n\n3. **User**\n    - Can run computational tasks in ephemeral and user specific databases\n    - Create, modify and delete locations in a user specific database\n    - Create, modify and delete mapsets in user specific databases\n    - Limited access to API calls\n    - Has limited access to persistent databases\n\n4. **Guest**\n    - Has very limited access to API calls\n    - Limited access to persistent databases\n\n:::aside\nhttps://actinia-org.github.io/actinia-core/actinia_concepts/\n:::\n\n### GRASS Projects\n\nLet's start by requesting a list of GRASS projects from actinia.\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations\"]\n```\n\n::: {#4f55e6ce .cell execution_count=6}\n``` {.python .cell-code}\nurl = f\"{ACTINIA_URL}/locations\"\nresponse = requests.get(url, auth=ACTINIA_AUTH)\nprint_as_json(response.json().get('locations'))\n```\n:::\n\n\nNow we will get extra information about a specific project.\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- C[\"{location_id}\"]\n  C --- D[\"/info\"]\n```\n\n::: {#565b574b .cell execution_count=7}\n``` {.python .cell-code}\nlocation_id = 'nc_spm_08'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/info\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'projection': 'PROJCRS[\"NAD83(HARN) / North '\n               'Carolina\",BASEGEOGCRS[\"NAD83(HARN)\",DATUM[\"NAD83 (High '\n               'Accuracy Reference Network)\",ELLIPSOID[\"GRS '\n               '1980\",6378137,298.257222101,LENGTHUNIT[\"metre\",1]]],PRIMEM[\"Greenwich\",0,ANGLEUNIT[\"degree\",0.0174532925199433]],ID[\"EPSG\",4152]],CONVERSION[\"SPCS83 '\n               'North Carolina zone (meter)\",METHOD[\"Lambert Conic Conformal '\n               '(2SP)\",ID[\"EPSG\",9802]],PARAMETER[\"Latitude of false '\n               'origin\",33.75,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8821]],PARAMETER[\"Longitude '\n               'of false '\n               'origin\",-79,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8822]],PARAMETER[\"Latitude '\n               'of 1st standard '\n               'parallel\",36.1666666666667,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8823]],PARAMETER[\"Latitude '\n               'of 2nd standard '\n               'parallel\",34.3333333333333,ANGLEUNIT[\"degree\",0.0174532925199433],ID[\"EPSG\",8824]],PARAMETER[\"Easting '\n               'at false '\n               'origin\",609601.22,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8826]],PARAMETER[\"Northing '\n               'at false '\n               'origin\",0,LENGTHUNIT[\"metre\",1],ID[\"EPSG\",8827]]],CS[Cartesian,2],AXIS[\"easting '\n               '(X)\",east,ORDER[1],LENGTHUNIT[\"metre\",1]],AXIS[\"northing '\n               '(Y)\",north,ORDER[2],LENGTHUNIT[\"metre\",1]],USAGE[SCOPE[\"Engineering '\n               'survey, topographic mapping.\"],AREA[\"United States (USA) - '\n               'North Carolina - counties of Alamance; Alexander; Alleghany; '\n               'Anson; Ashe; Avery; Beaufort; Bertie; Bladen; Brunswick; '\n               'Buncombe; Burke; Cabarrus; Caldwell; Camden; Carteret; '\n               'Caswell; Catawba; Chatham; Cherokee; Chowan; Clay; Cleveland; '\n               'Columbus; Craven; Cumberland; Currituck; Dare; Davidson; '\n               'Davie; Duplin; Durham; Edgecombe; Forsyth; Franklin; Gaston; '\n               'Gates; Graham; Granville; Greene; Guilford; Halifax; Harnett; '\n               'Haywood; Henderson; Hertford; Hoke; Hyde; Iredell; Jackson; '\n               'Johnston; Jones; Lee; Lenoir; Lincoln; Macon; Madison; Martin; '\n               'McDowell; Mecklenburg; Mitchell; Montgomery; Moore; Nash; New '\n               'Hanover; Northampton; Onslow; Orange; Pamlico; Pasquotank; '\n               'Pender; Perquimans; Person; Pitt; Polk; Randolph; Richmond; '\n               'Robeson; Rockingham; Rowan; Rutherford; Sampson; Scotland; '\n               'Stanly; Stokes; Surry; Swain; Transylvania; Tyrrell; Union; '\n               'Vance; Wake; Warren; Washington; Watauga; Wayne; Wilkes; '\n               'Wilson; Yadkin; '\n               'Yancey.\"],BBOX[33.83,-84.33,36.59,-75.38]],ID[\"EPSG\",3358]]\\n',\n 'region': {'b': 0.0,\n            'cells': 1,\n            'cells3': 1,\n            'cols': 1,\n            'cols3': 1,\n            'depths': 1,\n            'e': 1.0,\n            'ewres': 1.0,\n            'ewres3': 1.0,\n            'n': 1.0,\n            'nsres': 1.0,\n            'nsres3': 1.0,\n            'projection': 99,\n            'rows': 1,\n            'rows3': 1,\n            's': 0.0,\n            't': 1.0,\n            'tbres': 1.0,\n            'w': 0.0,\n            'zone': 0}}\n```\n:::\n:::\n\n\n### Mapsets\n\nWe will now get a list of mapsets for a specific project.\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets\"]\n```\n\n::: {#9a044309 .cell execution_count=8}\n``` {.python .cell-code}\n# mapset = 'nc_spm_08'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\nNow let's get extra information about a specific mapset `PERMANENT`.\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/info\"]\n```\n\n::: {#8801ec0b .cell execution_count=9}\n``` {.python .cell-code}\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/info\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\n### Layers\n\n#### Raster Layers\n\nLet's see all of the mapsets raster layers.\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/raster_layers\"]\n```\n\n::: {#6b0f43f0 .cell execution_count=10}\n``` {.python .cell-code}\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/raster_layers\"\n\nresponse = requests.get( url, auth=ACTINIA_AUTH)\n\npprint(response.json().get('process_results'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\n#### Vector Layers\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/vector_layers\"]\n```\n\n::: {#694b2b1e .cell execution_count=11}\n``` {.python .cell-code}\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/vector_layers\"\n\npayload = {}\nheaders = {}\n\nresponse = requests.get( url, auth=ACTINIA_AUTH, headers=headers)\n\npprint(response.json().get('process_results'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\n### Processing\n\n#### Syncronous Processing\n\nEmphemeral process\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/processing\"]\n```\n\n::: {#b6322e54 .cell execution_count=12}\n``` {.python .cell-code}\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/processing\"\n\ndata = {}\n\nresponse = requests.post( url, auth=ACTINIA_AUTH, json=data)\n\npprint(response.json().get('process_results'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNone\n```\n:::\n:::\n\n\n#### Asyncronous Processing\n\n```{mermaid}\nflowchart LR\n  A[\"/api/v3/locations/\"]\n  A --- B(\"{location_id}\")\n  B --- C[\"/mapsets/\"]\n  C --- D(\"{mapset_id}\")\n  D --- E[\"/processing_async\"]\n```\n\n::: {#e948b02e .cell execution_count=13}\n``` {.python .cell-code}\nmapset_id = 'PERMANENT'\nlocation_id = 'nc_spm_08_grass7'\nurl = f\"{ACTINIA_URL}/locations/{location_id}/mapsets/{mapset_id}/processing_async\"\n\ndata = {}\n\nresponse = requests.post( url, auth=ACTINIA_AUTH, json=data)\n\npprint(response.json().get('process_results'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{}\n```\n:::\n:::\n\n\n## Let's look at the complete API within `PostMan` or `Insomnia`.\n\n- [Postman](https://www.postman.com/)\n- [Insomnia](https://insomnia.rest/download)\n\n```\nhttps://localhost:8080/api/v3/swagger-ui/index.html\n```\n\n### Process Chains\n\nLet move on to creating process chains in [Part 3](./process_chains.ipynb).\n\n",
    "supporting": [
      "basics_actinia_files"
    ],
    "filters": [],
    "includes": {}
  }
}