{
  "hash": "c3c3c41a68aaae578785520e3def00a5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Geoprocessing with GRASS GIS and Jupyter Notebooks\ndescription: This tutorial demonstrates how to use GRASS GIS in Jupyter Notebooks.\nformat: html\nauthor: Corey T. White\ndate: '2024-10-9'\nkeep-ipynb: false\ntoc: true\ntoc-depth: 4\nimage: imagery_data/nadir/A0046B/0_000_00_000.jpg\ncategories: [geospatial, GRASS v8.5, jupyter, helene]\npage-layout: full\ntitle-block-banner: true\ndraft: false\n---\n\n\n# Download Flight Data\n\n## Set up environment\n\n::: {#ec897aa8 .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nimport subprocess\nfrom pathlib import Path\nfrom IPython.display import display\n\nv = sys.version_info\nprint(f\"We are using Python {v.major}.{v.minor}.{v.micro}\")\n\n# Append GRASS to the python system path\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n# Import GRASS libraries\nimport grass.script as gs\nimport grass.jupyter as gj\n\n# GRASS Variables\ngrassdata = \"grassdata\"\nproject_name = \"Swannanoa\"\nmapset = \"flight\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWe are using Python 3.10.12\n```\n:::\n:::\n\n\n## GRASS\n\n### Create project\n\n::: {#62e4606f .cell execution_count=2}\n``` {.python .cell-code}\ngs.create_project(path=grassdata, name=project_name, epsg=\"3358\", overwrite=False)\n```\n:::\n\n\n### Start GRASS session\n\n::: {#f95ce25c .cell execution_count=3}\n``` {.python .cell-code}\n# Start GRASS in the recently created project\nsession = gj.init(Path(grassdata, project_name))\n```\n:::\n\n\n### Define Query Parameters\n\n::: {#952f32c6 .cell execution_count=4}\n``` {.python .cell-code}\nproject = '`CAP - H-TS Helene 2024`' # Queried at API level\nmission = \"'24-1-5849'\"\nflight = \"'A0046B'\" # Swannanowa\n\nurl = f\"https://services.arcgis.com/XG15cJAlne2vxtgt/ArcGIS/rest/services/Image_Points_view/FeatureServer/3/query?where=project+%3D+%27CAP+-+H-TS+Helene+2024%27+and+mission+%3D+%2724-1-5849%27+and+flight+%3D+%27{flight}%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&relationParam=&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=3358&defaultSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnTrueCurves=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=geojson&token=\"\n```\n:::\n\n\n### Import Data\n\n::: {#c83209de .cell execution_count=5}\n``` {.python .cell-code}\ngs.run_command(\"v.import\", input=url, output=\"image_points\", overwrite=True)\n```\n:::\n\n\n### Get data info\n\n::: {#98b62e2c .cell execution_count=6}\n``` {.python .cell-code}\ngs.run_command(\"v.info\", map=\"image_points\", flags=\"c\" )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nINTEGER|cat\nINTEGER|OBJECTID\nTEXT|id\nTEXT|filename\nTEXT|original_filename\nDOUBLE PRECISION|longitude\nDOUBLE PRECISION|latitude\nINTEGER|altitude\nDOUBLE PRECISION|heading\nINTEGER|exif_photo_date\nTEXT|exif_camera_maker\nTEXT|exif_camera_model\nINTEGER|exif_focal_length\nTEXT|url\nINTEGER|image_type\nTEXT|project\nTEXT|mission\nTEXT|flight\nTEXT|exif_hash\nTEXT|GlobalID\nINTEGER|CreationDate\nTEXT|Creator\nINTEGER|EditDate\nTEXT|Editor\n```\n:::\n:::\n\n\n### Set region\n\n::: {#0a1db69a .cell execution_count=7}\n``` {.python .cell-code}\ngs.run_command(\"g.region\", vector=\"image_points\", res=10)\n```\n:::\n\n\n### View Data\n\n::: {#ed82b707 .cell execution_count=8}\n``` {.python .cell-code}\n# m = gj.Map()\n# m.d_vect(map=\"image_points\")\n# display(m.show())\n```\n:::\n\n\n### Read data into pandas DataFrame\n\n::: {#0658c969 .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\n\npoints_json = gs.parse_command(\"v.db.select\",\n    map=\"image_points\",\n    format=\"json\",\n    flags=\"\"\n)\n\npoints_df = pd.DataFrame(points_json[\"records\"])\npoints_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cat</th>\n      <th>OBJECTID</th>\n      <th>id</th>\n      <th>filename</th>\n      <th>original_filename</th>\n      <th>longitude</th>\n      <th>latitude</th>\n      <th>altitude</th>\n      <th>heading</th>\n      <th>exif_photo_date</th>\n      <th>...</th>\n      <th>image_type</th>\n      <th>project</th>\n      <th>mission</th>\n      <th>flight</th>\n      <th>exif_hash</th>\n      <th>GlobalID</th>\n      <th>CreationDate</th>\n      <th>Creator</th>\n      <th>EditDate</th>\n      <th>Editor</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>120606</td>\n      <td>d97114c4-eed0-4ccd-90a7-3f2e11c8d580</td>\n      <td>None</td>\n      <td>DSC_0263.JPG</td>\n      <td>-82.163263</td>\n      <td>35.436860</td>\n      <td>771</td>\n      <td>235.5</td>\n      <td>958048008.0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>CAP - H-TS Helene 2024</td>\n      <td>24-C-5836</td>\n      <td>A0001</td>\n      <td>f61d98abd014485411ceac7c4c07b70f7eb72596760ded...</td>\n      <td>a2c14f97-4cbb-487a-87cf-d4d1c1fcab2e</td>\n      <td>963647308</td>\n      <td>ImageEvents_Editor</td>\n      <td>963647308</td>\n      <td>ImageEvents_Editor</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>120607</td>\n      <td>6ce484f2-018e-423f-bce7-6eaad9c244f3</td>\n      <td>None</td>\n      <td>DSC_0264.JPG</td>\n      <td>-82.163695</td>\n      <td>35.436928</td>\n      <td>770</td>\n      <td>235.9</td>\n      <td>958049008.0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>CAP - H-TS Helene 2024</td>\n      <td>24-C-5836</td>\n      <td>A0001</td>\n      <td>3a5d8ce54df9d67061388cd9bd043acd8be5372f97a835...</td>\n      <td>8558530c-5f3f-4ab3-aff4-3edc24d289ee</td>\n      <td>963647352</td>\n      <td>ImageEvents_Editor</td>\n      <td>963647352</td>\n      <td>ImageEvents_Editor</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>120608</td>\n      <td>cde7ac76-489a-4727-8960-0eee4a5e0502</td>\n      <td>None</td>\n      <td>DSC_0333.JPG</td>\n      <td>-82.173335</td>\n      <td>35.434563</td>\n      <td>652</td>\n      <td>255.6</td>\n      <td>958212008.0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>CAP - H-TS Helene 2024</td>\n      <td>24-C-5836</td>\n      <td>A0001</td>\n      <td>fd95aec2cf70f69597e2d40ce55d3fda3d11eeffa54337...</td>\n      <td>e22ed4ae-6d25-4373-9602-bee109a51dca</td>\n      <td>963706222</td>\n      <td>ImageEvents_Editor</td>\n      <td>963706222</td>\n      <td>ImageEvents_Editor</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>120609</td>\n      <td>8377e5c7-c2b5-4751-bfa7-78d872330dae</td>\n      <td>None</td>\n      <td>DSC_0267.JPG</td>\n      <td>-82.164995</td>\n      <td>35.437093</td>\n      <td>763</td>\n      <td>226.8</td>\n      <td>958052008.0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>CAP - H-TS Helene 2024</td>\n      <td>24-C-5836</td>\n      <td>A0001</td>\n      <td>c92560989bb8f88d7bee2d0b47da7eaa443752cfef9436...</td>\n      <td>a1a3d79c-8552-454a-bb6a-e06d98df8233</td>\n      <td>963797387</td>\n      <td>ImageEvents_Editor</td>\n      <td>963797387</td>\n      <td>ImageEvents_Editor</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>120610</td>\n      <td>3073c812-6915-4906-bf7a-8eb2b072d4d5</td>\n      <td>None</td>\n      <td>DSC_0333.JPG</td>\n      <td>-82.173335</td>\n      <td>35.434563</td>\n      <td>652</td>\n      <td>255.6</td>\n      <td>958212008.0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>CAP - H-TS Helene 2024</td>\n      <td>24-C-5836</td>\n      <td>A0001</td>\n      <td>fd95aec2cf70f69597e2d40ce55d3fda3d11eeffa54337...</td>\n      <td>612a97c6-2fbc-498f-9cb7-003cb595529e</td>\n      <td>963799987</td>\n      <td>ImageEvents_Editor</td>\n      <td>963799987</td>\n      <td>ImageEvents_Editor</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 24 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Download images for processing\n\n::: {#75f77243 .cell execution_count=10}\n``` {.python .cell-code}\nimport os\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Function to download an image from a URL\ndef download_image(url, save_path, session):\n    try:\n        response = session.get(url)\n        response.raise_for_status()  # Check for HTTP errors\n        with open(save_path, 'wb') as file:\n            file.write(response.content)\n        print(f\"Downloaded {url} to {save_path}\")\n    except requests.RequestException as e:\n        print(f\"Failed to download {url}: {e}\")\n\n# Main function to set up the thread pool and download images\ndef run(urls, save_dir, num_threads=4):\n    if not os.path.exists(save_dir):\n        os.makedirs(save_dir)\n\n    with ThreadPoolExecutor(max_workers=num_threads) as executor:\n        with requests.Session() as session:\n            futures = []\n            for url in urls:\n                filename = os.path.basename(url)\n                save_path = os.path.join(save_dir, filename)\n                futures.append(executor.submit(download_image, url, save_path, session))\n\n            for future in as_completed(futures):\n                future.result()  # This will raise \n```\n:::\n\n\n### Run the download command\n\nMake sure to set appropriate threads for your system.\n\n::: {#6d495887 .cell execution_count=11}\n``` {.python .cell-code}\nurl_list = list(points_df.url.values)\n\nrun(urls=url_list, save_dir=\"imagery_data/nadir/{flight}\", num_threads=32)\n```\n:::\n\n\n### Example output\n\n| | | |\n|-|-|-|\n|![0_000_00_018.jpg](imagery_data/nadir/A0046B/0_000_00_018.jpg)|![0_000_00_019.jpg](imagery_data/nadir/A0046B/0_000_00_019.jpg)|![0_000_00_020.jpg](imagery_data/nadir/A0046B/0_000_00_020.jpg)|\n|![](imagery_data/nadir/A0046B/0_000_00_021.jpg)|![](imagery_data/nadir/A0046B/0_000_00_022.jpg)|![](imagery_data/nadir/A0046B/0_000_00_023.jpg)|\n|![](imagery_data/nadir/A0046B/0_000_00_024.jpg)|![](imagery_data/nadir/A0046B/0_000_00_025.jpg)|![](imagery_data/nadir/A0046B/0_000_00_026.jpg)|\n\n\n## WIP\n\n\n\n",
    "supporting": [
      "photogrametry_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}