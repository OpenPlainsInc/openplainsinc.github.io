{
  "hash": "4a1964eac95f6e0235519995af2b094f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Helene Photogrametery\ndescription: This tutorial demonstrates how download images from ArcGIS Server into GRASS GIS.\nformat: html\nauthor: Corey T. White\ndate: '2024-10-9'\nkeep-ipynb: false\ntoc: true\ntoc-depth: 4\nengine: jupyter\nexecute:\n  eval: false\njupyter: python3\nimage: imagery_data/nadir/A0046B/0_000_00_000.jpg\ncategories: [geospatial, GRASS v8.5, jupyter, helene]\npage-layout: full\ntitle-block-banner: true\ndraft: true\n---\n\n\n\n\n# Download Flight Data\n\n## Set up environment\n\n::: {#5747f32d .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nimport subprocess\nfrom pathlib import Path\nfrom IPython.display import display\n\nv = sys.version_info\nprint(f\"We are using Python {v.major}.{v.minor}.{v.micro}\")\n\n# Append GRASS to the python system path\nsys.path.append(\n    subprocess.check_output([\"grass\", \"--config\", \"python_path\"], text=True).strip()\n)\n\n# Import GRASS libraries\nimport grass.script as gs\nimport grass.jupyter as gj\n\n# GRASS Variables\ngrassdata = \"grassdata\"\nproject_name = \"Swannanoa\"\nmapset = \"flight\"\n```\n:::\n\n\n## GRASS\n\n### Create project\n\n::: {#5cf4912d .cell execution_count=2}\n``` {.python .cell-code}\ngs.create_project(path=grassdata, name=project_name, epsg=\"3358\", overwrite=False)\n```\n:::\n\n\n### Start GRASS session\n\n::: {#a9fa4960 .cell execution_count=3}\n``` {.python .cell-code}\n# Start GRASS in the recently created project\nsession = gj.init(Path(grassdata, project_name))\n```\n:::\n\n\n### Define Query Parameters\n\n::: {#1124cdc4 .cell execution_count=4}\n``` {.python .cell-code}\nproject = '`CAP - H-TS Helene 2024`' # Queried at API level\nmission = \"'24-1-5849'\"\nflight = \"'A0046B'\" # Swannanowa\n\nurl = f\"https://services.arcgis.com/XG15cJAlne2vxtgt/ArcGIS/rest/services/Image_Points_view/FeatureServer/3/query?where=project+%3D+%27CAP+-+H-TS+Helene+2024%27+and+mission+%3D+%2724-1-5849%27+and+flight+%3D+%27{flight}%27&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&relationParam=&returnGeodetic=false&outFields=*&returnGeometry=true&featureEncoding=esriDefault&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=3358&defaultSR=&datumTransformation=&applyVCSProjection=false&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnQueryGeometry=false&returnDistinctValues=false&cacheHint=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&returnTrueCurves=false&returnExceededLimitFeatures=true&quantizationParameters=&sqlFormat=none&f=geojson&token=\"\n```\n:::\n\n\n### Import Data\n\n::: {#08ce55de .cell execution_count=5}\n``` {.python .cell-code}\ngs.run_command(\"v.import\", input=url, output=\"image_points\", overwrite=True)\n```\n:::\n\n\n### Get data info\n\n::: {#07cb7aa3 .cell execution_count=6}\n``` {.python .cell-code}\ngs.run_command(\"v.info\", map=\"image_points\", flags=\"c\" )\n```\n:::\n\n\n### Set region\n\n::: {#5fdb0bc6 .cell execution_count=7}\n``` {.python .cell-code}\ngs.run_command(\"g.region\", vector=\"image_points\", res=10)\n```\n:::\n\n\n### View Data\n\n::: {#fe2d9a4d .cell execution_count=8}\n``` {.python .cell-code}\n# m = gj.Map()\n# m.d_vect(map=\"image_points\")\n# display(m.show())\n```\n:::\n\n\n### Read data into pandas DataFrame\n\n::: {#3dd74efd .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\n\npoints_json = gs.parse_command(\"v.db.select\",\n    map=\"image_points\",\n    format=\"json\",\n    flags=\"\"\n)\n\npoints_df = pd.DataFrame(points_json[\"records\"])\npoints_df.head()\n```\n:::\n\n\n## Download images for processing\n\n::: {#2b8603af .cell execution_count=10}\n``` {.python .cell-code}\nimport os\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nimport requests\n\ndef query_feature_service(flight_id):\n    try:\n        rest_url = 'https://services.arcgis.com/XG15cJAlne2vxtgt/ArcGIS/rest/services/Image_Points_view/FeatureServer/3/query'\n\n        query = f\"project='CAP - H-TS Helene 2024' AND mission='24-1-5849' AND flight='{flight_id}'\"\n\n        params = {\n            'where': query,\n            'outFields': '*',\n            'f': 'json',\n            'returnGeometry': 'false'\n        }\n        response = requests.get(rest_url, params=params)\n        json_data = response.json()\n        url_list = list(map(lambda feat: feat.get('url'), json_data['features']))\n        return url_list\n    except requests.RequestException as e:\n        print(f\"Error fetching data from FeatureService: {e}\")\n\n# Function to download an image from a URL\ndef download_image(url, save_path, session):\n    try:\n        response = session.get(url)\n        response.raise_for_status()  # Check for HTTP errors\n        with open(save_path, 'wb') as file:\n            file.write(response.content)\n        print(f\"Downloaded {url} to {save_path}\")\n    except requests.RequestException as e:\n        print(f\"Failed to download {url}: {e}\")\n\n# Main function to set up the thread pool and download images\ndef run(urls, save_dir, num_threads=4):\n    if not os.path.exists(save_dir):\n        os.makedirs(save_dir)\n\n    with ThreadPoolExecutor(max_workers=num_threads) as executor:\n        with requests.Session() as session:\n            futures = []\n            for url in urls:\n                filename = os.path.basename(url)\n                save_path = os.path.join(save_dir, filename)\n                futures.append(executor.submit(download_image, url, save_path, session))\n\n            for future in as_completed(futures):\n                future.result()  # This will raise \n```\n:::\n\n\n### Run the download command\n\nMake sure to set appropriate threads for your system.\n\n::: {#979b36c2 .cell execution_count=11}\n``` {.python .cell-code}\nurl_list = list(points_df.url.values)\n\nrun(urls=url_list, save_dir=\"imagery_data/nadir/{flight}\", num_threads=32)\n```\n:::\n\n\n### Example output\n\n| | | |\n|-|-|-|\n|![0_000_00_018.jpg](imagery_data/nadir/A0046B/0_000_00_018.jpg)|![0_000_00_019.jpg](imagery_data/nadir/A0046B/0_000_00_019.jpg)|![0_000_00_020.jpg](imagery_data/nadir/A0046B/0_000_00_020.jpg)|\n|![](imagery_data/nadir/A0046B/0_000_00_021.jpg)|![](imagery_data/nadir/A0046B/0_000_00_022.jpg)|![](imagery_data/nadir/A0046B/0_000_00_023.jpg)|\n|![](imagery_data/nadir/A0046B/0_000_00_024.jpg)|![](imagery_data/nadir/A0046B/0_000_00_025.jpg)|![](imagery_data/nadir/A0046B/0_000_00_026.jpg)|\n\n\n<!-- ## WIP -->\n\n### Run data in your favorite photogrametry software\n\n- WebODM\n- Agisoft Metashape\n\n\n\n::: {#9a6934b4 .cell execution_count=13}\n``` {.python .cell-code}\nurl_list = None\nwith open(\"data(2).txt\", \"r\") as data:\n    url_list = [line.strip() for line in data.readlines()]\n\nrun(urls=url_list, save_dir=\"outputs/3dep_lidar2\", num_threads=32)\n\n```\n:::\n\n\n",
    "supporting": [
      "photogrametry_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}